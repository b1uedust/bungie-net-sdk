/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import uk.co.bluedust.model.DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition;

/**
 * Sometimes, we have large sets of reusable plugs that are defined identically and thus can (and in some cases, are so large that they *must*) be shared across the places where they are used. These are the definitions for those reusable sets of plugs.   See DestinyItemSocketEntryDefinition.plugSource and reusablePlugSetHash for the relationship between these reusable plug sets and the sockets that leverage them (for starters, Emotes).
 */
@ApiModel(description = "Sometimes, we have large sets of reusable plugs that are defined identically and thus can (and in some cases, are so large that they *must*) be shared across the places where they are used. These are the definitions for those reusable sets of plugs.   See DestinyItemSocketEntryDefinition.plugSource and reusablePlugSetHash for the relationship between these reusable plug sets and the sockets that leverage them (for starters, Emotes).")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-04T16:50:06.922Z")
public class DestinyDefinitionsSocketsDestinyPlugSetDefinition {
  @JsonProperty("displayProperties")
  private Object displayProperties = null;

  @JsonProperty("reusablePlugItems")
  private List<DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition> reusablePlugItems = null;

  @JsonProperty("hash")
  private Integer hash = null;

  @JsonProperty("index")
  private Integer index = null;

  @JsonProperty("redacted")
  private Boolean redacted = null;

  public DestinyDefinitionsSocketsDestinyPlugSetDefinition displayProperties(Object displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

   /**
   * If you want to show these plugs in isolation, these are the display properties for them.
   * @return displayProperties
  **/
  @ApiModelProperty(value = "If you want to show these plugs in isolation, these are the display properties for them.")
  public Object getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(Object displayProperties) {
    this.displayProperties = displayProperties;
  }

  public DestinyDefinitionsSocketsDestinyPlugSetDefinition reusablePlugItems(List<DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition> reusablePlugItems) {
    this.reusablePlugItems = reusablePlugItems;
    return this;
  }

  public DestinyDefinitionsSocketsDestinyPlugSetDefinition addReusablePlugItemsItem(DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition reusablePlugItemsItem) {
    if (this.reusablePlugItems == null) {
      this.reusablePlugItems = new ArrayList<>();
    }
    this.reusablePlugItems.add(reusablePlugItemsItem);
    return this;
  }

   /**
   * This is a list of pre-determined plugs that can be plugged into this socket, without the character having the plug in their inventory.  If this list is populated, you will not be allowed to plug an arbitrary item in the socket: you will only be able to choose from one of these reusable plugs.
   * @return reusablePlugItems
  **/
  @ApiModelProperty(value = "This is a list of pre-determined plugs that can be plugged into this socket, without the character having the plug in their inventory.  If this list is populated, you will not be allowed to plug an arbitrary item in the socket: you will only be able to choose from one of these reusable plugs.")
  public List<DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition> getReusablePlugItems() {
    return reusablePlugItems;
  }

  public void setReusablePlugItems(List<DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition> reusablePlugItems) {
    this.reusablePlugItems = reusablePlugItems;
  }

  public DestinyDefinitionsSocketsDestinyPlugSetDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

   /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
  **/
  @ApiModelProperty(value = "The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.")
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }

  public DestinyDefinitionsSocketsDestinyPlugSetDefinition index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * The index of the entity as it was found in the investment tables.
   * @return index
  **/
  @ApiModelProperty(value = "The index of the entity as it was found in the investment tables.")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public DestinyDefinitionsSocketsDestinyPlugSetDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

   /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
  **/
  @ApiModelProperty(value = "If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!")
  public Boolean isRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsSocketsDestinyPlugSetDefinition destinyDefinitionsSocketsDestinyPlugSetDefinition = (DestinyDefinitionsSocketsDestinyPlugSetDefinition) o;
    return Objects.equals(this.displayProperties, destinyDefinitionsSocketsDestinyPlugSetDefinition.displayProperties) &&
        Objects.equals(this.reusablePlugItems, destinyDefinitionsSocketsDestinyPlugSetDefinition.reusablePlugItems) &&
        Objects.equals(this.hash, destinyDefinitionsSocketsDestinyPlugSetDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsSocketsDestinyPlugSetDefinition.index) &&
        Objects.equals(this.redacted, destinyDefinitionsSocketsDestinyPlugSetDefinition.redacted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayProperties, reusablePlugItems, hash, index, redacted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsSocketsDestinyPlugSetDefinition {\n");
    
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    reusablePlugItems: ").append(toIndentedString(reusablePlugItems)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

