/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import uk.co.bluedust.model.DestinyMilestonesDestinyMilestoneChallengeActivity;
import uk.co.bluedust.model.DestinyMilestonesDestinyMilestoneQuest;
import uk.co.bluedust.model.DestinyMilestonesDestinyMilestoneRewardCategory;
import uk.co.bluedust.model.DestinyMilestonesDestinyMilestoneVendor;

/**
 * Represents a runtime instance of a user&#39;s milestone status. Live Milestone data should be combined with DestinyMilestoneDefinition data to show the user a picture of what is available for them to do in the game, and their status in regards to said \&quot;things to do.\&quot; Consider it a big, wonky to-do list, or Advisors 3.0 for those who remember the Destiny 1 API.
 */
@ApiModel(description = "Represents a runtime instance of a user's milestone status. Live Milestone data should be combined with DestinyMilestoneDefinition data to show the user a picture of what is available for them to do in the game, and their status in regards to said \"things to do.\" Consider it a big, wonky to-do list, or Advisors 3.0 for those who remember the Destiny 1 API.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-12-08T21:00:47.497Z")
public class DestinyMilestonesDestinyMilestone {
  @JsonProperty("milestoneHash")
  private Long milestoneHash = null;

  @JsonProperty("availableQuests")
  private List<DestinyMilestonesDestinyMilestoneQuest> availableQuests = null;

  @JsonProperty("activities")
  private List<DestinyMilestonesDestinyMilestoneChallengeActivity> activities = null;

  @JsonProperty("values")
  private Map<String, Float> values = null;

  @JsonProperty("vendorHashes")
  private List<Long> vendorHashes = null;

  @JsonProperty("vendors")
  private List<DestinyMilestonesDestinyMilestoneVendor> vendors = null;

  @JsonProperty("rewards")
  private List<DestinyMilestonesDestinyMilestoneRewardCategory> rewards = null;

  @JsonProperty("startDate")
  private OffsetDateTime startDate = null;

  @JsonProperty("endDate")
  private OffsetDateTime endDate = null;

  @JsonProperty("order")
  private Integer order = null;

  public DestinyMilestonesDestinyMilestone milestoneHash(Long milestoneHash) {
    this.milestoneHash = milestoneHash;
    return this;
  }

   /**
   * The unique identifier for the Milestone. Use it to look up the DestinyMilestoneDefinition, so you can combine the other data in this contract with static definition data.
   * @return milestoneHash
  **/
  @ApiModelProperty(value = "The unique identifier for the Milestone. Use it to look up the DestinyMilestoneDefinition, so you can combine the other data in this contract with static definition data.")
  public Long getMilestoneHash() {
    return milestoneHash;
  }

  public void setMilestoneHash(Long milestoneHash) {
    this.milestoneHash = milestoneHash;
  }

  public DestinyMilestonesDestinyMilestone availableQuests(List<DestinyMilestonesDestinyMilestoneQuest> availableQuests) {
    this.availableQuests = availableQuests;
    return this;
  }

  public DestinyMilestonesDestinyMilestone addAvailableQuestsItem(DestinyMilestonesDestinyMilestoneQuest availableQuestsItem) {
    if (this.availableQuests == null) {
      this.availableQuests = new ArrayList<>();
    }
    this.availableQuests.add(availableQuestsItem);
    return this;
  }

   /**
   * Indicates what quests are available for this Milestone. Usually this will be only a single Quest, but some quests have multiple available that you can choose from at any given time. All possible quests for a milestone can be found in the DestinyMilestoneDefinition, but they must be combined with this Live data to determine which one(s) are actually active right now. It is possible for Milestones to not have any quests.
   * @return availableQuests
  **/
  @ApiModelProperty(value = "Indicates what quests are available for this Milestone. Usually this will be only a single Quest, but some quests have multiple available that you can choose from at any given time. All possible quests for a milestone can be found in the DestinyMilestoneDefinition, but they must be combined with this Live data to determine which one(s) are actually active right now. It is possible for Milestones to not have any quests.")
  public List<DestinyMilestonesDestinyMilestoneQuest> getAvailableQuests() {
    return availableQuests;
  }

  public void setAvailableQuests(List<DestinyMilestonesDestinyMilestoneQuest> availableQuests) {
    this.availableQuests = availableQuests;
  }

  public DestinyMilestonesDestinyMilestone activities(List<DestinyMilestonesDestinyMilestoneChallengeActivity> activities) {
    this.activities = activities;
    return this;
  }

  public DestinyMilestonesDestinyMilestone addActivitiesItem(DestinyMilestonesDestinyMilestoneChallengeActivity activitiesItem) {
    if (this.activities == null) {
      this.activities = new ArrayList<>();
    }
    this.activities.add(activitiesItem);
    return this;
  }

   /**
   * The currently active Activities in this milestone, when the Milestone is driven by Challenges.  Not all Milestones have Challenges, but when they do this will indicate the Activities and Challenges under those Activities related to this Milestone.
   * @return activities
  **/
  @ApiModelProperty(value = "The currently active Activities in this milestone, when the Milestone is driven by Challenges.  Not all Milestones have Challenges, but when they do this will indicate the Activities and Challenges under those Activities related to this Milestone.")
  public List<DestinyMilestonesDestinyMilestoneChallengeActivity> getActivities() {
    return activities;
  }

  public void setActivities(List<DestinyMilestonesDestinyMilestoneChallengeActivity> activities) {
    this.activities = activities;
  }

  public DestinyMilestonesDestinyMilestone values(Map<String, Float> values) {
    this.values = values;
    return this;
  }

  public DestinyMilestonesDestinyMilestone putValuesItem(String key, Float valuesItem) {
    if (this.values == null) {
      this.values = new HashMap<>();
    }
    this.values.put(key, valuesItem);
    return this;
  }

   /**
   * Milestones may have arbitrary key/value pairs associated with them, for data that users will want to know about but that doesn&#39;t fit neatly into any of the common components such as Quests. A good example of this would be - if this existed in Destiny 1 - the number of wins you currently have on your Trials of Osiris ticket. Looking in the DestinyMilestoneDefinition, you can use the string identifier of this dictionary to look up more info about the value, including localized string content for displaying the value. The value in the dictionary is the floating point number. The definition will tell you how to format this number.
   * @return values
  **/
  @ApiModelProperty(value = "Milestones may have arbitrary key/value pairs associated with them, for data that users will want to know about but that doesn't fit neatly into any of the common components such as Quests. A good example of this would be - if this existed in Destiny 1 - the number of wins you currently have on your Trials of Osiris ticket. Looking in the DestinyMilestoneDefinition, you can use the string identifier of this dictionary to look up more info about the value, including localized string content for displaying the value. The value in the dictionary is the floating point number. The definition will tell you how to format this number.")
  public Map<String, Float> getValues() {
    return values;
  }

  public void setValues(Map<String, Float> values) {
    this.values = values;
  }

  public DestinyMilestonesDestinyMilestone vendorHashes(List<Long> vendorHashes) {
    this.vendorHashes = vendorHashes;
    return this;
  }

  public DestinyMilestonesDestinyMilestone addVendorHashesItem(Long vendorHashesItem) {
    if (this.vendorHashes == null) {
      this.vendorHashes = new ArrayList<>();
    }
    this.vendorHashes.add(vendorHashesItem);
    return this;
  }

   /**
   * A milestone may have one or more active vendors that are \&quot;related\&quot; to it (that provide rewards, or that are the initiators of the Milestone). I already regret this, even as I&#39;m typing it. [I told you I&#39;d regret this] You see, sometimes a milestone may be directly correlated with a set of vendors that provide varying tiers of rewards. The player may not be able to interact with one or more of those vendors. This will return the hashes of the Vendors that the player *can* interact with, allowing you to show their current inventory as rewards or related items to the Milestone or its activities.  Before we even use it, it&#39;s already deprecated! How much of a bummer is that? We need more data.
   * @return vendorHashes
  **/
  @ApiModelProperty(value = "A milestone may have one or more active vendors that are \"related\" to it (that provide rewards, or that are the initiators of the Milestone). I already regret this, even as I'm typing it. [I told you I'd regret this] You see, sometimes a milestone may be directly correlated with a set of vendors that provide varying tiers of rewards. The player may not be able to interact with one or more of those vendors. This will return the hashes of the Vendors that the player *can* interact with, allowing you to show their current inventory as rewards or related items to the Milestone or its activities.  Before we even use it, it's already deprecated! How much of a bummer is that? We need more data.")
  public List<Long> getVendorHashes() {
    return vendorHashes;
  }

  public void setVendorHashes(List<Long> vendorHashes) {
    this.vendorHashes = vendorHashes;
  }

  public DestinyMilestonesDestinyMilestone vendors(List<DestinyMilestonesDestinyMilestoneVendor> vendors) {
    this.vendors = vendors;
    return this;
  }

  public DestinyMilestonesDestinyMilestone addVendorsItem(DestinyMilestonesDestinyMilestoneVendor vendorsItem) {
    if (this.vendors == null) {
      this.vendors = new ArrayList<>();
    }
    this.vendors.add(vendorsItem);
    return this;
  }

   /**
   * Replaces vendorHashes, which I knew was going to be trouble the day it walked in the door. This will return not only what Vendors are active and relevant to the activity (in an implied order that you can choose to ignore), but also other data - for example, if the Vendor is featuring a specific item relevant to this event that you should show with them.
   * @return vendors
  **/
  @ApiModelProperty(value = "Replaces vendorHashes, which I knew was going to be trouble the day it walked in the door. This will return not only what Vendors are active and relevant to the activity (in an implied order that you can choose to ignore), but also other data - for example, if the Vendor is featuring a specific item relevant to this event that you should show with them.")
  public List<DestinyMilestonesDestinyMilestoneVendor> getVendors() {
    return vendors;
  }

  public void setVendors(List<DestinyMilestonesDestinyMilestoneVendor> vendors) {
    this.vendors = vendors;
  }

  public DestinyMilestonesDestinyMilestone rewards(List<DestinyMilestonesDestinyMilestoneRewardCategory> rewards) {
    this.rewards = rewards;
    return this;
  }

  public DestinyMilestonesDestinyMilestone addRewardsItem(DestinyMilestonesDestinyMilestoneRewardCategory rewardsItem) {
    if (this.rewards == null) {
      this.rewards = new ArrayList<>();
    }
    this.rewards.add(rewardsItem);
    return this;
  }

   /**
   * If the entity to which this component is attached has known active Rewards for the player, this will detail information about those rewards, keyed by the RewardEntry Hash. (See DestinyMilestoneDefinition for more information about Reward Entries) Note that these rewards are not for the Quests related to the Milestone. Think of these as \&quot;overview/checklist\&quot; rewards that may be provided for Milestones that may provide rewards for performing a variety of tasks that aren&#39;t under a specific Quest.
   * @return rewards
  **/
  @ApiModelProperty(value = "If the entity to which this component is attached has known active Rewards for the player, this will detail information about those rewards, keyed by the RewardEntry Hash. (See DestinyMilestoneDefinition for more information about Reward Entries) Note that these rewards are not for the Quests related to the Milestone. Think of these as \"overview/checklist\" rewards that may be provided for Milestones that may provide rewards for performing a variety of tasks that aren't under a specific Quest.")
  public List<DestinyMilestonesDestinyMilestoneRewardCategory> getRewards() {
    return rewards;
  }

  public void setRewards(List<DestinyMilestonesDestinyMilestoneRewardCategory> rewards) {
    this.rewards = rewards;
  }

  public DestinyMilestonesDestinyMilestone startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * If known, this is the date when the event last began or refreshed. It will only be populated for events with fixed and repeating start and end dates.
   * @return startDate
  **/
  @ApiModelProperty(value = "If known, this is the date when the event last began or refreshed. It will only be populated for events with fixed and repeating start and end dates.")
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }

  public DestinyMilestonesDestinyMilestone endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * If known, this is the date when the event will next end or repeat. It will only be populated for events with fixed and repeating start and end dates.
   * @return endDate
  **/
  @ApiModelProperty(value = "If known, this is the date when the event will next end or repeat. It will only be populated for events with fixed and repeating start and end dates.")
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }

  public DestinyMilestonesDestinyMilestone order(Integer order) {
    this.order = order;
    return this;
  }

   /**
   * Used for ordering milestones in a display to match how we order them in BNet. May pull from static data, or possibly in the future from dynamic information.
   * @return order
  **/
  @ApiModelProperty(value = "Used for ordering milestones in a display to match how we order them in BNet. May pull from static data, or possibly in the future from dynamic information.")
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyMilestonesDestinyMilestone destinyMilestonesDestinyMilestone = (DestinyMilestonesDestinyMilestone) o;
    return Objects.equals(this.milestoneHash, destinyMilestonesDestinyMilestone.milestoneHash) &&
        Objects.equals(this.availableQuests, destinyMilestonesDestinyMilestone.availableQuests) &&
        Objects.equals(this.activities, destinyMilestonesDestinyMilestone.activities) &&
        Objects.equals(this.values, destinyMilestonesDestinyMilestone.values) &&
        Objects.equals(this.vendorHashes, destinyMilestonesDestinyMilestone.vendorHashes) &&
        Objects.equals(this.vendors, destinyMilestonesDestinyMilestone.vendors) &&
        Objects.equals(this.rewards, destinyMilestonesDestinyMilestone.rewards) &&
        Objects.equals(this.startDate, destinyMilestonesDestinyMilestone.startDate) &&
        Objects.equals(this.endDate, destinyMilestonesDestinyMilestone.endDate) &&
        Objects.equals(this.order, destinyMilestonesDestinyMilestone.order);
  }

  @Override
  public int hashCode() {
    return Objects.hash(milestoneHash, availableQuests, activities, values, vendorHashes, vendors, rewards, startDate, endDate, order);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyMilestonesDestinyMilestone {\n");
    
    sb.append("    milestoneHash: ").append(toIndentedString(milestoneHash)).append("\n");
    sb.append("    availableQuests: ").append(toIndentedString(availableQuests)).append("\n");
    sb.append("    activities: ").append(toIndentedString(activities)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    vendorHashes: ").append(toIndentedString(vendorHashes)).append("\n");
    sb.append("    vendors: ").append(toIndentedString(vendors)).append("\n");
    sb.append("    rewards: ").append(toIndentedString(rewards)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

