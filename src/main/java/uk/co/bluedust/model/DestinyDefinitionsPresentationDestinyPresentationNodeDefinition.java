/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import uk.co.bluedust.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import uk.co.bluedust.model.DestinyDestinyPresentationNodeType;

/**
 * A PresentationNode is an entity that represents a logical grouping of other entities visually/organizationally.  For now, Presentation Nodes may contain the following... but it may be used for more in the future:  - Collectibles - Records (Or, as the public will call them, \&quot;Triumphs.\&quot; Don&#39;t ask me why we&#39;re overloading the term \&quot;Triumph\&quot;, it still hurts me to think about it) - Other Presentation Nodes, allowing a tree of Presentation Nodes to be created  Part of me wants to break these into conceptual definitions per entity being collected, but the possibility of these different types being mixed in the same UI and the possibility that it could actually be more useful to return the \&quot;bare metal\&quot; presentation node concept has resulted in me deciding against that for the time being.  We&#39;ll see if I come to regret this as well.
 */
@ApiModel(description = "A PresentationNode is an entity that represents a logical grouping of other entities visually/organizationally.  For now, Presentation Nodes may contain the following... but it may be used for more in the future:  - Collectibles - Records (Or, as the public will call them, \"Triumphs.\" Don't ask me why we're overloading the term \"Triumph\", it still hurts me to think about it) - Other Presentation Nodes, allowing a tree of Presentation Nodes to be created  Part of me wants to break these into conceptual definitions per entity being collected, but the possibility of these different types being mixed in the same UI and the possibility that it could actually be more useful to return the \"bare metal\" presentation node concept has resulted in me deciding against that for the time being.  We'll see if I come to regret this as well.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-04T23:34:27.728Z")
public class DestinyDefinitionsPresentationDestinyPresentationNodeDefinition {
  @JsonProperty("displayProperties")
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties = null;

  @JsonProperty("originalIcon")
  private String originalIcon = null;

  @JsonProperty("rootViewIcon")
  private String rootViewIcon = null;

  @JsonProperty("nodeType")
  private DestinyDestinyPresentationNodeType nodeType = null;

  @JsonProperty("scope")
  private Object scope = null;

  @JsonProperty("objectiveHash")
  private Long objectiveHash = null;

  @JsonProperty("completionRecordHash")
  private Long completionRecordHash = null;

  @JsonProperty("children")
  private Object children = null;

  @JsonProperty("displayStyle")
  private Object displayStyle = null;

  @JsonProperty("screenStyle")
  private Object screenStyle = null;

  @JsonProperty("requirements")
  private Object requirements = null;

  @JsonProperty("disableChildSubscreenNavigation")
  private Boolean disableChildSubscreenNavigation = null;

  @JsonProperty("parentNodeHashes")
  private List<Long> parentNodeHashes = null;

  @JsonProperty("hash")
  private Long hash = null;

  @JsonProperty("index")
  private Integer index = null;

  @JsonProperty("redacted")
  private Boolean redacted = null;

  public DestinyDefinitionsPresentationDestinyPresentationNodeDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

   /**
   * Get displayProperties
   * @return displayProperties
  **/
  @ApiModelProperty(value = "")
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeDefinition originalIcon(String originalIcon) {
    this.originalIcon = originalIcon;
    return this;
  }

   /**
   * The original icon for this presentation node, before we futzed with it.
   * @return originalIcon
  **/
  @ApiModelProperty(value = "The original icon for this presentation node, before we futzed with it.")
  public String getOriginalIcon() {
    return originalIcon;
  }

  public void setOriginalIcon(String originalIcon) {
    this.originalIcon = originalIcon;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeDefinition rootViewIcon(String rootViewIcon) {
    this.rootViewIcon = rootViewIcon;
    return this;
  }

   /**
   * Some presentation nodes are meant to be explicitly shown on the \&quot;root\&quot; or \&quot;entry\&quot; screens for the feature to which they are related. You should use this icon when showing them on such a view, if you have a similar \&quot;entry point\&quot; view in your UI. If you don&#39;t have a UI, then I guess it doesn&#39;t matter either way does it?
   * @return rootViewIcon
  **/
  @ApiModelProperty(value = "Some presentation nodes are meant to be explicitly shown on the \"root\" or \"entry\" screens for the feature to which they are related. You should use this icon when showing them on such a view, if you have a similar \"entry point\" view in your UI. If you don't have a UI, then I guess it doesn't matter either way does it?")
  public String getRootViewIcon() {
    return rootViewIcon;
  }

  public void setRootViewIcon(String rootViewIcon) {
    this.rootViewIcon = rootViewIcon;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeDefinition nodeType(DestinyDestinyPresentationNodeType nodeType) {
    this.nodeType = nodeType;
    return this;
  }

   /**
   * Get nodeType
   * @return nodeType
  **/
  @ApiModelProperty(value = "")
  public DestinyDestinyPresentationNodeType getNodeType() {
    return nodeType;
  }

  public void setNodeType(DestinyDestinyPresentationNodeType nodeType) {
    this.nodeType = nodeType;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeDefinition scope(Object scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Indicates whether this presentation node&#39;s state is determined on a per-character or on an account-wide basis.
   * @return scope
  **/
  @ApiModelProperty(value = "Indicates whether this presentation node's state is determined on a per-character or on an account-wide basis.")
  public Object getScope() {
    return scope;
  }

  public void setScope(Object scope) {
    this.scope = scope;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeDefinition objectiveHash(Long objectiveHash) {
    this.objectiveHash = objectiveHash;
    return this;
  }

   /**
   * If this presentation node shows a related objective (for instance, if it tracks the progress of its children), the objective being tracked is indicated here.
   * @return objectiveHash
  **/
  @ApiModelProperty(value = "If this presentation node shows a related objective (for instance, if it tracks the progress of its children), the objective being tracked is indicated here.")
  public Long getObjectiveHash() {
    return objectiveHash;
  }

  public void setObjectiveHash(Long objectiveHash) {
    this.objectiveHash = objectiveHash;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeDefinition completionRecordHash(Long completionRecordHash) {
    this.completionRecordHash = completionRecordHash;
    return this;
  }

   /**
   * If this presentation node has an associated \&quot;Record\&quot; that you can accomplish for completing its children, this is the identifier of that Record.
   * @return completionRecordHash
  **/
  @ApiModelProperty(value = "If this presentation node has an associated \"Record\" that you can accomplish for completing its children, this is the identifier of that Record.")
  public Long getCompletionRecordHash() {
    return completionRecordHash;
  }

  public void setCompletionRecordHash(Long completionRecordHash) {
    this.completionRecordHash = completionRecordHash;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeDefinition children(Object children) {
    this.children = children;
    return this;
  }

   /**
   * The child entities contained by this presentation node.
   * @return children
  **/
  @ApiModelProperty(value = "The child entities contained by this presentation node.")
  public Object getChildren() {
    return children;
  }

  public void setChildren(Object children) {
    this.children = children;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeDefinition displayStyle(Object displayStyle) {
    this.displayStyle = displayStyle;
    return this;
  }

   /**
   * A hint for how to display this presentation node when it&#39;s shown in a list.
   * @return displayStyle
  **/
  @ApiModelProperty(value = "A hint for how to display this presentation node when it's shown in a list.")
  public Object getDisplayStyle() {
    return displayStyle;
  }

  public void setDisplayStyle(Object displayStyle) {
    this.displayStyle = displayStyle;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeDefinition screenStyle(Object screenStyle) {
    this.screenStyle = screenStyle;
    return this;
  }

   /**
   * A hint for how to display this presentation node when it&#39;s shown in its own detail screen.
   * @return screenStyle
  **/
  @ApiModelProperty(value = "A hint for how to display this presentation node when it's shown in its own detail screen.")
  public Object getScreenStyle() {
    return screenStyle;
  }

  public void setScreenStyle(Object screenStyle) {
    this.screenStyle = screenStyle;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeDefinition requirements(Object requirements) {
    this.requirements = requirements;
    return this;
  }

   /**
   * The requirements for being able to interact with this presentation node and its children.
   * @return requirements
  **/
  @ApiModelProperty(value = "The requirements for being able to interact with this presentation node and its children.")
  public Object getRequirements() {
    return requirements;
  }

  public void setRequirements(Object requirements) {
    this.requirements = requirements;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeDefinition disableChildSubscreenNavigation(Boolean disableChildSubscreenNavigation) {
    this.disableChildSubscreenNavigation = disableChildSubscreenNavigation;
    return this;
  }

   /**
   * If this presentation node has children, but the game doesn&#39;t let you inspect the details of those children, that is indicated here.
   * @return disableChildSubscreenNavigation
  **/
  @ApiModelProperty(value = "If this presentation node has children, but the game doesn't let you inspect the details of those children, that is indicated here.")
  public Boolean isDisableChildSubscreenNavigation() {
    return disableChildSubscreenNavigation;
  }

  public void setDisableChildSubscreenNavigation(Boolean disableChildSubscreenNavigation) {
    this.disableChildSubscreenNavigation = disableChildSubscreenNavigation;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeDefinition parentNodeHashes(List<Long> parentNodeHashes) {
    this.parentNodeHashes = parentNodeHashes;
    return this;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeDefinition addParentNodeHashesItem(Long parentNodeHashesItem) {
    if (this.parentNodeHashes == null) {
      this.parentNodeHashes = new ArrayList<>();
    }
    this.parentNodeHashes.add(parentNodeHashesItem);
    return this;
  }

   /**
   * A quick reference to presentation nodes that have this node as a child. (presentation nodes can be parented under multiple parents)
   * @return parentNodeHashes
  **/
  @ApiModelProperty(value = "A quick reference to presentation nodes that have this node as a child. (presentation nodes can be parented under multiple parents)")
  public List<Long> getParentNodeHashes() {
    return parentNodeHashes;
  }

  public void setParentNodeHashes(List<Long> parentNodeHashes) {
    this.parentNodeHashes = parentNodeHashes;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeDefinition hash(Long hash) {
    this.hash = hash;
    return this;
  }

   /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
  **/
  @ApiModelProperty(value = "The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.")
  public Long getHash() {
    return hash;
  }

  public void setHash(Long hash) {
    this.hash = hash;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeDefinition index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * The index of the entity as it was found in the investment tables.
   * @return index
  **/
  @ApiModelProperty(value = "The index of the entity as it was found in the investment tables.")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

   /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
  **/
  @ApiModelProperty(value = "If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!")
  public Boolean isRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsPresentationDestinyPresentationNodeDefinition destinyDefinitionsPresentationDestinyPresentationNodeDefinition = (DestinyDefinitionsPresentationDestinyPresentationNodeDefinition) o;
    return Objects.equals(this.displayProperties, destinyDefinitionsPresentationDestinyPresentationNodeDefinition.displayProperties) &&
        Objects.equals(this.originalIcon, destinyDefinitionsPresentationDestinyPresentationNodeDefinition.originalIcon) &&
        Objects.equals(this.rootViewIcon, destinyDefinitionsPresentationDestinyPresentationNodeDefinition.rootViewIcon) &&
        Objects.equals(this.nodeType, destinyDefinitionsPresentationDestinyPresentationNodeDefinition.nodeType) &&
        Objects.equals(this.scope, destinyDefinitionsPresentationDestinyPresentationNodeDefinition.scope) &&
        Objects.equals(this.objectiveHash, destinyDefinitionsPresentationDestinyPresentationNodeDefinition.objectiveHash) &&
        Objects.equals(this.completionRecordHash, destinyDefinitionsPresentationDestinyPresentationNodeDefinition.completionRecordHash) &&
        Objects.equals(this.children, destinyDefinitionsPresentationDestinyPresentationNodeDefinition.children) &&
        Objects.equals(this.displayStyle, destinyDefinitionsPresentationDestinyPresentationNodeDefinition.displayStyle) &&
        Objects.equals(this.screenStyle, destinyDefinitionsPresentationDestinyPresentationNodeDefinition.screenStyle) &&
        Objects.equals(this.requirements, destinyDefinitionsPresentationDestinyPresentationNodeDefinition.requirements) &&
        Objects.equals(this.disableChildSubscreenNavigation, destinyDefinitionsPresentationDestinyPresentationNodeDefinition.disableChildSubscreenNavigation) &&
        Objects.equals(this.parentNodeHashes, destinyDefinitionsPresentationDestinyPresentationNodeDefinition.parentNodeHashes) &&
        Objects.equals(this.hash, destinyDefinitionsPresentationDestinyPresentationNodeDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsPresentationDestinyPresentationNodeDefinition.index) &&
        Objects.equals(this.redacted, destinyDefinitionsPresentationDestinyPresentationNodeDefinition.redacted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayProperties, originalIcon, rootViewIcon, nodeType, scope, objectiveHash, completionRecordHash, children, displayStyle, screenStyle, requirements, disableChildSubscreenNavigation, parentNodeHashes, hash, index, redacted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsPresentationDestinyPresentationNodeDefinition {\n");
    
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    originalIcon: ").append(toIndentedString(originalIcon)).append("\n");
    sb.append("    rootViewIcon: ").append(toIndentedString(rootViewIcon)).append("\n");
    sb.append("    nodeType: ").append(toIndentedString(nodeType)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    objectiveHash: ").append(toIndentedString(objectiveHash)).append("\n");
    sb.append("    completionRecordHash: ").append(toIndentedString(completionRecordHash)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    displayStyle: ").append(toIndentedString(displayStyle)).append("\n");
    sb.append("    screenStyle: ").append(toIndentedString(screenStyle)).append("\n");
    sb.append("    requirements: ").append(toIndentedString(requirements)).append("\n");
    sb.append("    disableChildSubscreenNavigation: ").append(toIndentedString(disableChildSubscreenNavigation)).append("\n");
    sb.append("    parentNodeHashes: ").append(toIndentedString(parentNodeHashes)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

