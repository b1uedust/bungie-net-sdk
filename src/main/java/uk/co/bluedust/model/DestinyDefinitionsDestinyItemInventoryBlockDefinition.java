/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * If the item can exist in an inventory - the overwhelming majority of them can and do - then this is the basic properties regarding the item&#39;s relationship with the inventory.
 */
@ApiModel(description = "If the item can exist in an inventory - the overwhelming majority of them can and do - then this is the basic properties regarding the item's relationship with the inventory.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-04T16:50:06.922Z")
public class DestinyDefinitionsDestinyItemInventoryBlockDefinition {
  @JsonProperty("stackUniqueLabel")
  private String stackUniqueLabel = null;

  @JsonProperty("maxStackSize")
  private Integer maxStackSize = null;

  @JsonProperty("bucketTypeHash")
  private Integer bucketTypeHash = null;

  @JsonProperty("recoveryBucketTypeHash")
  private Integer recoveryBucketTypeHash = null;

  @JsonProperty("tierTypeHash")
  private Integer tierTypeHash = null;

  @JsonProperty("isInstanceItem")
  private Boolean isInstanceItem = null;

  @JsonProperty("tierTypeName")
  private String tierTypeName = null;

  @JsonProperty("tierType")
  private Object tierType = null;

  @JsonProperty("expirationTooltip")
  private String expirationTooltip = null;

  @JsonProperty("expiredInActivityMessage")
  private String expiredInActivityMessage = null;

  @JsonProperty("expiredInOrbitMessage")
  private String expiredInOrbitMessage = null;

  @JsonProperty("suppressExpirationWhenObjectivesComplete")
  private Boolean suppressExpirationWhenObjectivesComplete = null;

  public DestinyDefinitionsDestinyItemInventoryBlockDefinition stackUniqueLabel(String stackUniqueLabel) {
    this.stackUniqueLabel = stackUniqueLabel;
    return this;
  }

   /**
   * If this string is populated, you can&#39;t have more than one stack with this label in a given inventory. Note that this is different from the equipping block&#39;s unique label, which is used for equipping uniqueness.
   * @return stackUniqueLabel
  **/
  @ApiModelProperty(value = "If this string is populated, you can't have more than one stack with this label in a given inventory. Note that this is different from the equipping block's unique label, which is used for equipping uniqueness.")
  public String getStackUniqueLabel() {
    return stackUniqueLabel;
  }

  public void setStackUniqueLabel(String stackUniqueLabel) {
    this.stackUniqueLabel = stackUniqueLabel;
  }

  public DestinyDefinitionsDestinyItemInventoryBlockDefinition maxStackSize(Integer maxStackSize) {
    this.maxStackSize = maxStackSize;
    return this;
  }

   /**
   * The maximum quantity of this item that can exist in a stack.
   * @return maxStackSize
  **/
  @ApiModelProperty(value = "The maximum quantity of this item that can exist in a stack.")
  public Integer getMaxStackSize() {
    return maxStackSize;
  }

  public void setMaxStackSize(Integer maxStackSize) {
    this.maxStackSize = maxStackSize;
  }

  public DestinyDefinitionsDestinyItemInventoryBlockDefinition bucketTypeHash(Integer bucketTypeHash) {
    this.bucketTypeHash = bucketTypeHash;
    return this;
  }

   /**
   * The hash identifier for the DestinyInventoryBucketDefinition to which this item belongs. I should have named this \&quot;bucketHash\&quot;, but too many things refer to it now. Sigh.
   * @return bucketTypeHash
  **/
  @ApiModelProperty(value = "The hash identifier for the DestinyInventoryBucketDefinition to which this item belongs. I should have named this \"bucketHash\", but too many things refer to it now. Sigh.")
  public Integer getBucketTypeHash() {
    return bucketTypeHash;
  }

  public void setBucketTypeHash(Integer bucketTypeHash) {
    this.bucketTypeHash = bucketTypeHash;
  }

  public DestinyDefinitionsDestinyItemInventoryBlockDefinition recoveryBucketTypeHash(Integer recoveryBucketTypeHash) {
    this.recoveryBucketTypeHash = recoveryBucketTypeHash;
    return this;
  }

   /**
   * If the item is picked up by the lost loot queue, this is the hash identifier for the DestinyInventoryBucketDefinition into which it will be placed. Again, I should have named this recoveryBucketHash instead.
   * @return recoveryBucketTypeHash
  **/
  @ApiModelProperty(value = "If the item is picked up by the lost loot queue, this is the hash identifier for the DestinyInventoryBucketDefinition into which it will be placed. Again, I should have named this recoveryBucketHash instead.")
  public Integer getRecoveryBucketTypeHash() {
    return recoveryBucketTypeHash;
  }

  public void setRecoveryBucketTypeHash(Integer recoveryBucketTypeHash) {
    this.recoveryBucketTypeHash = recoveryBucketTypeHash;
  }

  public DestinyDefinitionsDestinyItemInventoryBlockDefinition tierTypeHash(Integer tierTypeHash) {
    this.tierTypeHash = tierTypeHash;
    return this;
  }

   /**
   * The hash identifier for the Tier Type of the item, use to look up its DestinyItemTierTypeDefinition if you need to show localized data for the item&#39;s tier.
   * @return tierTypeHash
  **/
  @ApiModelProperty(value = "The hash identifier for the Tier Type of the item, use to look up its DestinyItemTierTypeDefinition if you need to show localized data for the item's tier.")
  public Integer getTierTypeHash() {
    return tierTypeHash;
  }

  public void setTierTypeHash(Integer tierTypeHash) {
    this.tierTypeHash = tierTypeHash;
  }

  public DestinyDefinitionsDestinyItemInventoryBlockDefinition isInstanceItem(Boolean isInstanceItem) {
    this.isInstanceItem = isInstanceItem;
    return this;
  }

   /**
   * If TRUE, this item is instanced. Otherwise, it is a generic item that merely has a quantity in a stack (like Glimmer).
   * @return isInstanceItem
  **/
  @ApiModelProperty(value = "If TRUE, this item is instanced. Otherwise, it is a generic item that merely has a quantity in a stack (like Glimmer).")
  public Boolean isIsInstanceItem() {
    return isInstanceItem;
  }

  public void setIsInstanceItem(Boolean isInstanceItem) {
    this.isInstanceItem = isInstanceItem;
  }

  public DestinyDefinitionsDestinyItemInventoryBlockDefinition tierTypeName(String tierTypeName) {
    this.tierTypeName = tierTypeName;
    return this;
  }

   /**
   * The localized name of the tier type, which is a useful shortcut so you don&#39;t have to look up the definition every time. However, it&#39;s mostly a holdover from days before we had a DestinyItemTierTypeDefinition to refer to.
   * @return tierTypeName
  **/
  @ApiModelProperty(value = "The localized name of the tier type, which is a useful shortcut so you don't have to look up the definition every time. However, it's mostly a holdover from days before we had a DestinyItemTierTypeDefinition to refer to.")
  public String getTierTypeName() {
    return tierTypeName;
  }

  public void setTierTypeName(String tierTypeName) {
    this.tierTypeName = tierTypeName;
  }

  public DestinyDefinitionsDestinyItemInventoryBlockDefinition tierType(Object tierType) {
    this.tierType = tierType;
    return this;
  }

   /**
   * The enumeration matching the tier type of the item to known values, again for convenience sake.
   * @return tierType
  **/
  @ApiModelProperty(value = "The enumeration matching the tier type of the item to known values, again for convenience sake.")
  public Object getTierType() {
    return tierType;
  }

  public void setTierType(Object tierType) {
    this.tierType = tierType;
  }

  public DestinyDefinitionsDestinyItemInventoryBlockDefinition expirationTooltip(String expirationTooltip) {
    this.expirationTooltip = expirationTooltip;
    return this;
  }

   /**
   * The tooltip message to show, if any, when the item expires.
   * @return expirationTooltip
  **/
  @ApiModelProperty(value = "The tooltip message to show, if any, when the item expires.")
  public String getExpirationTooltip() {
    return expirationTooltip;
  }

  public void setExpirationTooltip(String expirationTooltip) {
    this.expirationTooltip = expirationTooltip;
  }

  public DestinyDefinitionsDestinyItemInventoryBlockDefinition expiredInActivityMessage(String expiredInActivityMessage) {
    this.expiredInActivityMessage = expiredInActivityMessage;
    return this;
  }

   /**
   * If the item expires while playing in an activity, we show a different message.
   * @return expiredInActivityMessage
  **/
  @ApiModelProperty(value = "If the item expires while playing in an activity, we show a different message.")
  public String getExpiredInActivityMessage() {
    return expiredInActivityMessage;
  }

  public void setExpiredInActivityMessage(String expiredInActivityMessage) {
    this.expiredInActivityMessage = expiredInActivityMessage;
  }

  public DestinyDefinitionsDestinyItemInventoryBlockDefinition expiredInOrbitMessage(String expiredInOrbitMessage) {
    this.expiredInOrbitMessage = expiredInOrbitMessage;
    return this;
  }

   /**
   * If the item expires in orbit, we show a... more different message. (\&quot;Consummate V&#39;s, consummate!\&quot;)
   * @return expiredInOrbitMessage
  **/
  @ApiModelProperty(value = "If the item expires in orbit, we show a... more different message. (\"Consummate V's, consummate!\")")
  public String getExpiredInOrbitMessage() {
    return expiredInOrbitMessage;
  }

  public void setExpiredInOrbitMessage(String expiredInOrbitMessage) {
    this.expiredInOrbitMessage = expiredInOrbitMessage;
  }

  public DestinyDefinitionsDestinyItemInventoryBlockDefinition suppressExpirationWhenObjectivesComplete(Boolean suppressExpirationWhenObjectivesComplete) {
    this.suppressExpirationWhenObjectivesComplete = suppressExpirationWhenObjectivesComplete;
    return this;
  }

   /**
   * Get suppressExpirationWhenObjectivesComplete
   * @return suppressExpirationWhenObjectivesComplete
  **/
  @ApiModelProperty(value = "")
  public Boolean isSuppressExpirationWhenObjectivesComplete() {
    return suppressExpirationWhenObjectivesComplete;
  }

  public void setSuppressExpirationWhenObjectivesComplete(Boolean suppressExpirationWhenObjectivesComplete) {
    this.suppressExpirationWhenObjectivesComplete = suppressExpirationWhenObjectivesComplete;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyItemInventoryBlockDefinition destinyDefinitionsDestinyItemInventoryBlockDefinition = (DestinyDefinitionsDestinyItemInventoryBlockDefinition) o;
    return Objects.equals(this.stackUniqueLabel, destinyDefinitionsDestinyItemInventoryBlockDefinition.stackUniqueLabel) &&
        Objects.equals(this.maxStackSize, destinyDefinitionsDestinyItemInventoryBlockDefinition.maxStackSize) &&
        Objects.equals(this.bucketTypeHash, destinyDefinitionsDestinyItemInventoryBlockDefinition.bucketTypeHash) &&
        Objects.equals(this.recoveryBucketTypeHash, destinyDefinitionsDestinyItemInventoryBlockDefinition.recoveryBucketTypeHash) &&
        Objects.equals(this.tierTypeHash, destinyDefinitionsDestinyItemInventoryBlockDefinition.tierTypeHash) &&
        Objects.equals(this.isInstanceItem, destinyDefinitionsDestinyItemInventoryBlockDefinition.isInstanceItem) &&
        Objects.equals(this.tierTypeName, destinyDefinitionsDestinyItemInventoryBlockDefinition.tierTypeName) &&
        Objects.equals(this.tierType, destinyDefinitionsDestinyItemInventoryBlockDefinition.tierType) &&
        Objects.equals(this.expirationTooltip, destinyDefinitionsDestinyItemInventoryBlockDefinition.expirationTooltip) &&
        Objects.equals(this.expiredInActivityMessage, destinyDefinitionsDestinyItemInventoryBlockDefinition.expiredInActivityMessage) &&
        Objects.equals(this.expiredInOrbitMessage, destinyDefinitionsDestinyItemInventoryBlockDefinition.expiredInOrbitMessage) &&
        Objects.equals(this.suppressExpirationWhenObjectivesComplete, destinyDefinitionsDestinyItemInventoryBlockDefinition.suppressExpirationWhenObjectivesComplete);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackUniqueLabel, maxStackSize, bucketTypeHash, recoveryBucketTypeHash, tierTypeHash, isInstanceItem, tierTypeName, tierType, expirationTooltip, expiredInActivityMessage, expiredInOrbitMessage, suppressExpirationWhenObjectivesComplete);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyItemInventoryBlockDefinition {\n");
    
    sb.append("    stackUniqueLabel: ").append(toIndentedString(stackUniqueLabel)).append("\n");
    sb.append("    maxStackSize: ").append(toIndentedString(maxStackSize)).append("\n");
    sb.append("    bucketTypeHash: ").append(toIndentedString(bucketTypeHash)).append("\n");
    sb.append("    recoveryBucketTypeHash: ").append(toIndentedString(recoveryBucketTypeHash)).append("\n");
    sb.append("    tierTypeHash: ").append(toIndentedString(tierTypeHash)).append("\n");
    sb.append("    isInstanceItem: ").append(toIndentedString(isInstanceItem)).append("\n");
    sb.append("    tierTypeName: ").append(toIndentedString(tierTypeName)).append("\n");
    sb.append("    tierType: ").append(toIndentedString(tierType)).append("\n");
    sb.append("    expirationTooltip: ").append(toIndentedString(expirationTooltip)).append("\n");
    sb.append("    expiredInActivityMessage: ").append(toIndentedString(expiredInActivityMessage)).append("\n");
    sb.append("    expiredInOrbitMessage: ").append(toIndentedString(expiredInOrbitMessage)).append("\n");
    sb.append("    suppressExpirationWhenObjectivesComplete: ").append(toIndentedString(suppressExpirationWhenObjectivesComplete)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

