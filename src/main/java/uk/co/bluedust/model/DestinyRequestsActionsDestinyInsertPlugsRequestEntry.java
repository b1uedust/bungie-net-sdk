/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Represents all of the data related to a single plug to be inserted.  Note that, while you *can* point to a socket that represents infusion, you will receive an error if you attempt to do so. Come on guys, let&#39;s play nice.
 */
@ApiModel(description = "Represents all of the data related to a single plug to be inserted.  Note that, while you *can* point to a socket that represents infusion, you will receive an error if you attempt to do so. Come on guys, let's play nice.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-04T16:50:06.922Z")
public class DestinyRequestsActionsDestinyInsertPlugsRequestEntry {
  @JsonProperty("socketIndex")
  private Integer socketIndex = null;

  @JsonProperty("socketArrayType")
  private Object socketArrayType = null;

  @JsonProperty("plugItemHash")
  private Integer plugItemHash = null;

  public DestinyRequestsActionsDestinyInsertPlugsRequestEntry socketIndex(Integer socketIndex) {
    this.socketIndex = socketIndex;
    return this;
  }

   /**
   * The index into the socket array, which identifies the specific socket being operated on. We also need to know the socketArrayType in order to uniquely identify the socket.  Don&#39;t point to or try to insert a plug into an infusion socket. It won&#39;t work.
   * @return socketIndex
  **/
  @ApiModelProperty(value = "The index into the socket array, which identifies the specific socket being operated on. We also need to know the socketArrayType in order to uniquely identify the socket.  Don't point to or try to insert a plug into an infusion socket. It won't work.")
  public Integer getSocketIndex() {
    return socketIndex;
  }

  public void setSocketIndex(Integer socketIndex) {
    this.socketIndex = socketIndex;
  }

  public DestinyRequestsActionsDestinyInsertPlugsRequestEntry socketArrayType(Object socketArrayType) {
    this.socketArrayType = socketArrayType;
    return this;
  }

   /**
   * This property, combined with the socketIndex, tells us which socket we are referring to (since operations can be performed on both Intrinsic and \&quot;default\&quot; sockets, and they occupy different arrays in the Inventory Item Definition). I know, I know. Don&#39;t give me that look.
   * @return socketArrayType
  **/
  @ApiModelProperty(value = "This property, combined with the socketIndex, tells us which socket we are referring to (since operations can be performed on both Intrinsic and \"default\" sockets, and they occupy different arrays in the Inventory Item Definition). I know, I know. Don't give me that look.")
  public Object getSocketArrayType() {
    return socketArrayType;
  }

  public void setSocketArrayType(Object socketArrayType) {
    this.socketArrayType = socketArrayType;
  }

  public DestinyRequestsActionsDestinyInsertPlugsRequestEntry plugItemHash(Integer plugItemHash) {
    this.plugItemHash = plugItemHash;
    return this;
  }

   /**
   * Plugs are never instanced (except in infusion). So with the hash alone, we should be able to: 1) Infer whether the player actually needs to have the item, or if it&#39;s a reusable plug 2) Perform any operation needed to use the Plug, including removing the plug item and running reward sheets.
   * @return plugItemHash
  **/
  @ApiModelProperty(value = "Plugs are never instanced (except in infusion). So with the hash alone, we should be able to: 1) Infer whether the player actually needs to have the item, or if it's a reusable plug 2) Perform any operation needed to use the Plug, including removing the plug item and running reward sheets.")
  public Integer getPlugItemHash() {
    return plugItemHash;
  }

  public void setPlugItemHash(Integer plugItemHash) {
    this.plugItemHash = plugItemHash;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyRequestsActionsDestinyInsertPlugsRequestEntry destinyRequestsActionsDestinyInsertPlugsRequestEntry = (DestinyRequestsActionsDestinyInsertPlugsRequestEntry) o;
    return Objects.equals(this.socketIndex, destinyRequestsActionsDestinyInsertPlugsRequestEntry.socketIndex) &&
        Objects.equals(this.socketArrayType, destinyRequestsActionsDestinyInsertPlugsRequestEntry.socketArrayType) &&
        Objects.equals(this.plugItemHash, destinyRequestsActionsDestinyInsertPlugsRequestEntry.plugItemHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(socketIndex, socketArrayType, plugItemHash);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyRequestsActionsDestinyInsertPlugsRequestEntry {\n");
    
    sb.append("    socketIndex: ").append(toIndentedString(socketIndex)).append("\n");
    sb.append("    socketArrayType: ").append(toIndentedString(socketArrayType)).append("\n");
    sb.append("    plugItemHash: ").append(toIndentedString(plugItemHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

