/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import uk.co.bluedust.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;

/**
 * In an attempt to categorize items by type, usage, and other interesting properties, we created DestinyItemCategoryDefinition: information about types that is assembled using a set of heuristics that examine the properties of an item such as what inventory bucket it&#39;s in, its item type name, and whether it has or is missing certain blocks of data.  This heuristic is imperfect, however. If you find an item miscategorized, let us know on the Bungie API forums!  We then populate all of the categories that we think an item belongs to in its DestinyInventoryItemDefinition.itemCategoryHashes property. You can use that to provide your own custom item filtering, sorting, aggregating... go nuts on it! And let us know if you see more categories that you wish would be added!
 */
@ApiModel(description = "In an attempt to categorize items by type, usage, and other interesting properties, we created DestinyItemCategoryDefinition: information about types that is assembled using a set of heuristics that examine the properties of an item such as what inventory bucket it's in, its item type name, and whether it has or is missing certain blocks of data.  This heuristic is imperfect, however. If you find an item miscategorized, let us know on the Bungie API forums!  We then populate all of the categories that we think an item belongs to in its DestinyInventoryItemDefinition.itemCategoryHashes property. You can use that to provide your own custom item filtering, sorting, aggregating... go nuts on it! And let us know if you see more categories that you wish would be added!")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-04T16:50:06.922Z")
public class DestinyDefinitionsDestinyItemCategoryDefinition {
  @JsonProperty("displayProperties")
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties = null;

  @JsonProperty("visible")
  private Boolean visible = null;

  @JsonProperty("deprecated")
  private Boolean deprecated = null;

  @JsonProperty("shortTitle")
  private String shortTitle = null;

  @JsonProperty("itemTypeRegex")
  private String itemTypeRegex = null;

  @JsonProperty("plugCategoryIdentifier")
  private String plugCategoryIdentifier = null;

  @JsonProperty("itemTypeRegexNot")
  private String itemTypeRegexNot = null;

  @JsonProperty("originBucketIdentifier")
  private String originBucketIdentifier = null;

  @JsonProperty("grantDestinyItemType")
  private Object grantDestinyItemType = null;

  @JsonProperty("grantDestinySubType")
  private Object grantDestinySubType = null;

  @JsonProperty("grantDestinyClass")
  private Object grantDestinyClass = null;

  @JsonProperty("groupedCategoryHashes")
  private List<Integer> groupedCategoryHashes = null;

  @JsonProperty("parentCategoryHashes")
  private List<Integer> parentCategoryHashes = null;

  @JsonProperty("groupCategoryOnly")
  private Boolean groupCategoryOnly = null;

  @JsonProperty("hash")
  private Integer hash = null;

  @JsonProperty("index")
  private Integer index = null;

  @JsonProperty("redacted")
  private Boolean redacted = null;

  public DestinyDefinitionsDestinyItemCategoryDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

   /**
   * Get displayProperties
   * @return displayProperties
  **/
  @ApiModelProperty(value = "")
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

   /**
   * If True, this category should be visible in UI. Sometimes we make categories that we don&#39;t think are interesting externally. It&#39;s up to you if you want to skip on showing them.
   * @return visible
  **/
  @ApiModelProperty(value = "If True, this category should be visible in UI. Sometimes we make categories that we don't think are interesting externally. It's up to you if you want to skip on showing them.")
  public Boolean isVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

   /**
   * If True, this category has been deprecated: it may have no items left, or there may be only legacy items that remain in it which are no longer relevant to the game.
   * @return deprecated
  **/
  @ApiModelProperty(value = "If True, this category has been deprecated: it may have no items left, or there may be only legacy items that remain in it which are no longer relevant to the game.")
  public Boolean isDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition shortTitle(String shortTitle) {
    this.shortTitle = shortTitle;
    return this;
  }

   /**
   * A shortened version of the title. The reason why we have this is because the Armory in German had titles that were too long to display in our UI, so these were localized abbreviated versions of those categories. The property still exists today, even though the Armory doesn&#39;t exist for D2... yet.
   * @return shortTitle
  **/
  @ApiModelProperty(value = "A shortened version of the title. The reason why we have this is because the Armory in German had titles that were too long to display in our UI, so these were localized abbreviated versions of those categories. The property still exists today, even though the Armory doesn't exist for D2... yet.")
  public String getShortTitle() {
    return shortTitle;
  }

  public void setShortTitle(String shortTitle) {
    this.shortTitle = shortTitle;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition itemTypeRegex(String itemTypeRegex) {
    this.itemTypeRegex = itemTypeRegex;
    return this;
  }

   /**
   * The janky regular expression we used against the item type to try and discern whether the item belongs to this category.
   * @return itemTypeRegex
  **/
  @ApiModelProperty(value = "The janky regular expression we used against the item type to try and discern whether the item belongs to this category.")
  public String getItemTypeRegex() {
    return itemTypeRegex;
  }

  public void setItemTypeRegex(String itemTypeRegex) {
    this.itemTypeRegex = itemTypeRegex;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition plugCategoryIdentifier(String plugCategoryIdentifier) {
    this.plugCategoryIdentifier = plugCategoryIdentifier;
    return this;
  }

   /**
   * If the item is a plug, this is the identifier we expect to find associated with it if it is in this category.
   * @return plugCategoryIdentifier
  **/
  @ApiModelProperty(value = "If the item is a plug, this is the identifier we expect to find associated with it if it is in this category.")
  public String getPlugCategoryIdentifier() {
    return plugCategoryIdentifier;
  }

  public void setPlugCategoryIdentifier(String plugCategoryIdentifier) {
    this.plugCategoryIdentifier = plugCategoryIdentifier;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition itemTypeRegexNot(String itemTypeRegexNot) {
    this.itemTypeRegexNot = itemTypeRegexNot;
    return this;
  }

   /**
   * If the item type matches this janky regex, it does *not* belong to this category.
   * @return itemTypeRegexNot
  **/
  @ApiModelProperty(value = "If the item type matches this janky regex, it does *not* belong to this category.")
  public String getItemTypeRegexNot() {
    return itemTypeRegexNot;
  }

  public void setItemTypeRegexNot(String itemTypeRegexNot) {
    this.itemTypeRegexNot = itemTypeRegexNot;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition originBucketIdentifier(String originBucketIdentifier) {
    this.originBucketIdentifier = originBucketIdentifier;
    return this;
  }

   /**
   * If the item belongs to this bucket, it does belong to this category.
   * @return originBucketIdentifier
  **/
  @ApiModelProperty(value = "If the item belongs to this bucket, it does belong to this category.")
  public String getOriginBucketIdentifier() {
    return originBucketIdentifier;
  }

  public void setOriginBucketIdentifier(String originBucketIdentifier) {
    this.originBucketIdentifier = originBucketIdentifier;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition grantDestinyItemType(Object grantDestinyItemType) {
    this.grantDestinyItemType = grantDestinyItemType;
    return this;
  }

   /**
   * If an item belongs to this category, it will also receive this item type. This is now how DestinyItemType is populated for items: it used to be an even jankier process, but that&#39;s a story that requires more alcohol.
   * @return grantDestinyItemType
  **/
  @ApiModelProperty(value = "If an item belongs to this category, it will also receive this item type. This is now how DestinyItemType is populated for items: it used to be an even jankier process, but that's a story that requires more alcohol.")
  public Object getGrantDestinyItemType() {
    return grantDestinyItemType;
  }

  public void setGrantDestinyItemType(Object grantDestinyItemType) {
    this.grantDestinyItemType = grantDestinyItemType;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition grantDestinySubType(Object grantDestinySubType) {
    this.grantDestinySubType = grantDestinySubType;
    return this;
  }

   /**
   * If an item belongs to this category, it will also receive this subtype enum value.  I know what you&#39;re thinking - what if it belongs to multiple categories that provide sub-types?  The last one processed wins, as is the case with all of these \&quot;grant\&quot; enums. Now you can see one reason why we moved away from these enums... but they&#39;re so convenient when they work, aren&#39;t they?
   * @return grantDestinySubType
  **/
  @ApiModelProperty(value = "If an item belongs to this category, it will also receive this subtype enum value.  I know what you're thinking - what if it belongs to multiple categories that provide sub-types?  The last one processed wins, as is the case with all of these \"grant\" enums. Now you can see one reason why we moved away from these enums... but they're so convenient when they work, aren't they?")
  public Object getGrantDestinySubType() {
    return grantDestinySubType;
  }

  public void setGrantDestinySubType(Object grantDestinySubType) {
    this.grantDestinySubType = grantDestinySubType;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition grantDestinyClass(Object grantDestinyClass) {
    this.grantDestinyClass = grantDestinyClass;
    return this;
  }

   /**
   * If an item belongs to this category, it will also get this class restriction enum value.  See the other \&quot;grant\&quot;-prefixed properties on this definition for my color commentary.
   * @return grantDestinyClass
  **/
  @ApiModelProperty(value = "If an item belongs to this category, it will also get this class restriction enum value.  See the other \"grant\"-prefixed properties on this definition for my color commentary.")
  public Object getGrantDestinyClass() {
    return grantDestinyClass;
  }

  public void setGrantDestinyClass(Object grantDestinyClass) {
    this.grantDestinyClass = grantDestinyClass;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition groupedCategoryHashes(List<Integer> groupedCategoryHashes) {
    this.groupedCategoryHashes = groupedCategoryHashes;
    return this;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition addGroupedCategoryHashesItem(Integer groupedCategoryHashesItem) {
    if (this.groupedCategoryHashes == null) {
      this.groupedCategoryHashes = new ArrayList<>();
    }
    this.groupedCategoryHashes.add(groupedCategoryHashesItem);
    return this;
  }

   /**
   * If this category is a \&quot;parent\&quot; category of other categories, those children will have their hashes listed in rendering order here, and can be looked up using these hashes against DestinyItemCategoryDefinition.  In this way, you can build up a visual hierarchy of item categories. That&#39;s what we did, and you can do it too. I believe in you. Yes, you, Carl.  (I hope someone named Carl reads this someday)
   * @return groupedCategoryHashes
  **/
  @ApiModelProperty(value = "If this category is a \"parent\" category of other categories, those children will have their hashes listed in rendering order here, and can be looked up using these hashes against DestinyItemCategoryDefinition.  In this way, you can build up a visual hierarchy of item categories. That's what we did, and you can do it too. I believe in you. Yes, you, Carl.  (I hope someone named Carl reads this someday)")
  public List<Integer> getGroupedCategoryHashes() {
    return groupedCategoryHashes;
  }

  public void setGroupedCategoryHashes(List<Integer> groupedCategoryHashes) {
    this.groupedCategoryHashes = groupedCategoryHashes;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition parentCategoryHashes(List<Integer> parentCategoryHashes) {
    this.parentCategoryHashes = parentCategoryHashes;
    return this;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition addParentCategoryHashesItem(Integer parentCategoryHashesItem) {
    if (this.parentCategoryHashes == null) {
      this.parentCategoryHashes = new ArrayList<>();
    }
    this.parentCategoryHashes.add(parentCategoryHashesItem);
    return this;
  }

   /**
   * All item category hashes of \&quot;parent\&quot; categories: categories that contain this as a child through the hierarchy of groupedCategoryHashes. It&#39;s a bit redundant, but having this child-centric list speeds up some calculations.
   * @return parentCategoryHashes
  **/
  @ApiModelProperty(value = "All item category hashes of \"parent\" categories: categories that contain this as a child through the hierarchy of groupedCategoryHashes. It's a bit redundant, but having this child-centric list speeds up some calculations.")
  public List<Integer> getParentCategoryHashes() {
    return parentCategoryHashes;
  }

  public void setParentCategoryHashes(List<Integer> parentCategoryHashes) {
    this.parentCategoryHashes = parentCategoryHashes;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition groupCategoryOnly(Boolean groupCategoryOnly) {
    this.groupCategoryOnly = groupCategoryOnly;
    return this;
  }

   /**
   * If true, this category is only used for grouping, and should not be evaluated with its own checks. Rather, the item only has this category if it has one of its child categories.
   * @return groupCategoryOnly
  **/
  @ApiModelProperty(value = "If true, this category is only used for grouping, and should not be evaluated with its own checks. Rather, the item only has this category if it has one of its child categories.")
  public Boolean isGroupCategoryOnly() {
    return groupCategoryOnly;
  }

  public void setGroupCategoryOnly(Boolean groupCategoryOnly) {
    this.groupCategoryOnly = groupCategoryOnly;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

   /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
  **/
  @ApiModelProperty(value = "The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.")
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * The index of the entity as it was found in the investment tables.
   * @return index
  **/
  @ApiModelProperty(value = "The index of the entity as it was found in the investment tables.")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

   /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
  **/
  @ApiModelProperty(value = "If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!")
  public Boolean isRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyItemCategoryDefinition destinyDefinitionsDestinyItemCategoryDefinition = (DestinyDefinitionsDestinyItemCategoryDefinition) o;
    return Objects.equals(this.displayProperties, destinyDefinitionsDestinyItemCategoryDefinition.displayProperties) &&
        Objects.equals(this.visible, destinyDefinitionsDestinyItemCategoryDefinition.visible) &&
        Objects.equals(this.deprecated, destinyDefinitionsDestinyItemCategoryDefinition.deprecated) &&
        Objects.equals(this.shortTitle, destinyDefinitionsDestinyItemCategoryDefinition.shortTitle) &&
        Objects.equals(this.itemTypeRegex, destinyDefinitionsDestinyItemCategoryDefinition.itemTypeRegex) &&
        Objects.equals(this.plugCategoryIdentifier, destinyDefinitionsDestinyItemCategoryDefinition.plugCategoryIdentifier) &&
        Objects.equals(this.itemTypeRegexNot, destinyDefinitionsDestinyItemCategoryDefinition.itemTypeRegexNot) &&
        Objects.equals(this.originBucketIdentifier, destinyDefinitionsDestinyItemCategoryDefinition.originBucketIdentifier) &&
        Objects.equals(this.grantDestinyItemType, destinyDefinitionsDestinyItemCategoryDefinition.grantDestinyItemType) &&
        Objects.equals(this.grantDestinySubType, destinyDefinitionsDestinyItemCategoryDefinition.grantDestinySubType) &&
        Objects.equals(this.grantDestinyClass, destinyDefinitionsDestinyItemCategoryDefinition.grantDestinyClass) &&
        Objects.equals(this.groupedCategoryHashes, destinyDefinitionsDestinyItemCategoryDefinition.groupedCategoryHashes) &&
        Objects.equals(this.parentCategoryHashes, destinyDefinitionsDestinyItemCategoryDefinition.parentCategoryHashes) &&
        Objects.equals(this.groupCategoryOnly, destinyDefinitionsDestinyItemCategoryDefinition.groupCategoryOnly) &&
        Objects.equals(this.hash, destinyDefinitionsDestinyItemCategoryDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsDestinyItemCategoryDefinition.index) &&
        Objects.equals(this.redacted, destinyDefinitionsDestinyItemCategoryDefinition.redacted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayProperties, visible, deprecated, shortTitle, itemTypeRegex, plugCategoryIdentifier, itemTypeRegexNot, originBucketIdentifier, grantDestinyItemType, grantDestinySubType, grantDestinyClass, groupedCategoryHashes, parentCategoryHashes, groupCategoryOnly, hash, index, redacted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyItemCategoryDefinition {\n");
    
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    shortTitle: ").append(toIndentedString(shortTitle)).append("\n");
    sb.append("    itemTypeRegex: ").append(toIndentedString(itemTypeRegex)).append("\n");
    sb.append("    plugCategoryIdentifier: ").append(toIndentedString(plugCategoryIdentifier)).append("\n");
    sb.append("    itemTypeRegexNot: ").append(toIndentedString(itemTypeRegexNot)).append("\n");
    sb.append("    originBucketIdentifier: ").append(toIndentedString(originBucketIdentifier)).append("\n");
    sb.append("    grantDestinyItemType: ").append(toIndentedString(grantDestinyItemType)).append("\n");
    sb.append("    grantDestinySubType: ").append(toIndentedString(grantDestinySubType)).append("\n");
    sb.append("    grantDestinyClass: ").append(toIndentedString(grantDestinyClass)).append("\n");
    sb.append("    groupedCategoryHashes: ").append(toIndentedString(groupedCategoryHashes)).append("\n");
    sb.append("    parentCategoryHashes: ").append(toIndentedString(parentCategoryHashes)).append("\n");
    sb.append("    groupCategoryOnly: ").append(toIndentedString(groupCategoryOnly)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

