/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import uk.co.bluedust.model.DestinyDestinyTalentNode;

/**
 * Well, we&#39;re here in Destiny 2, and Talent Grids are unfortunately still around.  The good news is that they&#39;re pretty much only being used for certain base information on items and for Builds/Subclasses. The bad news is that they still suck. If you really want this information, grab this component.  An important note is that talent grids are defined as such:  A Grid has 1:M Nodes, which has 1:M Steps.  Any given node can only have a single step active at one time, which represents the actual visual contents and effects of the Node (for instance, if you see a \&quot;Super Cool Bonus\&quot; node, the actual icon and text for the node is coming from the current Step of that node).  Nodes can be grouped into exclusivity sets *and* as of D2, exclusivity groups (which are collections of exclusivity sets that affect each other).  See DestinyTalentGridDefinition for more information. Brace yourself, the water&#39;s cold out there in the deep end.
 */
@ApiModel(description = "Well, we're here in Destiny 2, and Talent Grids are unfortunately still around.  The good news is that they're pretty much only being used for certain base information on items and for Builds/Subclasses. The bad news is that they still suck. If you really want this information, grab this component.  An important note is that talent grids are defined as such:  A Grid has 1:M Nodes, which has 1:M Steps.  Any given node can only have a single step active at one time, which represents the actual visual contents and effects of the Node (for instance, if you see a \"Super Cool Bonus\" node, the actual icon and text for the node is coming from the current Step of that node).  Nodes can be grouped into exclusivity sets *and* as of D2, exclusivity groups (which are collections of exclusivity sets that affect each other).  See DestinyTalentGridDefinition for more information. Brace yourself, the water's cold out there in the deep end.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-04T23:34:27.728Z")
public class DestinyEntitiesItemsDestinyItemTalentGridComponent {
  @JsonProperty("talentGridHash")
  private Long talentGridHash = null;

  @JsonProperty("nodes")
  private List<DestinyDestinyTalentNode> nodes = null;

  @JsonProperty("isGridComplete")
  private Boolean isGridComplete = null;

  @JsonProperty("gridProgression")
  private Object gridProgression = null;

  public DestinyEntitiesItemsDestinyItemTalentGridComponent talentGridHash(Long talentGridHash) {
    this.talentGridHash = talentGridHash;
    return this;
  }

   /**
   * Most items don&#39;t have useful talent grids anymore, but Builds in particular still do.  You can use this hash to lookup the DestinyTalentGridDefinition attached to this item, which will be crucial for understanding the node values on the item.
   * @return talentGridHash
  **/
  @ApiModelProperty(value = "Most items don't have useful talent grids anymore, but Builds in particular still do.  You can use this hash to lookup the DestinyTalentGridDefinition attached to this item, which will be crucial for understanding the node values on the item.")
  public Long getTalentGridHash() {
    return talentGridHash;
  }

  public void setTalentGridHash(Long talentGridHash) {
    this.talentGridHash = talentGridHash;
  }

  public DestinyEntitiesItemsDestinyItemTalentGridComponent nodes(List<DestinyDestinyTalentNode> nodes) {
    this.nodes = nodes;
    return this;
  }

  public DestinyEntitiesItemsDestinyItemTalentGridComponent addNodesItem(DestinyDestinyTalentNode nodesItem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<>();
    }
    this.nodes.add(nodesItem);
    return this;
  }

   /**
   * Detailed information about the individual nodes in the talent grid.  A node represents a single visual \&quot;pip\&quot; in the talent grid or Build detail view, though each node may have multiple \&quot;steps\&quot; which indicate the actual bonuses and visual representation of that node.
   * @return nodes
  **/
  @ApiModelProperty(value = "Detailed information about the individual nodes in the talent grid.  A node represents a single visual \"pip\" in the talent grid or Build detail view, though each node may have multiple \"steps\" which indicate the actual bonuses and visual representation of that node.")
  public List<DestinyDestinyTalentNode> getNodes() {
    return nodes;
  }

  public void setNodes(List<DestinyDestinyTalentNode> nodes) {
    this.nodes = nodes;
  }

  public DestinyEntitiesItemsDestinyItemTalentGridComponent isGridComplete(Boolean isGridComplete) {
    this.isGridComplete = isGridComplete;
    return this;
  }

   /**
   * Indicates whether the talent grid on this item is completed, and thus whether it should have a gold border around it.  Only will be true if the item actually *has* a talent grid, and only then if it is completed (i.e. every exclusive set has an activated node, and every non-exclusive set node has been activated)
   * @return isGridComplete
  **/
  @ApiModelProperty(value = "Indicates whether the talent grid on this item is completed, and thus whether it should have a gold border around it.  Only will be true if the item actually *has* a talent grid, and only then if it is completed (i.e. every exclusive set has an activated node, and every non-exclusive set node has been activated)")
  public Boolean isIsGridComplete() {
    return isGridComplete;
  }

  public void setIsGridComplete(Boolean isGridComplete) {
    this.isGridComplete = isGridComplete;
  }

  public DestinyEntitiesItemsDestinyItemTalentGridComponent gridProgression(Object gridProgression) {
    this.gridProgression = gridProgression;
    return this;
  }

   /**
   * If the item has a progression, it will be detailed here. A progression means that the item can gain experience. Thresholds of experience are what determines whether and when a talent node can be activated.
   * @return gridProgression
  **/
  @ApiModelProperty(value = "If the item has a progression, it will be detailed here. A progression means that the item can gain experience. Thresholds of experience are what determines whether and when a talent node can be activated.")
  public Object getGridProgression() {
    return gridProgression;
  }

  public void setGridProgression(Object gridProgression) {
    this.gridProgression = gridProgression;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyEntitiesItemsDestinyItemTalentGridComponent destinyEntitiesItemsDestinyItemTalentGridComponent = (DestinyEntitiesItemsDestinyItemTalentGridComponent) o;
    return Objects.equals(this.talentGridHash, destinyEntitiesItemsDestinyItemTalentGridComponent.talentGridHash) &&
        Objects.equals(this.nodes, destinyEntitiesItemsDestinyItemTalentGridComponent.nodes) &&
        Objects.equals(this.isGridComplete, destinyEntitiesItemsDestinyItemTalentGridComponent.isGridComplete) &&
        Objects.equals(this.gridProgression, destinyEntitiesItemsDestinyItemTalentGridComponent.gridProgression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(talentGridHash, nodes, isGridComplete, gridProgression);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyEntitiesItemsDestinyItemTalentGridComponent {\n");
    
    sb.append("    talentGridHash: ").append(toIndentedString(talentGridHash)).append("\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    isGridComplete: ").append(toIndentedString(isGridComplete)).append("\n");
    sb.append("    gridProgression: ").append(toIndentedString(gridProgression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

