/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import uk.co.bluedust.model.DestinyDestinyActivity;
import uk.co.bluedust.model.DestinyHistoricalStatsDefinitionsDestinyActivityModeType;

/**
 * This component holds activity data for a character. It will tell you about the character&#39;s current activity status, as well as activities that are available to the user.
 */
@ApiModel(description = "This component holds activity data for a character. It will tell you about the character's current activity status, as well as activities that are available to the user.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-12-08T21:00:47.497Z")
public class DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {
  @JsonProperty("dateActivityStarted")
  private OffsetDateTime dateActivityStarted = null;

  @JsonProperty("availableActivities")
  private List<DestinyDestinyActivity> availableActivities = null;

  @JsonProperty("currentActivityHash")
  private Long currentActivityHash = null;

  @JsonProperty("currentActivityModeHash")
  private Long currentActivityModeHash = null;

  /**
   * And the current activity&#39;s most specific mode type, if it can be found.
   */
  public enum CurrentActivityModeTypeEnum {
    NUMBER_0(0),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_15(15),
    
    NUMBER_16(16),
    
    NUMBER_17(17),
    
    NUMBER_18(18),
    
    NUMBER_19(19),
    
    NUMBER_20(20),
    
    NUMBER_21(21),
    
    NUMBER_22(22),
    
    NUMBER_24(24),
    
    NUMBER_25(25),
    
    NUMBER_26(26),
    
    NUMBER_27(27),
    
    NUMBER_28(28),
    
    NUMBER_29(29),
    
    NUMBER_30(30),
    
    NUMBER_31(31),
    
    NUMBER_32(32),
    
    NUMBER_37(37),
    
    NUMBER_38(38),
    
    NUMBER_39(39),
    
    NUMBER_40(40),
    
    NUMBER_41(41),
    
    NUMBER_42(42),
    
    NUMBER_43(43),
    
    NUMBER_44(44),
    
    NUMBER_45(45),
    
    NUMBER_46(46),
    
    NUMBER_47(47),
    
    NUMBER_48(48),
    
    NUMBER_49(49),
    
    NUMBER_50(50),
    
    NUMBER_51(51),
    
    NUMBER_52(52),
    
    NUMBER_53(53),
    
    NUMBER_54(54),
    
    NUMBER_55(55),
    
    NUMBER_56(56),
    
    NUMBER_57(57),
    
    NUMBER_58(58),
    
    NUMBER_59(59),
    
    NUMBER_60(60),
    
    NUMBER_61(61),
    
    NUMBER_62(62),
    
    NUMBER_63(63),
    
    NUMBER_64(64),
    
    NUMBER_65(65);

    private Integer value;

    CurrentActivityModeTypeEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CurrentActivityModeTypeEnum fromValue(String text) {
      for (CurrentActivityModeTypeEnum b : CurrentActivityModeTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("currentActivityModeType")
  private CurrentActivityModeTypeEnum currentActivityModeType = null;

  @JsonProperty("currentActivityModeHashes")
  private List<Long> currentActivityModeHashes = null;

  @JsonProperty("currentActivityModeTypes")
  private List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> currentActivityModeTypes = null;

  @JsonProperty("currentPlaylistActivityHash")
  private Long currentPlaylistActivityHash = null;

  @JsonProperty("lastCompletedStoryHash")
  private Long lastCompletedStoryHash = null;

  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent dateActivityStarted(OffsetDateTime dateActivityStarted) {
    this.dateActivityStarted = dateActivityStarted;
    return this;
  }

   /**
   * The last date that the user started playing an activity.
   * @return dateActivityStarted
  **/
  @ApiModelProperty(value = "The last date that the user started playing an activity.")
  public OffsetDateTime getDateActivityStarted() {
    return dateActivityStarted;
  }

  public void setDateActivityStarted(OffsetDateTime dateActivityStarted) {
    this.dateActivityStarted = dateActivityStarted;
  }

  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent availableActivities(List<DestinyDestinyActivity> availableActivities) {
    this.availableActivities = availableActivities;
    return this;
  }

  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent addAvailableActivitiesItem(DestinyDestinyActivity availableActivitiesItem) {
    if (this.availableActivities == null) {
      this.availableActivities = new ArrayList<>();
    }
    this.availableActivities.add(availableActivitiesItem);
    return this;
  }

   /**
   * The list of activities that the user can play.
   * @return availableActivities
  **/
  @ApiModelProperty(value = "The list of activities that the user can play.")
  public List<DestinyDestinyActivity> getAvailableActivities() {
    return availableActivities;
  }

  public void setAvailableActivities(List<DestinyDestinyActivity> availableActivities) {
    this.availableActivities = availableActivities;
  }

  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent currentActivityHash(Long currentActivityHash) {
    this.currentActivityHash = currentActivityHash;
    return this;
  }

   /**
   * If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP \&quot;Activities\&quot; are just maps: it&#39;s the ActivityMode that determines what type of PVP game they&#39;re playing.
   * @return currentActivityHash
  **/
  @ApiModelProperty(value = "If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP \"Activities\" are just maps: it's the ActivityMode that determines what type of PVP game they're playing.")
  public Long getCurrentActivityHash() {
    return currentActivityHash;
  }

  public void setCurrentActivityHash(Long currentActivityHash) {
    this.currentActivityHash = currentActivityHash;
  }

  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent currentActivityModeHash(Long currentActivityModeHash) {
    this.currentActivityModeHash = currentActivityModeHash;
    return this;
  }

   /**
   * If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they&#39;re doing right now.
   * @return currentActivityModeHash
  **/
  @ApiModelProperty(value = "If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.")
  public Long getCurrentActivityModeHash() {
    return currentActivityModeHash;
  }

  public void setCurrentActivityModeHash(Long currentActivityModeHash) {
    this.currentActivityModeHash = currentActivityModeHash;
  }

  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent currentActivityModeType(CurrentActivityModeTypeEnum currentActivityModeType) {
    this.currentActivityModeType = currentActivityModeType;
    return this;
  }

   /**
   * And the current activity&#39;s most specific mode type, if it can be found.
   * @return currentActivityModeType
  **/
  @ApiModelProperty(value = "And the current activity's most specific mode type, if it can be found.")
  public CurrentActivityModeTypeEnum getCurrentActivityModeType() {
    return currentActivityModeType;
  }

  public void setCurrentActivityModeType(CurrentActivityModeTypeEnum currentActivityModeType) {
    this.currentActivityModeType = currentActivityModeType;
  }

  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent currentActivityModeHashes(List<Long> currentActivityModeHashes) {
    this.currentActivityModeHashes = currentActivityModeHashes;
    return this;
  }

  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent addCurrentActivityModeHashesItem(Long currentActivityModeHashesItem) {
    if (this.currentActivityModeHashes == null) {
      this.currentActivityModeHashes = new ArrayList<>();
    }
    this.currentActivityModeHashes.add(currentActivityModeHashesItem);
    return this;
  }

   /**
   * If the user is in an activity, this will be the hashes of the DestinyActivityModeDefinition being played. Combine with currentActivityHash to give a person a full picture of what they&#39;re doing right now.
   * @return currentActivityModeHashes
  **/
  @ApiModelProperty(value = "If the user is in an activity, this will be the hashes of the DestinyActivityModeDefinition being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.")
  public List<Long> getCurrentActivityModeHashes() {
    return currentActivityModeHashes;
  }

  public void setCurrentActivityModeHashes(List<Long> currentActivityModeHashes) {
    this.currentActivityModeHashes = currentActivityModeHashes;
  }

  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent currentActivityModeTypes(List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> currentActivityModeTypes) {
    this.currentActivityModeTypes = currentActivityModeTypes;
    return this;
  }

  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent addCurrentActivityModeTypesItem(DestinyHistoricalStatsDefinitionsDestinyActivityModeType currentActivityModeTypesItem) {
    if (this.currentActivityModeTypes == null) {
      this.currentActivityModeTypes = new ArrayList<>();
    }
    this.currentActivityModeTypes.add(currentActivityModeTypesItem);
    return this;
  }

   /**
   * All Activity Modes that apply to the current activity being played, in enum form.
   * @return currentActivityModeTypes
  **/
  @ApiModelProperty(value = "All Activity Modes that apply to the current activity being played, in enum form.")
  public List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> getCurrentActivityModeTypes() {
    return currentActivityModeTypes;
  }

  public void setCurrentActivityModeTypes(List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> currentActivityModeTypes) {
    this.currentActivityModeTypes = currentActivityModeTypes;
  }

  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent currentPlaylistActivityHash(Long currentPlaylistActivityHash) {
    this.currentPlaylistActivityHash = currentPlaylistActivityHash;
    return this;
  }

   /**
   * If the user is in a playlist, this is the hash identifier for the playlist that they chose.
   * @return currentPlaylistActivityHash
  **/
  @ApiModelProperty(value = "If the user is in a playlist, this is the hash identifier for the playlist that they chose.")
  public Long getCurrentPlaylistActivityHash() {
    return currentPlaylistActivityHash;
  }

  public void setCurrentPlaylistActivityHash(Long currentPlaylistActivityHash) {
    this.currentPlaylistActivityHash = currentPlaylistActivityHash;
  }

  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent lastCompletedStoryHash(Long lastCompletedStoryHash) {
    this.lastCompletedStoryHash = lastCompletedStoryHash;
    return this;
  }

   /**
   * This will have the activity hash of the last completed story/campaign mission, in case you care about that.
   * @return lastCompletedStoryHash
  **/
  @ApiModelProperty(value = "This will have the activity hash of the last completed story/campaign mission, in case you care about that.")
  public Long getLastCompletedStoryHash() {
    return lastCompletedStoryHash;
  }

  public void setLastCompletedStoryHash(Long lastCompletedStoryHash) {
    this.lastCompletedStoryHash = lastCompletedStoryHash;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyEntitiesCharactersDestinyCharacterActivitiesComponent destinyEntitiesCharactersDestinyCharacterActivitiesComponent = (DestinyEntitiesCharactersDestinyCharacterActivitiesComponent) o;
    return Objects.equals(this.dateActivityStarted, destinyEntitiesCharactersDestinyCharacterActivitiesComponent.dateActivityStarted) &&
        Objects.equals(this.availableActivities, destinyEntitiesCharactersDestinyCharacterActivitiesComponent.availableActivities) &&
        Objects.equals(this.currentActivityHash, destinyEntitiesCharactersDestinyCharacterActivitiesComponent.currentActivityHash) &&
        Objects.equals(this.currentActivityModeHash, destinyEntitiesCharactersDestinyCharacterActivitiesComponent.currentActivityModeHash) &&
        Objects.equals(this.currentActivityModeType, destinyEntitiesCharactersDestinyCharacterActivitiesComponent.currentActivityModeType) &&
        Objects.equals(this.currentActivityModeHashes, destinyEntitiesCharactersDestinyCharacterActivitiesComponent.currentActivityModeHashes) &&
        Objects.equals(this.currentActivityModeTypes, destinyEntitiesCharactersDestinyCharacterActivitiesComponent.currentActivityModeTypes) &&
        Objects.equals(this.currentPlaylistActivityHash, destinyEntitiesCharactersDestinyCharacterActivitiesComponent.currentPlaylistActivityHash) &&
        Objects.equals(this.lastCompletedStoryHash, destinyEntitiesCharactersDestinyCharacterActivitiesComponent.lastCompletedStoryHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateActivityStarted, availableActivities, currentActivityHash, currentActivityModeHash, currentActivityModeType, currentActivityModeHashes, currentActivityModeTypes, currentPlaylistActivityHash, lastCompletedStoryHash);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {\n");
    
    sb.append("    dateActivityStarted: ").append(toIndentedString(dateActivityStarted)).append("\n");
    sb.append("    availableActivities: ").append(toIndentedString(availableActivities)).append("\n");
    sb.append("    currentActivityHash: ").append(toIndentedString(currentActivityHash)).append("\n");
    sb.append("    currentActivityModeHash: ").append(toIndentedString(currentActivityModeHash)).append("\n");
    sb.append("    currentActivityModeType: ").append(toIndentedString(currentActivityModeType)).append("\n");
    sb.append("    currentActivityModeHashes: ").append(toIndentedString(currentActivityModeHashes)).append("\n");
    sb.append("    currentActivityModeTypes: ").append(toIndentedString(currentActivityModeTypes)).append("\n");
    sb.append("    currentPlaylistActivityHash: ").append(toIndentedString(currentPlaylistActivityHash)).append("\n");
    sb.append("    lastCompletedStoryHash: ").append(toIndentedString(lastCompletedStoryHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

