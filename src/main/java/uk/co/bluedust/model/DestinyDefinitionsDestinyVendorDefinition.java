/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import uk.co.bluedust.model.DatesDateRange;
import uk.co.bluedust.model.DestinyDefinitionsDestinyDisplayCategoryDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDestinyVendorAcceptedItemDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDestinyVendorActionDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDestinyVendorCategoryEntryDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDestinyVendorGroupReference;
import uk.co.bluedust.model.DestinyDefinitionsDestinyVendorInteractionDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDestinyVendorItemDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDestinyVendorServiceDefinition;
import uk.co.bluedust.model.DestinyDefinitionsVendorsDestinyVendorLocationDefinition;

/**
 * These are the definitions for Vendors.  In Destiny, a Vendor can be a lot of things - some things that you wouldn&#39;t expect, and some things that you don&#39;t even see directly in the game. Vendors are the Dolly Levi of the Destiny universe.  - Traditional Vendors as you see in game: people who you come up to and who give you quests, rewards, or who you can buy things from.  - Kiosks/Collections, which are really just Vendors that don&#39;t charge currency (or charge some pittance of a currency) and whose gating for purchases revolves more around your character&#39;s state.  - Previews for rewards or the contents of sacks. These are implemented as Vendors, where you can&#39;t actually purchase from them but the items that they have for sale and the categories of sale items reflect the rewards or contents of the sack. This is so that the game could reuse the existing Vendor display UI for rewards and save a bunch of wheel reinvention.  - Item Transfer capabilities, like the Vault and Postmaster. Vendors can have \&quot;acceptedItem\&quot; buckets that determine the source and destination buckets for transfers. When you interact with such a vendor, these buckets are what gets shown in the UI instead of any items that the Vendor would have for sale. Yep, the Vault is a vendor.  It is pretty much guaranteed that they&#39;ll be used for even more features in the future. They have come to be seen more as generic categorized containers for items than \&quot;vendors\&quot; in a traditional sense, for better or worse.  Where possible and time allows, we&#39;ll attempt to split those out into their own more digestible derived \&quot;Definitions\&quot;: but often time does not allow that, as you can see from the above ways that vendors are used which we never split off from Vendor Definitions externally.  Since Vendors are so many things to so many parts of the game, the definition is understandably complex. You will want to combine this data with live Vendor information from the API when it is available.
 */
@ApiModel(description = "These are the definitions for Vendors.  In Destiny, a Vendor can be a lot of things - some things that you wouldn't expect, and some things that you don't even see directly in the game. Vendors are the Dolly Levi of the Destiny universe.  - Traditional Vendors as you see in game: people who you come up to and who give you quests, rewards, or who you can buy things from.  - Kiosks/Collections, which are really just Vendors that don't charge currency (or charge some pittance of a currency) and whose gating for purchases revolves more around your character's state.  - Previews for rewards or the contents of sacks. These are implemented as Vendors, where you can't actually purchase from them but the items that they have for sale and the categories of sale items reflect the rewards or contents of the sack. This is so that the game could reuse the existing Vendor display UI for rewards and save a bunch of wheel reinvention.  - Item Transfer capabilities, like the Vault and Postmaster. Vendors can have \"acceptedItem\" buckets that determine the source and destination buckets for transfers. When you interact with such a vendor, these buckets are what gets shown in the UI instead of any items that the Vendor would have for sale. Yep, the Vault is a vendor.  It is pretty much guaranteed that they'll be used for even more features in the future. They have come to be seen more as generic categorized containers for items than \"vendors\" in a traditional sense, for better or worse.  Where possible and time allows, we'll attempt to split those out into their own more digestible derived \"Definitions\": but often time does not allow that, as you can see from the above ways that vendors are used which we never split off from Vendor Definitions externally.  Since Vendors are so many things to so many parts of the game, the definition is understandably complex. You will want to combine this data with live Vendor information from the API when it is available.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-09-29T19:57:25.109+01:00")
public class DestinyDefinitionsDestinyVendorDefinition {
  @JsonProperty("displayProperties")
  private DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition displayProperties = null;

  @JsonProperty("buyString")
  private String buyString = null;

  @JsonProperty("sellString")
  private String sellString = null;

  @JsonProperty("displayItemHash")
  private Integer displayItemHash = null;

  @JsonProperty("inhibitBuying")
  private Boolean inhibitBuying = null;

  @JsonProperty("inhibitSelling")
  private Boolean inhibitSelling = null;

  @JsonProperty("factionHash")
  private Integer factionHash = null;

  @JsonProperty("resetIntervalMinutes")
  private Integer resetIntervalMinutes = null;

  @JsonProperty("resetOffsetMinutes")
  private Integer resetOffsetMinutes = null;

  @JsonProperty("failureStrings")
  private List<String> failureStrings = null;

  @JsonProperty("unlockRanges")
  private List<DatesDateRange> unlockRanges = null;

  @JsonProperty("vendorIdentifier")
  private String vendorIdentifier = null;

  @JsonProperty("vendorPortrait")
  private String vendorPortrait = null;

  @JsonProperty("vendorBanner")
  private String vendorBanner = null;

  @JsonProperty("enabled")
  private Boolean enabled = null;

  @JsonProperty("visible")
  private Boolean visible = null;

  @JsonProperty("vendorSubcategoryIdentifier")
  private String vendorSubcategoryIdentifier = null;

  @JsonProperty("consolidateCategories")
  private Boolean consolidateCategories = null;

  @JsonProperty("actions")
  private List<DestinyDefinitionsDestinyVendorActionDefinition> actions = null;

  @JsonProperty("categories")
  private List<DestinyDefinitionsDestinyVendorCategoryEntryDefinition> categories = null;

  @JsonProperty("originalCategories")
  private List<DestinyDefinitionsDestinyVendorCategoryEntryDefinition> originalCategories = null;

  @JsonProperty("displayCategories")
  private List<DestinyDefinitionsDestinyDisplayCategoryDefinition> displayCategories = null;

  @JsonProperty("interactions")
  private List<DestinyDefinitionsDestinyVendorInteractionDefinition> interactions = null;

  @JsonProperty("inventoryFlyouts")
  private List<DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition> inventoryFlyouts = null;

  @JsonProperty("itemList")
  private List<DestinyDefinitionsDestinyVendorItemDefinition> itemList = null;

  @JsonProperty("services")
  private List<DestinyDefinitionsDestinyVendorServiceDefinition> services = null;

  @JsonProperty("acceptedItems")
  private List<DestinyDefinitionsDestinyVendorAcceptedItemDefinition> acceptedItems = null;

  @JsonProperty("returnWithVendorRequest")
  private Boolean returnWithVendorRequest = null;

  @JsonProperty("locations")
  private List<DestinyDefinitionsVendorsDestinyVendorLocationDefinition> locations = null;

  @JsonProperty("groups")
  private List<DestinyDefinitionsDestinyVendorGroupReference> groups = null;

  @JsonProperty("ignoreSaleItemHashes")
  private List<Integer> ignoreSaleItemHashes = null;

  @JsonProperty("hash")
  private Integer hash = null;

  @JsonProperty("index")
  private Integer index = null;

  @JsonProperty("redacted")
  private Boolean redacted = null;

  public DestinyDefinitionsDestinyVendorDefinition displayProperties(DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

   /**
   * Get displayProperties
   * @return displayProperties
  **/
  @ApiModelProperty(value = "")
  public DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }

  public DestinyDefinitionsDestinyVendorDefinition buyString(String buyString) {
    this.buyString = buyString;
    return this;
  }

   /**
   * If the vendor has a custom localized string describing the \&quot;buy\&quot; action, that is returned here.
   * @return buyString
  **/
  @ApiModelProperty(value = "If the vendor has a custom localized string describing the \"buy\" action, that is returned here.")
  public String getBuyString() {
    return buyString;
  }

  public void setBuyString(String buyString) {
    this.buyString = buyString;
  }

  public DestinyDefinitionsDestinyVendorDefinition sellString(String sellString) {
    this.sellString = sellString;
    return this;
  }

   /**
   * Ditto for selling. Not that you can sell items to a vendor anymore. Will it come back? Who knows. The string&#39;s still there.
   * @return sellString
  **/
  @ApiModelProperty(value = "Ditto for selling. Not that you can sell items to a vendor anymore. Will it come back? Who knows. The string's still there.")
  public String getSellString() {
    return sellString;
  }

  public void setSellString(String sellString) {
    this.sellString = sellString;
  }

  public DestinyDefinitionsDestinyVendorDefinition displayItemHash(Integer displayItemHash) {
    this.displayItemHash = displayItemHash;
    return this;
  }

   /**
   * If the vendor has an item that should be displayed as the \&quot;featured\&quot; item, this is the hash identifier for that DestinyVendorItemDefinition.  Apparently this is usually a related currency, like a reputation token. But it need not be restricted to that.
   * @return displayItemHash
  **/
  @ApiModelProperty(value = "If the vendor has an item that should be displayed as the \"featured\" item, this is the hash identifier for that DestinyVendorItemDefinition.  Apparently this is usually a related currency, like a reputation token. But it need not be restricted to that.")
  public Integer getDisplayItemHash() {
    return displayItemHash;
  }

  public void setDisplayItemHash(Integer displayItemHash) {
    this.displayItemHash = displayItemHash;
  }

  public DestinyDefinitionsDestinyVendorDefinition inhibitBuying(Boolean inhibitBuying) {
    this.inhibitBuying = inhibitBuying;
    return this;
  }

   /**
   * If this is true, you aren&#39;t allowed to buy whatever the vendor is selling.
   * @return inhibitBuying
  **/
  @ApiModelProperty(value = "If this is true, you aren't allowed to buy whatever the vendor is selling.")
  public Boolean isInhibitBuying() {
    return inhibitBuying;
  }

  public void setInhibitBuying(Boolean inhibitBuying) {
    this.inhibitBuying = inhibitBuying;
  }

  public DestinyDefinitionsDestinyVendorDefinition inhibitSelling(Boolean inhibitSelling) {
    this.inhibitSelling = inhibitSelling;
    return this;
  }

   /**
   * If this is true, you&#39;re not allowed to sell whatever the vendor is buying.
   * @return inhibitSelling
  **/
  @ApiModelProperty(value = "If this is true, you're not allowed to sell whatever the vendor is buying.")
  public Boolean isInhibitSelling() {
    return inhibitSelling;
  }

  public void setInhibitSelling(Boolean inhibitSelling) {
    this.inhibitSelling = inhibitSelling;
  }

  public DestinyDefinitionsDestinyVendorDefinition factionHash(Integer factionHash) {
    this.factionHash = factionHash;
    return this;
  }

   /**
   * If the Vendor has a faction, this hash will be valid and point to a DestinyFactionDefinition.  The game UI and BNet often mine the faction definition for additional elements and details to place on the screen, such as the faction&#39;s Progression status (aka \&quot;Reputation\&quot;).
   * @return factionHash
  **/
  @ApiModelProperty(value = "If the Vendor has a faction, this hash will be valid and point to a DestinyFactionDefinition.  The game UI and BNet often mine the faction definition for additional elements and details to place on the screen, such as the faction's Progression status (aka \"Reputation\").")
  public Integer getFactionHash() {
    return factionHash;
  }

  public void setFactionHash(Integer factionHash) {
    this.factionHash = factionHash;
  }

  public DestinyDefinitionsDestinyVendorDefinition resetIntervalMinutes(Integer resetIntervalMinutes) {
    this.resetIntervalMinutes = resetIntervalMinutes;
    return this;
  }

   /**
   * A number used for calculating the frequency of a vendor&#39;s inventory resetting/refreshing.  Don&#39;t worry about calculating this - we do it on the server side and send you the next refresh date with the live data.
   * @return resetIntervalMinutes
  **/
  @ApiModelProperty(value = "A number used for calculating the frequency of a vendor's inventory resetting/refreshing.  Don't worry about calculating this - we do it on the server side and send you the next refresh date with the live data.")
  public Integer getResetIntervalMinutes() {
    return resetIntervalMinutes;
  }

  public void setResetIntervalMinutes(Integer resetIntervalMinutes) {
    this.resetIntervalMinutes = resetIntervalMinutes;
  }

  public DestinyDefinitionsDestinyVendorDefinition resetOffsetMinutes(Integer resetOffsetMinutes) {
    this.resetOffsetMinutes = resetOffsetMinutes;
    return this;
  }

   /**
   * Again, used for reset/refreshing of inventory. Don&#39;t worry too much about it. Unless you want to.
   * @return resetOffsetMinutes
  **/
  @ApiModelProperty(value = "Again, used for reset/refreshing of inventory. Don't worry too much about it. Unless you want to.")
  public Integer getResetOffsetMinutes() {
    return resetOffsetMinutes;
  }

  public void setResetOffsetMinutes(Integer resetOffsetMinutes) {
    this.resetOffsetMinutes = resetOffsetMinutes;
  }

  public DestinyDefinitionsDestinyVendorDefinition failureStrings(List<String> failureStrings) {
    this.failureStrings = failureStrings;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addFailureStringsItem(String failureStringsItem) {
    if (this.failureStrings == null) {
      this.failureStrings = new ArrayList<>();
    }
    this.failureStrings.add(failureStringsItem);
    return this;
  }

   /**
   * If an item can&#39;t be purchased from the vendor, there may be many \&quot;custom\&quot;/game state specific reasons why not.  This is a list of localized strings with messages for those custom failures. The live BNet data will return a failureIndexes property for items that can&#39;t be purchased: using those values to index into this array, you can show the user the appropriate failure message for the item that can&#39;t be bought.
   * @return failureStrings
  **/
  @ApiModelProperty(value = "If an item can't be purchased from the vendor, there may be many \"custom\"/game state specific reasons why not.  This is a list of localized strings with messages for those custom failures. The live BNet data will return a failureIndexes property for items that can't be purchased: using those values to index into this array, you can show the user the appropriate failure message for the item that can't be bought.")
  public List<String> getFailureStrings() {
    return failureStrings;
  }

  public void setFailureStrings(List<String> failureStrings) {
    this.failureStrings = failureStrings;
  }

  public DestinyDefinitionsDestinyVendorDefinition unlockRanges(List<DatesDateRange> unlockRanges) {
    this.unlockRanges = unlockRanges;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addUnlockRangesItem(DatesDateRange unlockRangesItem) {
    if (this.unlockRanges == null) {
      this.unlockRanges = new ArrayList<>();
    }
    this.unlockRanges.add(unlockRangesItem);
    return this;
  }

   /**
   * If we were able to predict the dates when this Vendor will be visible/available, this will be the list of those date ranges. Sadly, we&#39;re not able to predict this very frequently, so this will often be useless data.
   * @return unlockRanges
  **/
  @ApiModelProperty(value = "If we were able to predict the dates when this Vendor will be visible/available, this will be the list of those date ranges. Sadly, we're not able to predict this very frequently, so this will often be useless data.")
  public List<DatesDateRange> getUnlockRanges() {
    return unlockRanges;
  }

  public void setUnlockRanges(List<DatesDateRange> unlockRanges) {
    this.unlockRanges = unlockRanges;
  }

  public DestinyDefinitionsDestinyVendorDefinition vendorIdentifier(String vendorIdentifier) {
    this.vendorIdentifier = vendorIdentifier;
    return this;
  }

   /**
   * The internal identifier for the Vendor. A holdover from the old days of Vendors, but we don&#39;t have time to refactor it away.
   * @return vendorIdentifier
  **/
  @ApiModelProperty(value = "The internal identifier for the Vendor. A holdover from the old days of Vendors, but we don't have time to refactor it away.")
  public String getVendorIdentifier() {
    return vendorIdentifier;
  }

  public void setVendorIdentifier(String vendorIdentifier) {
    this.vendorIdentifier = vendorIdentifier;
  }

  public DestinyDefinitionsDestinyVendorDefinition vendorPortrait(String vendorPortrait) {
    this.vendorPortrait = vendorPortrait;
    return this;
  }

   /**
   * A portrait of the Vendor&#39;s smiling mug. Or frothing tentacles.
   * @return vendorPortrait
  **/
  @ApiModelProperty(value = "A portrait of the Vendor's smiling mug. Or frothing tentacles.")
  public String getVendorPortrait() {
    return vendorPortrait;
  }

  public void setVendorPortrait(String vendorPortrait) {
    this.vendorPortrait = vendorPortrait;
  }

  public DestinyDefinitionsDestinyVendorDefinition vendorBanner(String vendorBanner) {
    this.vendorBanner = vendorBanner;
    return this;
  }

   /**
   * If the vendor has a custom banner image, that can be found here.
   * @return vendorBanner
  **/
  @ApiModelProperty(value = "If the vendor has a custom banner image, that can be found here.")
  public String getVendorBanner() {
    return vendorBanner;
  }

  public void setVendorBanner(String vendorBanner) {
    this.vendorBanner = vendorBanner;
  }

  public DestinyDefinitionsDestinyVendorDefinition enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * If a vendor is not enabled, we won&#39;t even save the vendor&#39;s definition, and we won&#39;t return any items or info about them. It&#39;s as if they don&#39;t exist.
   * @return enabled
  **/
  @ApiModelProperty(value = "If a vendor is not enabled, we won't even save the vendor's definition, and we won't return any items or info about them. It's as if they don't exist.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public DestinyDefinitionsDestinyVendorDefinition visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

   /**
   * If a vendor is not visible, we still have and will give vendor definition info, but we won&#39;t use them for things like Advisors or UI.
   * @return visible
  **/
  @ApiModelProperty(value = "If a vendor is not visible, we still have and will give vendor definition info, but we won't use them for things like Advisors or UI.")
  public Boolean isVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }

  public DestinyDefinitionsDestinyVendorDefinition vendorSubcategoryIdentifier(String vendorSubcategoryIdentifier) {
    this.vendorSubcategoryIdentifier = vendorSubcategoryIdentifier;
    return this;
  }

   /**
   * The identifier of the VendorCategoryDefinition for this vendor&#39;s subcategory.
   * @return vendorSubcategoryIdentifier
  **/
  @ApiModelProperty(value = "The identifier of the VendorCategoryDefinition for this vendor's subcategory.")
  public String getVendorSubcategoryIdentifier() {
    return vendorSubcategoryIdentifier;
  }

  public void setVendorSubcategoryIdentifier(String vendorSubcategoryIdentifier) {
    this.vendorSubcategoryIdentifier = vendorSubcategoryIdentifier;
  }

  public DestinyDefinitionsDestinyVendorDefinition consolidateCategories(Boolean consolidateCategories) {
    this.consolidateCategories = consolidateCategories;
    return this;
  }

   /**
   * If TRUE, consolidate categories that only differ by trivial properties (such as having minor differences in name)
   * @return consolidateCategories
  **/
  @ApiModelProperty(value = "If TRUE, consolidate categories that only differ by trivial properties (such as having minor differences in name)")
  public Boolean isConsolidateCategories() {
    return consolidateCategories;
  }

  public void setConsolidateCategories(Boolean consolidateCategories) {
    this.consolidateCategories = consolidateCategories;
  }

  public DestinyDefinitionsDestinyVendorDefinition actions(List<DestinyDefinitionsDestinyVendorActionDefinition> actions) {
    this.actions = actions;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addActionsItem(DestinyDefinitionsDestinyVendorActionDefinition actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

   /**
   * Describes \&quot;actions\&quot; that can be performed on a vendor. Currently, none of these exist. But theoretically a Vendor could let you interact with it by performing actions. We&#39;ll see what these end up looking like if they ever get used.
   * @return actions
  **/
  @ApiModelProperty(value = "Describes \"actions\" that can be performed on a vendor. Currently, none of these exist. But theoretically a Vendor could let you interact with it by performing actions. We'll see what these end up looking like if they ever get used.")
  public List<DestinyDefinitionsDestinyVendorActionDefinition> getActions() {
    return actions;
  }

  public void setActions(List<DestinyDefinitionsDestinyVendorActionDefinition> actions) {
    this.actions = actions;
  }

  public DestinyDefinitionsDestinyVendorDefinition categories(List<DestinyDefinitionsDestinyVendorCategoryEntryDefinition> categories) {
    this.categories = categories;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addCategoriesItem(DestinyDefinitionsDestinyVendorCategoryEntryDefinition categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * These are the headers for sections of items that the vendor is selling. When you see items organized by category in the header, it is these categories that it is showing.  Well, technically not *exactly* these. On BNet, it doesn&#39;t make sense to have categories be \&quot;paged\&quot; as we do in Destiny, so we run some heuristics to attempt to aggregate pages of categories together.   These are the categories post-concatenation, if the vendor had concatenation applied. If you want the pre-aggregated category data, use originalCategories.
   * @return categories
  **/
  @ApiModelProperty(value = "These are the headers for sections of items that the vendor is selling. When you see items organized by category in the header, it is these categories that it is showing.  Well, technically not *exactly* these. On BNet, it doesn't make sense to have categories be \"paged\" as we do in Destiny, so we run some heuristics to attempt to aggregate pages of categories together.   These are the categories post-concatenation, if the vendor had concatenation applied. If you want the pre-aggregated category data, use originalCategories.")
  public List<DestinyDefinitionsDestinyVendorCategoryEntryDefinition> getCategories() {
    return categories;
  }

  public void setCategories(List<DestinyDefinitionsDestinyVendorCategoryEntryDefinition> categories) {
    this.categories = categories;
  }

  public DestinyDefinitionsDestinyVendorDefinition originalCategories(List<DestinyDefinitionsDestinyVendorCategoryEntryDefinition> originalCategories) {
    this.originalCategories = originalCategories;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addOriginalCategoriesItem(DestinyDefinitionsDestinyVendorCategoryEntryDefinition originalCategoriesItem) {
    if (this.originalCategories == null) {
      this.originalCategories = new ArrayList<>();
    }
    this.originalCategories.add(originalCategoriesItem);
    return this;
  }

   /**
   * See the categories property for a description of categories and why originalCategories exists.
   * @return originalCategories
  **/
  @ApiModelProperty(value = "See the categories property for a description of categories and why originalCategories exists.")
  public List<DestinyDefinitionsDestinyVendorCategoryEntryDefinition> getOriginalCategories() {
    return originalCategories;
  }

  public void setOriginalCategories(List<DestinyDefinitionsDestinyVendorCategoryEntryDefinition> originalCategories) {
    this.originalCategories = originalCategories;
  }

  public DestinyDefinitionsDestinyVendorDefinition displayCategories(List<DestinyDefinitionsDestinyDisplayCategoryDefinition> displayCategories) {
    this.displayCategories = displayCategories;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addDisplayCategoriesItem(DestinyDefinitionsDestinyDisplayCategoryDefinition displayCategoriesItem) {
    if (this.displayCategories == null) {
      this.displayCategories = new ArrayList<>();
    }
    this.displayCategories.add(displayCategoriesItem);
    return this;
  }

   /**
   * Display Categories are different from \&quot;categories\&quot; in that these are specifically for visual grouping and display of categories in Vendor UI.   The \&quot;categories\&quot; structure is for validation of the contained items, and can be categorized entirely separately from \&quot;Display Categories\&quot;, there need be and often will be no meaningful relationship between the two.
   * @return displayCategories
  **/
  @ApiModelProperty(value = "Display Categories are different from \"categories\" in that these are specifically for visual grouping and display of categories in Vendor UI.   The \"categories\" structure is for validation of the contained items, and can be categorized entirely separately from \"Display Categories\", there need be and often will be no meaningful relationship between the two.")
  public List<DestinyDefinitionsDestinyDisplayCategoryDefinition> getDisplayCategories() {
    return displayCategories;
  }

  public void setDisplayCategories(List<DestinyDefinitionsDestinyDisplayCategoryDefinition> displayCategories) {
    this.displayCategories = displayCategories;
  }

  public DestinyDefinitionsDestinyVendorDefinition interactions(List<DestinyDefinitionsDestinyVendorInteractionDefinition> interactions) {
    this.interactions = interactions;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addInteractionsItem(DestinyDefinitionsDestinyVendorInteractionDefinition interactionsItem) {
    if (this.interactions == null) {
      this.interactions = new ArrayList<>();
    }
    this.interactions.add(interactionsItem);
    return this;
  }

   /**
   * In addition to selling items, vendors can have \&quot;interactions\&quot;: UI where you \&quot;talk\&quot; with the vendor and they offer you a reward, some item, or merely acknowledge via dialog that you did something cool.
   * @return interactions
  **/
  @ApiModelProperty(value = "In addition to selling items, vendors can have \"interactions\": UI where you \"talk\" with the vendor and they offer you a reward, some item, or merely acknowledge via dialog that you did something cool.")
  public List<DestinyDefinitionsDestinyVendorInteractionDefinition> getInteractions() {
    return interactions;
  }

  public void setInteractions(List<DestinyDefinitionsDestinyVendorInteractionDefinition> interactions) {
    this.interactions = interactions;
  }

  public DestinyDefinitionsDestinyVendorDefinition inventoryFlyouts(List<DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition> inventoryFlyouts) {
    this.inventoryFlyouts = inventoryFlyouts;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addInventoryFlyoutsItem(DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition inventoryFlyoutsItem) {
    if (this.inventoryFlyouts == null) {
      this.inventoryFlyouts = new ArrayList<>();
    }
    this.inventoryFlyouts.add(inventoryFlyoutsItem);
    return this;
  }

   /**
   * If the vendor shows you items from your own inventory - such as the Vault vendor does - this data describes the UI around showing those inventory buckets and which ones get shown.
   * @return inventoryFlyouts
  **/
  @ApiModelProperty(value = "If the vendor shows you items from your own inventory - such as the Vault vendor does - this data describes the UI around showing those inventory buckets and which ones get shown.")
  public List<DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition> getInventoryFlyouts() {
    return inventoryFlyouts;
  }

  public void setInventoryFlyouts(List<DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition> inventoryFlyouts) {
    this.inventoryFlyouts = inventoryFlyouts;
  }

  public DestinyDefinitionsDestinyVendorDefinition itemList(List<DestinyDefinitionsDestinyVendorItemDefinition> itemList) {
    this.itemList = itemList;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addItemListItem(DestinyDefinitionsDestinyVendorItemDefinition itemListItem) {
    if (this.itemList == null) {
      this.itemList = new ArrayList<>();
    }
    this.itemList.add(itemListItem);
    return this;
  }

   /**
   * If the vendor sells items (or merely has a list of items to show like the \&quot;Sack\&quot; vendors do), this is the list of those items that the vendor can sell. From this list, only a subset will be available from the vendor at any given time, selected randomly and reset on the vendor&#39;s refresh interval.  Note that a vendor can sell the same item multiple ways: for instance, nothing stops a vendor from selling you some specific weapon but using two different currencies, or the same weapon at multiple \&quot;item levels\&quot;.
   * @return itemList
  **/
  @ApiModelProperty(value = "If the vendor sells items (or merely has a list of items to show like the \"Sack\" vendors do), this is the list of those items that the vendor can sell. From this list, only a subset will be available from the vendor at any given time, selected randomly and reset on the vendor's refresh interval.  Note that a vendor can sell the same item multiple ways: for instance, nothing stops a vendor from selling you some specific weapon but using two different currencies, or the same weapon at multiple \"item levels\".")
  public List<DestinyDefinitionsDestinyVendorItemDefinition> getItemList() {
    return itemList;
  }

  public void setItemList(List<DestinyDefinitionsDestinyVendorItemDefinition> itemList) {
    this.itemList = itemList;
  }

  public DestinyDefinitionsDestinyVendorDefinition services(List<DestinyDefinitionsDestinyVendorServiceDefinition> services) {
    this.services = services;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addServicesItem(DestinyDefinitionsDestinyVendorServiceDefinition servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

   /**
   * BNet doesn&#39;t use this data yet, but it appears to be an optional list of flavor text about services that the Vendor can provide.
   * @return services
  **/
  @ApiModelProperty(value = "BNet doesn't use this data yet, but it appears to be an optional list of flavor text about services that the Vendor can provide.")
  public List<DestinyDefinitionsDestinyVendorServiceDefinition> getServices() {
    return services;
  }

  public void setServices(List<DestinyDefinitionsDestinyVendorServiceDefinition> services) {
    this.services = services;
  }

  public DestinyDefinitionsDestinyVendorDefinition acceptedItems(List<DestinyDefinitionsDestinyVendorAcceptedItemDefinition> acceptedItems) {
    this.acceptedItems = acceptedItems;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addAcceptedItemsItem(DestinyDefinitionsDestinyVendorAcceptedItemDefinition acceptedItemsItem) {
    if (this.acceptedItems == null) {
      this.acceptedItems = new ArrayList<>();
    }
    this.acceptedItems.add(acceptedItemsItem);
    return this;
  }

   /**
   * If the Vendor is actually a vehicle for the transferring of items (like the Vault and Postmaster vendors), this defines the list of source-&gt;destination buckets for transferring.
   * @return acceptedItems
  **/
  @ApiModelProperty(value = "If the Vendor is actually a vehicle for the transferring of items (like the Vault and Postmaster vendors), this defines the list of source->destination buckets for transferring.")
  public List<DestinyDefinitionsDestinyVendorAcceptedItemDefinition> getAcceptedItems() {
    return acceptedItems;
  }

  public void setAcceptedItems(List<DestinyDefinitionsDestinyVendorAcceptedItemDefinition> acceptedItems) {
    this.acceptedItems = acceptedItems;
  }

  public DestinyDefinitionsDestinyVendorDefinition returnWithVendorRequest(Boolean returnWithVendorRequest) {
    this.returnWithVendorRequest = returnWithVendorRequest;
    return this;
  }

   /**
   * As many of you know, Vendor data has historically been pretty brutal on the BNet servers. In an effort to reduce this workload, only Vendors with this flag set will be returned on Vendor requests. This allows us to filter out Vendors that don&#39;t dynamic data that&#39;s particularly useful: things like \&quot;Preview/Sack\&quot; vendors, for example, that you can usually suss out the details for using just the definitions themselves.
   * @return returnWithVendorRequest
  **/
  @ApiModelProperty(value = "As many of you know, Vendor data has historically been pretty brutal on the BNet servers. In an effort to reduce this workload, only Vendors with this flag set will be returned on Vendor requests. This allows us to filter out Vendors that don't dynamic data that's particularly useful: things like \"Preview/Sack\" vendors, for example, that you can usually suss out the details for using just the definitions themselves.")
  public Boolean isReturnWithVendorRequest() {
    return returnWithVendorRequest;
  }

  public void setReturnWithVendorRequest(Boolean returnWithVendorRequest) {
    this.returnWithVendorRequest = returnWithVendorRequest;
  }

  public DestinyDefinitionsDestinyVendorDefinition locations(List<DestinyDefinitionsVendorsDestinyVendorLocationDefinition> locations) {
    this.locations = locations;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addLocationsItem(DestinyDefinitionsVendorsDestinyVendorLocationDefinition locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

   /**
   * A vendor can be at different places in the world depending on the game/character/account state. This is the list of possible locations for the vendor, along with conditions we use to determine which one is currently active.
   * @return locations
  **/
  @ApiModelProperty(value = "A vendor can be at different places in the world depending on the game/character/account state. This is the list of possible locations for the vendor, along with conditions we use to determine which one is currently active.")
  public List<DestinyDefinitionsVendorsDestinyVendorLocationDefinition> getLocations() {
    return locations;
  }

  public void setLocations(List<DestinyDefinitionsVendorsDestinyVendorLocationDefinition> locations) {
    this.locations = locations;
  }

  public DestinyDefinitionsDestinyVendorDefinition groups(List<DestinyDefinitionsDestinyVendorGroupReference> groups) {
    this.groups = groups;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addGroupsItem(DestinyDefinitionsDestinyVendorGroupReference groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

   /**
   * A vendor can be a part of 0 or 1 \&quot;groups\&quot; at a time: a group being a collection of Vendors related by either location or function/purpose. It&#39;s used for our our Companion Vendor UI. Only one of these can be active for a Vendor at a time.
   * @return groups
  **/
  @ApiModelProperty(value = "A vendor can be a part of 0 or 1 \"groups\" at a time: a group being a collection of Vendors related by either location or function/purpose. It's used for our our Companion Vendor UI. Only one of these can be active for a Vendor at a time.")
  public List<DestinyDefinitionsDestinyVendorGroupReference> getGroups() {
    return groups;
  }

  public void setGroups(List<DestinyDefinitionsDestinyVendorGroupReference> groups) {
    this.groups = groups;
  }

  public DestinyDefinitionsDestinyVendorDefinition ignoreSaleItemHashes(List<Integer> ignoreSaleItemHashes) {
    this.ignoreSaleItemHashes = ignoreSaleItemHashes;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addIgnoreSaleItemHashesItem(Integer ignoreSaleItemHashesItem) {
    if (this.ignoreSaleItemHashes == null) {
      this.ignoreSaleItemHashes = new ArrayList<>();
    }
    this.ignoreSaleItemHashes.add(ignoreSaleItemHashesItem);
    return this;
  }

   /**
   * Some items don&#39;t make sense to return in the API, for example because they represent an action to be performed rather than an item being sold. I&#39;d rather we not do this, but at least in the short term this is a workable workaround.
   * @return ignoreSaleItemHashes
  **/
  @ApiModelProperty(value = "Some items don't make sense to return in the API, for example because they represent an action to be performed rather than an item being sold. I'd rather we not do this, but at least in the short term this is a workable workaround.")
  public List<Integer> getIgnoreSaleItemHashes() {
    return ignoreSaleItemHashes;
  }

  public void setIgnoreSaleItemHashes(List<Integer> ignoreSaleItemHashes) {
    this.ignoreSaleItemHashes = ignoreSaleItemHashes;
  }

  public DestinyDefinitionsDestinyVendorDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

   /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
  **/
  @ApiModelProperty(value = "The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.")
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }

  public DestinyDefinitionsDestinyVendorDefinition index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * The index of the entity as it was found in the investment tables.
   * @return index
  **/
  @ApiModelProperty(value = "The index of the entity as it was found in the investment tables.")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public DestinyDefinitionsDestinyVendorDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

   /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
  **/
  @ApiModelProperty(value = "If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!")
  public Boolean isRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyVendorDefinition destinyDefinitionsDestinyVendorDefinition = (DestinyDefinitionsDestinyVendorDefinition) o;
    return Objects.equals(this.displayProperties, destinyDefinitionsDestinyVendorDefinition.displayProperties) &&
        Objects.equals(this.buyString, destinyDefinitionsDestinyVendorDefinition.buyString) &&
        Objects.equals(this.sellString, destinyDefinitionsDestinyVendorDefinition.sellString) &&
        Objects.equals(this.displayItemHash, destinyDefinitionsDestinyVendorDefinition.displayItemHash) &&
        Objects.equals(this.inhibitBuying, destinyDefinitionsDestinyVendorDefinition.inhibitBuying) &&
        Objects.equals(this.inhibitSelling, destinyDefinitionsDestinyVendorDefinition.inhibitSelling) &&
        Objects.equals(this.factionHash, destinyDefinitionsDestinyVendorDefinition.factionHash) &&
        Objects.equals(this.resetIntervalMinutes, destinyDefinitionsDestinyVendorDefinition.resetIntervalMinutes) &&
        Objects.equals(this.resetOffsetMinutes, destinyDefinitionsDestinyVendorDefinition.resetOffsetMinutes) &&
        Objects.equals(this.failureStrings, destinyDefinitionsDestinyVendorDefinition.failureStrings) &&
        Objects.equals(this.unlockRanges, destinyDefinitionsDestinyVendorDefinition.unlockRanges) &&
        Objects.equals(this.vendorIdentifier, destinyDefinitionsDestinyVendorDefinition.vendorIdentifier) &&
        Objects.equals(this.vendorPortrait, destinyDefinitionsDestinyVendorDefinition.vendorPortrait) &&
        Objects.equals(this.vendorBanner, destinyDefinitionsDestinyVendorDefinition.vendorBanner) &&
        Objects.equals(this.enabled, destinyDefinitionsDestinyVendorDefinition.enabled) &&
        Objects.equals(this.visible, destinyDefinitionsDestinyVendorDefinition.visible) &&
        Objects.equals(this.vendorSubcategoryIdentifier, destinyDefinitionsDestinyVendorDefinition.vendorSubcategoryIdentifier) &&
        Objects.equals(this.consolidateCategories, destinyDefinitionsDestinyVendorDefinition.consolidateCategories) &&
        Objects.equals(this.actions, destinyDefinitionsDestinyVendorDefinition.actions) &&
        Objects.equals(this.categories, destinyDefinitionsDestinyVendorDefinition.categories) &&
        Objects.equals(this.originalCategories, destinyDefinitionsDestinyVendorDefinition.originalCategories) &&
        Objects.equals(this.displayCategories, destinyDefinitionsDestinyVendorDefinition.displayCategories) &&
        Objects.equals(this.interactions, destinyDefinitionsDestinyVendorDefinition.interactions) &&
        Objects.equals(this.inventoryFlyouts, destinyDefinitionsDestinyVendorDefinition.inventoryFlyouts) &&
        Objects.equals(this.itemList, destinyDefinitionsDestinyVendorDefinition.itemList) &&
        Objects.equals(this.services, destinyDefinitionsDestinyVendorDefinition.services) &&
        Objects.equals(this.acceptedItems, destinyDefinitionsDestinyVendorDefinition.acceptedItems) &&
        Objects.equals(this.returnWithVendorRequest, destinyDefinitionsDestinyVendorDefinition.returnWithVendorRequest) &&
        Objects.equals(this.locations, destinyDefinitionsDestinyVendorDefinition.locations) &&
        Objects.equals(this.groups, destinyDefinitionsDestinyVendorDefinition.groups) &&
        Objects.equals(this.ignoreSaleItemHashes, destinyDefinitionsDestinyVendorDefinition.ignoreSaleItemHashes) &&
        Objects.equals(this.hash, destinyDefinitionsDestinyVendorDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsDestinyVendorDefinition.index) &&
        Objects.equals(this.redacted, destinyDefinitionsDestinyVendorDefinition.redacted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayProperties, buyString, sellString, displayItemHash, inhibitBuying, inhibitSelling, factionHash, resetIntervalMinutes, resetOffsetMinutes, failureStrings, unlockRanges, vendorIdentifier, vendorPortrait, vendorBanner, enabled, visible, vendorSubcategoryIdentifier, consolidateCategories, actions, categories, originalCategories, displayCategories, interactions, inventoryFlyouts, itemList, services, acceptedItems, returnWithVendorRequest, locations, groups, ignoreSaleItemHashes, hash, index, redacted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyVendorDefinition {\n");
    
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    buyString: ").append(toIndentedString(buyString)).append("\n");
    sb.append("    sellString: ").append(toIndentedString(sellString)).append("\n");
    sb.append("    displayItemHash: ").append(toIndentedString(displayItemHash)).append("\n");
    sb.append("    inhibitBuying: ").append(toIndentedString(inhibitBuying)).append("\n");
    sb.append("    inhibitSelling: ").append(toIndentedString(inhibitSelling)).append("\n");
    sb.append("    factionHash: ").append(toIndentedString(factionHash)).append("\n");
    sb.append("    resetIntervalMinutes: ").append(toIndentedString(resetIntervalMinutes)).append("\n");
    sb.append("    resetOffsetMinutes: ").append(toIndentedString(resetOffsetMinutes)).append("\n");
    sb.append("    failureStrings: ").append(toIndentedString(failureStrings)).append("\n");
    sb.append("    unlockRanges: ").append(toIndentedString(unlockRanges)).append("\n");
    sb.append("    vendorIdentifier: ").append(toIndentedString(vendorIdentifier)).append("\n");
    sb.append("    vendorPortrait: ").append(toIndentedString(vendorPortrait)).append("\n");
    sb.append("    vendorBanner: ").append(toIndentedString(vendorBanner)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    vendorSubcategoryIdentifier: ").append(toIndentedString(vendorSubcategoryIdentifier)).append("\n");
    sb.append("    consolidateCategories: ").append(toIndentedString(consolidateCategories)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    originalCategories: ").append(toIndentedString(originalCategories)).append("\n");
    sb.append("    displayCategories: ").append(toIndentedString(displayCategories)).append("\n");
    sb.append("    interactions: ").append(toIndentedString(interactions)).append("\n");
    sb.append("    inventoryFlyouts: ").append(toIndentedString(inventoryFlyouts)).append("\n");
    sb.append("    itemList: ").append(toIndentedString(itemList)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    acceptedItems: ").append(toIndentedString(acceptedItems)).append("\n");
    sb.append("    returnWithVendorRequest: ").append(toIndentedString(returnWithVendorRequest)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    ignoreSaleItemHashes: ").append(toIndentedString(ignoreSaleItemHashes)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

