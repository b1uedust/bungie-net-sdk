/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import uk.co.bluedust.model.DestinyDefinitionsDestinyInventoryItemStatDefinition;

/**
 * Information about the item&#39;s calculated stats, with as much data as we can find for the stats without having an actual instance of the item.  Note that this means the entire concept of providing these stats is fundamentally insufficient: we cannot predict with 100% accuracy the conditions under which an item can spawn, so we use various heuristics to attempt to simulate the conditions as accurately as possible. Actual stats for items in-game can and will vary, but these should at least be useful base points for comparison and display.  It is also worth noting that some stats, like Magazine size, have further calculations performed on them by scripts in-game and on the game servers that BNet does not have access to. We cannot know how those stats are further transformed, and thus some stats will be inaccurate even on instances of items in BNet vs. how they appear in-game. This is a known limitation of our item statistics, without any planned fix.
 */
@ApiModel(description = "Information about the item's calculated stats, with as much data as we can find for the stats without having an actual instance of the item.  Note that this means the entire concept of providing these stats is fundamentally insufficient: we cannot predict with 100% accuracy the conditions under which an item can spawn, so we use various heuristics to attempt to simulate the conditions as accurately as possible. Actual stats for items in-game can and will vary, but these should at least be useful base points for comparison and display.  It is also worth noting that some stats, like Magazine size, have further calculations performed on them by scripts in-game and on the game servers that BNet does not have access to. We cannot know how those stats are further transformed, and thus some stats will be inaccurate even on instances of items in BNet vs. how they appear in-game. This is a known limitation of our item statistics, without any planned fix.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-12-08T21:00:47.497Z")
public class DestinyDefinitionsDestinyItemStatBlockDefinition {
  @JsonProperty("disablePrimaryStatDisplay")
  private Boolean disablePrimaryStatDisplay = null;

  @JsonProperty("statGroupHash")
  private Long statGroupHash = null;

  @JsonProperty("stats")
  private Map<String, DestinyDefinitionsDestinyInventoryItemStatDefinition> stats = null;

  @JsonProperty("hasDisplayableStats")
  private Boolean hasDisplayableStats = null;

  @JsonProperty("primaryBaseStatHash")
  private Long primaryBaseStatHash = null;

  public DestinyDefinitionsDestinyItemStatBlockDefinition disablePrimaryStatDisplay(Boolean disablePrimaryStatDisplay) {
    this.disablePrimaryStatDisplay = disablePrimaryStatDisplay;
    return this;
  }

   /**
   * If true, the game won&#39;t show the \&quot;primary\&quot; stat on this item when you inspect it.  NOTE: This is being manually mapped, because I happen to want it in a block that isn&#39;t going to directly create this derivative block.
   * @return disablePrimaryStatDisplay
  **/
  @ApiModelProperty(value = "If true, the game won't show the \"primary\" stat on this item when you inspect it.  NOTE: This is being manually mapped, because I happen to want it in a block that isn't going to directly create this derivative block.")
  public Boolean isDisablePrimaryStatDisplay() {
    return disablePrimaryStatDisplay;
  }

  public void setDisablePrimaryStatDisplay(Boolean disablePrimaryStatDisplay) {
    this.disablePrimaryStatDisplay = disablePrimaryStatDisplay;
  }

  public DestinyDefinitionsDestinyItemStatBlockDefinition statGroupHash(Long statGroupHash) {
    this.statGroupHash = statGroupHash;
    return this;
  }

   /**
   * If the item&#39;s stats are meant to be modified by a DestinyStatGroupDefinition, this will be the identifier for that definition.  If you are using live data or precomputed stats data on the DestinyInventoryItemDefinition.stats.stats property, you don&#39;t have to worry about statGroupHash and how it alters stats: the already altered stats are provided to you. But if you want to see how the sausage gets made, or perform computations yourself, this is valuable information.
   * @return statGroupHash
  **/
  @ApiModelProperty(value = "If the item's stats are meant to be modified by a DestinyStatGroupDefinition, this will be the identifier for that definition.  If you are using live data or precomputed stats data on the DestinyInventoryItemDefinition.stats.stats property, you don't have to worry about statGroupHash and how it alters stats: the already altered stats are provided to you. But if you want to see how the sausage gets made, or perform computations yourself, this is valuable information.")
  public Long getStatGroupHash() {
    return statGroupHash;
  }

  public void setStatGroupHash(Long statGroupHash) {
    this.statGroupHash = statGroupHash;
  }

  public DestinyDefinitionsDestinyItemStatBlockDefinition stats(Map<String, DestinyDefinitionsDestinyInventoryItemStatDefinition> stats) {
    this.stats = stats;
    return this;
  }

  public DestinyDefinitionsDestinyItemStatBlockDefinition putStatsItem(String key, DestinyDefinitionsDestinyInventoryItemStatDefinition statsItem) {
    if (this.stats == null) {
      this.stats = new HashMap<>();
    }
    this.stats.put(key, statsItem);
    return this;
  }

   /**
   * If you are looking for precomputed values for the stats on a weapon, this is where they are stored. Technically these are the \&quot;Display\&quot; stat values. Please see DestinyStatsDefinition for what Display Stat Values means, it&#39;s a very long story... but essentially these are the closest values BNet can get to the item stats that you see in-game.  These stats are keyed by the DestinyStatDefinition&#39;s hash identifier for the stat that&#39;s found on the item.
   * @return stats
  **/
  @ApiModelProperty(value = "If you are looking for precomputed values for the stats on a weapon, this is where they are stored. Technically these are the \"Display\" stat values. Please see DestinyStatsDefinition for what Display Stat Values means, it's a very long story... but essentially these are the closest values BNet can get to the item stats that you see in-game.  These stats are keyed by the DestinyStatDefinition's hash identifier for the stat that's found on the item.")
  public Map<String, DestinyDefinitionsDestinyInventoryItemStatDefinition> getStats() {
    return stats;
  }

  public void setStats(Map<String, DestinyDefinitionsDestinyInventoryItemStatDefinition> stats) {
    this.stats = stats;
  }

  public DestinyDefinitionsDestinyItemStatBlockDefinition hasDisplayableStats(Boolean hasDisplayableStats) {
    this.hasDisplayableStats = hasDisplayableStats;
    return this;
  }

   /**
   * A quick and lazy way to determine whether any stat other than the \&quot;primary\&quot; stat is actually visible on the item. Items often have stats that we return in case people find them useful, but they&#39;re not part of the \&quot;Stat Group\&quot; and thus we wouldn&#39;t display them in our UI. If this is False, then we&#39;re not going to display any of these stats other than the primary one.
   * @return hasDisplayableStats
  **/
  @ApiModelProperty(value = "A quick and lazy way to determine whether any stat other than the \"primary\" stat is actually visible on the item. Items often have stats that we return in case people find them useful, but they're not part of the \"Stat Group\" and thus we wouldn't display them in our UI. If this is False, then we're not going to display any of these stats other than the primary one.")
  public Boolean isHasDisplayableStats() {
    return hasDisplayableStats;
  }

  public void setHasDisplayableStats(Boolean hasDisplayableStats) {
    this.hasDisplayableStats = hasDisplayableStats;
  }

  public DestinyDefinitionsDestinyItemStatBlockDefinition primaryBaseStatHash(Long primaryBaseStatHash) {
    this.primaryBaseStatHash = primaryBaseStatHash;
    return this;
  }

   /**
   * This stat is determined to be the \&quot;primary\&quot; stat, and can be looked up in the stats or any other stat collection related to the item.  Use this hash to look up the stat&#39;s value using DestinyInventoryItemDefinition.stats.stats, and the renderable data for the primary stat in the related DestinyStatDefinition.
   * @return primaryBaseStatHash
  **/
  @ApiModelProperty(value = "This stat is determined to be the \"primary\" stat, and can be looked up in the stats or any other stat collection related to the item.  Use this hash to look up the stat's value using DestinyInventoryItemDefinition.stats.stats, and the renderable data for the primary stat in the related DestinyStatDefinition.")
  public Long getPrimaryBaseStatHash() {
    return primaryBaseStatHash;
  }

  public void setPrimaryBaseStatHash(Long primaryBaseStatHash) {
    this.primaryBaseStatHash = primaryBaseStatHash;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyItemStatBlockDefinition destinyDefinitionsDestinyItemStatBlockDefinition = (DestinyDefinitionsDestinyItemStatBlockDefinition) o;
    return Objects.equals(this.disablePrimaryStatDisplay, destinyDefinitionsDestinyItemStatBlockDefinition.disablePrimaryStatDisplay) &&
        Objects.equals(this.statGroupHash, destinyDefinitionsDestinyItemStatBlockDefinition.statGroupHash) &&
        Objects.equals(this.stats, destinyDefinitionsDestinyItemStatBlockDefinition.stats) &&
        Objects.equals(this.hasDisplayableStats, destinyDefinitionsDestinyItemStatBlockDefinition.hasDisplayableStats) &&
        Objects.equals(this.primaryBaseStatHash, destinyDefinitionsDestinyItemStatBlockDefinition.primaryBaseStatHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disablePrimaryStatDisplay, statGroupHash, stats, hasDisplayableStats, primaryBaseStatHash);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyItemStatBlockDefinition {\n");
    
    sb.append("    disablePrimaryStatDisplay: ").append(toIndentedString(disablePrimaryStatDisplay)).append("\n");
    sb.append("    statGroupHash: ").append(toIndentedString(statGroupHash)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    hasDisplayableStats: ").append(toIndentedString(hasDisplayableStats)).append("\n");
    sb.append("    primaryBaseStatHash: ").append(toIndentedString(primaryBaseStatHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

