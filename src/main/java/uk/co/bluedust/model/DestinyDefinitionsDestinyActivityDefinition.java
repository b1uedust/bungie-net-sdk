/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import uk.co.bluedust.model.DestinyConstantsDestinyEnvironmentLocationMapping;
import uk.co.bluedust.model.DestinyDefinitionsDestinyActivityChallengeDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDestinyActivityGraphListEntryDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDestinyActivityInsertionPointDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDestinyActivityLoadoutRequirementSet;
import uk.co.bluedust.model.DestinyDefinitionsDestinyActivityModifierReferenceDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDestinyActivityPlaylistItemDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDestinyActivityRewardDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDestinyActivityUnlockStringDefinition;
import uk.co.bluedust.model.DestinyHistoricalStatsDefinitionsDestinyActivityModeType;

/**
 * The static data about Activities in Destiny 2.  Note that an Activity must be combined with an ActivityMode to know - from a Gameplay perspective - what the user is \&quot;Playing\&quot;.  In most PvE activities, this is fairly straightforward. A Story Activity can only be played in the Story Activity Mode.  However, in PvP activities, the Activity alone only tells you the map being played, or the Playlist that the user chose to enter. You&#39;ll need to know the Activity Mode they&#39;re playing to know that they&#39;re playing Mode X on Map Y.  Activity Definitions tell a great deal of information about what *could* be relevant to a user: what rewards they can earn, what challenges could be performed, what modifiers could be applied. To figure out which of these properties is actually live, you&#39;ll need to combine the definition with \&quot;Live\&quot; data from one of the Destiny endpoints.  Activities also have Activity Types, but unfortunately in Destiny 2 these are even less reliable of a source of information than they were in Destiny 1. I will be looking into ways to provide more reliable sources for type information as time goes on, but for now we&#39;re going to have to deal with the limitations. See DestinyActivityTypeDefinition for more information.
 */
@ApiModel(description = "The static data about Activities in Destiny 2.  Note that an Activity must be combined with an ActivityMode to know - from a Gameplay perspective - what the user is \"Playing\".  In most PvE activities, this is fairly straightforward. A Story Activity can only be played in the Story Activity Mode.  However, in PvP activities, the Activity alone only tells you the map being played, or the Playlist that the user chose to enter. You'll need to know the Activity Mode they're playing to know that they're playing Mode X on Map Y.  Activity Definitions tell a great deal of information about what *could* be relevant to a user: what rewards they can earn, what challenges could be performed, what modifiers could be applied. To figure out which of these properties is actually live, you'll need to combine the definition with \"Live\" data from one of the Destiny endpoints.  Activities also have Activity Types, but unfortunately in Destiny 2 these are even less reliable of a source of information than they were in Destiny 1. I will be looking into ways to provide more reliable sources for type information as time goes on, but for now we're going to have to deal with the limitations. See DestinyActivityTypeDefinition for more information.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-04T23:34:27.728Z")
public class DestinyDefinitionsDestinyActivityDefinition {
  @JsonProperty("displayProperties")
  private Object displayProperties = null;

  @JsonProperty("originalDisplayProperties")
  private Object originalDisplayProperties = null;

  @JsonProperty("selectionScreenDisplayProperties")
  private Object selectionScreenDisplayProperties = null;

  @JsonProperty("releaseIcon")
  private String releaseIcon = null;

  @JsonProperty("releaseTime")
  private Integer releaseTime = null;

  @JsonProperty("activityLevel")
  private Integer activityLevel = null;

  @JsonProperty("activityLightLevel")
  private Integer activityLightLevel = null;

  @JsonProperty("destinationHash")
  private Long destinationHash = null;

  @JsonProperty("placeHash")
  private Long placeHash = null;

  @JsonProperty("activityTypeHash")
  private Long activityTypeHash = null;

  @JsonProperty("tier")
  private Integer tier = null;

  @JsonProperty("pgcrImage")
  private String pgcrImage = null;

  @JsonProperty("rewards")
  private List<DestinyDefinitionsDestinyActivityRewardDefinition> rewards = null;

  @JsonProperty("modifiers")
  private List<DestinyDefinitionsDestinyActivityModifierReferenceDefinition> modifiers = null;

  @JsonProperty("isPlaylist")
  private Boolean isPlaylist = null;

  @JsonProperty("challenges")
  private List<DestinyDefinitionsDestinyActivityChallengeDefinition> challenges = null;

  @JsonProperty("optionalUnlockStrings")
  private List<DestinyDefinitionsDestinyActivityUnlockStringDefinition> optionalUnlockStrings = null;

  @JsonProperty("playlistItems")
  private List<DestinyDefinitionsDestinyActivityPlaylistItemDefinition> playlistItems = null;

  @JsonProperty("activityGraphList")
  private List<DestinyDefinitionsDestinyActivityGraphListEntryDefinition> activityGraphList = null;

  @JsonProperty("matchmaking")
  private Object matchmaking = null;

  @JsonProperty("guidedGame")
  private Object guidedGame = null;

  @JsonProperty("directActivityModeHash")
  private Long directActivityModeHash = null;

  /**
   * If the activity had an activity mode directly defined on it, this will be the enum value of that mode.
   */
  public enum DirectActivityModeTypeEnum {
    NUMBER_0(0),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_15(15),
    
    NUMBER_16(16),
    
    NUMBER_17(17),
    
    NUMBER_18(18),
    
    NUMBER_19(19),
    
    NUMBER_20(20),
    
    NUMBER_21(21),
    
    NUMBER_22(22),
    
    NUMBER_24(24),
    
    NUMBER_25(25),
    
    NUMBER_26(26),
    
    NUMBER_27(27),
    
    NUMBER_28(28),
    
    NUMBER_29(29),
    
    NUMBER_30(30),
    
    NUMBER_31(31),
    
    NUMBER_32(32),
    
    NUMBER_37(37),
    
    NUMBER_38(38),
    
    NUMBER_39(39),
    
    NUMBER_40(40),
    
    NUMBER_41(41),
    
    NUMBER_42(42),
    
    NUMBER_43(43),
    
    NUMBER_44(44),
    
    NUMBER_45(45),
    
    NUMBER_46(46),
    
    NUMBER_47(47),
    
    NUMBER_48(48),
    
    NUMBER_49(49),
    
    NUMBER_50(50),
    
    NUMBER_51(51),
    
    NUMBER_52(52),
    
    NUMBER_53(53),
    
    NUMBER_54(54),
    
    NUMBER_55(55),
    
    NUMBER_56(56),
    
    NUMBER_57(57),
    
    NUMBER_58(58),
    
    NUMBER_59(59),
    
    NUMBER_60(60),
    
    NUMBER_61(61),
    
    NUMBER_62(62),
    
    NUMBER_63(63),
    
    NUMBER_64(64),
    
    NUMBER_65(65);

    private Integer value;

    DirectActivityModeTypeEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DirectActivityModeTypeEnum fromValue(String text) {
      for (DirectActivityModeTypeEnum b : DirectActivityModeTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("directActivityModeType")
  private DirectActivityModeTypeEnum directActivityModeType = null;

  @JsonProperty("loadouts")
  private List<DestinyDefinitionsDestinyActivityLoadoutRequirementSet> loadouts = null;

  @JsonProperty("activityModeHashes")
  private List<Long> activityModeHashes = null;

  @JsonProperty("activityModeTypes")
  private List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> activityModeTypes = null;

  @JsonProperty("isPvP")
  private Boolean isPvP = null;

  @JsonProperty("insertionPoints")
  private List<DestinyDefinitionsDestinyActivityInsertionPointDefinition> insertionPoints = null;

  @JsonProperty("activityLocationMappings")
  private List<DestinyConstantsDestinyEnvironmentLocationMapping> activityLocationMappings = null;

  @JsonProperty("hash")
  private Long hash = null;

  @JsonProperty("index")
  private Integer index = null;

  @JsonProperty("redacted")
  private Boolean redacted = null;

  public DestinyDefinitionsDestinyActivityDefinition displayProperties(Object displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

   /**
   * The title, subtitle, and icon for the activity. We do a little post-processing on this to try and account for Activities where the designers have left this data too minimal to determine what activity is actually being played.
   * @return displayProperties
  **/
  @ApiModelProperty(value = "The title, subtitle, and icon for the activity. We do a little post-processing on this to try and account for Activities where the designers have left this data too minimal to determine what activity is actually being played.")
  public Object getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(Object displayProperties) {
    this.displayProperties = displayProperties;
  }

  public DestinyDefinitionsDestinyActivityDefinition originalDisplayProperties(Object originalDisplayProperties) {
    this.originalDisplayProperties = originalDisplayProperties;
    return this;
  }

   /**
   * The unadulterated form of the display properties, as they ought to be shown in the Director (if the activity appears in the director).
   * @return originalDisplayProperties
  **/
  @ApiModelProperty(value = "The unadulterated form of the display properties, as they ought to be shown in the Director (if the activity appears in the director).")
  public Object getOriginalDisplayProperties() {
    return originalDisplayProperties;
  }

  public void setOriginalDisplayProperties(Object originalDisplayProperties) {
    this.originalDisplayProperties = originalDisplayProperties;
  }

  public DestinyDefinitionsDestinyActivityDefinition selectionScreenDisplayProperties(Object selectionScreenDisplayProperties) {
    this.selectionScreenDisplayProperties = selectionScreenDisplayProperties;
    return this;
  }

   /**
   * The title, subtitle, and icon for the activity as determined by Selection Screen data, if there is any for this activity. There won&#39;t be data in this field if the activity is never shown in a selection/options screen.
   * @return selectionScreenDisplayProperties
  **/
  @ApiModelProperty(value = "The title, subtitle, and icon for the activity as determined by Selection Screen data, if there is any for this activity. There won't be data in this field if the activity is never shown in a selection/options screen.")
  public Object getSelectionScreenDisplayProperties() {
    return selectionScreenDisplayProperties;
  }

  public void setSelectionScreenDisplayProperties(Object selectionScreenDisplayProperties) {
    this.selectionScreenDisplayProperties = selectionScreenDisplayProperties;
  }

  public DestinyDefinitionsDestinyActivityDefinition releaseIcon(String releaseIcon) {
    this.releaseIcon = releaseIcon;
    return this;
  }

   /**
   * If the activity has an icon associated with a specific release (such as a DLC), this is the path to that release&#39;s icon.
   * @return releaseIcon
  **/
  @ApiModelProperty(value = "If the activity has an icon associated with a specific release (such as a DLC), this is the path to that release's icon.")
  public String getReleaseIcon() {
    return releaseIcon;
  }

  public void setReleaseIcon(String releaseIcon) {
    this.releaseIcon = releaseIcon;
  }

  public DestinyDefinitionsDestinyActivityDefinition releaseTime(Integer releaseTime) {
    this.releaseTime = releaseTime;
    return this;
  }

   /**
   * If the activity will not be visible until a specific and known time, this will be the seconds since the Epoch when it will become visible.
   * @return releaseTime
  **/
  @ApiModelProperty(value = "If the activity will not be visible until a specific and known time, this will be the seconds since the Epoch when it will become visible.")
  public Integer getReleaseTime() {
    return releaseTime;
  }

  public void setReleaseTime(Integer releaseTime) {
    this.releaseTime = releaseTime;
  }

  public DestinyDefinitionsDestinyActivityDefinition activityLevel(Integer activityLevel) {
    this.activityLevel = activityLevel;
    return this;
  }

   /**
   * The difficulty level of the activity.
   * @return activityLevel
  **/
  @ApiModelProperty(value = "The difficulty level of the activity.")
  public Integer getActivityLevel() {
    return activityLevel;
  }

  public void setActivityLevel(Integer activityLevel) {
    this.activityLevel = activityLevel;
  }

  public DestinyDefinitionsDestinyActivityDefinition activityLightLevel(Integer activityLightLevel) {
    this.activityLightLevel = activityLightLevel;
    return this;
  }

   /**
   * The recommended light level for this activity.
   * @return activityLightLevel
  **/
  @ApiModelProperty(value = "The recommended light level for this activity.")
  public Integer getActivityLightLevel() {
    return activityLightLevel;
  }

  public void setActivityLightLevel(Integer activityLightLevel) {
    this.activityLightLevel = activityLightLevel;
  }

  public DestinyDefinitionsDestinyActivityDefinition destinationHash(Long destinationHash) {
    this.destinationHash = destinationHash;
    return this;
  }

   /**
   * The hash identifier for the Destination on which this Activity is played. Use it to look up the DestinyDestinationDefinition for human readable info about the destination. A Destination can be thought of as a more specific location than a \&quot;Place\&quot;. For instance, if the \&quot;Place\&quot; is Earth, the \&quot;Destination\&quot; would be a specific city or region on Earth.
   * @return destinationHash
  **/
  @ApiModelProperty(value = "The hash identifier for the Destination on which this Activity is played. Use it to look up the DestinyDestinationDefinition for human readable info about the destination. A Destination can be thought of as a more specific location than a \"Place\". For instance, if the \"Place\" is Earth, the \"Destination\" would be a specific city or region on Earth.")
  public Long getDestinationHash() {
    return destinationHash;
  }

  public void setDestinationHash(Long destinationHash) {
    this.destinationHash = destinationHash;
  }

  public DestinyDefinitionsDestinyActivityDefinition placeHash(Long placeHash) {
    this.placeHash = placeHash;
    return this;
  }

   /**
   * The hash identifier for the \&quot;Place\&quot; on which this Activity is played. Use it to look up the DestinyPlaceDefinition for human readable info about the Place. A Place is the largest-scoped concept for location information. For instance, if the \&quot;Place\&quot; is Earth, the \&quot;Destination\&quot; would be a specific city or region on Earth.
   * @return placeHash
  **/
  @ApiModelProperty(value = "The hash identifier for the \"Place\" on which this Activity is played. Use it to look up the DestinyPlaceDefinition for human readable info about the Place. A Place is the largest-scoped concept for location information. For instance, if the \"Place\" is Earth, the \"Destination\" would be a specific city or region on Earth.")
  public Long getPlaceHash() {
    return placeHash;
  }

  public void setPlaceHash(Long placeHash) {
    this.placeHash = placeHash;
  }

  public DestinyDefinitionsDestinyActivityDefinition activityTypeHash(Long activityTypeHash) {
    this.activityTypeHash = activityTypeHash;
    return this;
  }

   /**
   * The hash identifier for the Activity Type of this Activity. You may use it to look up the DestinyActivityTypeDefinition for human readable info, but be forewarned: Playlists and many PVP Map Activities will map to generic Activity Types. You&#39;ll have to use your knowledge of the Activity Mode being played to get more specific information about what the user is playing.
   * @return activityTypeHash
  **/
  @ApiModelProperty(value = "The hash identifier for the Activity Type of this Activity. You may use it to look up the DestinyActivityTypeDefinition for human readable info, but be forewarned: Playlists and many PVP Map Activities will map to generic Activity Types. You'll have to use your knowledge of the Activity Mode being played to get more specific information about what the user is playing.")
  public Long getActivityTypeHash() {
    return activityTypeHash;
  }

  public void setActivityTypeHash(Long activityTypeHash) {
    this.activityTypeHash = activityTypeHash;
  }

  public DestinyDefinitionsDestinyActivityDefinition tier(Integer tier) {
    this.tier = tier;
    return this;
  }

   /**
   * The difficulty tier of the activity.
   * @return tier
  **/
  @ApiModelProperty(value = "The difficulty tier of the activity.")
  public Integer getTier() {
    return tier;
  }

  public void setTier(Integer tier) {
    this.tier = tier;
  }

  public DestinyDefinitionsDestinyActivityDefinition pgcrImage(String pgcrImage) {
    this.pgcrImage = pgcrImage;
    return this;
  }

   /**
   * When Activities are completed, we generate a \&quot;Post-Game Carnage Report\&quot;, or PGCR, with details about what happened in that activity (how many kills someone got, which team won, etc...) We use this image as the background when displaying PGCR information, and often use it when we refer to the Activity in general.
   * @return pgcrImage
  **/
  @ApiModelProperty(value = "When Activities are completed, we generate a \"Post-Game Carnage Report\", or PGCR, with details about what happened in that activity (how many kills someone got, which team won, etc...) We use this image as the background when displaying PGCR information, and often use it when we refer to the Activity in general.")
  public String getPgcrImage() {
    return pgcrImage;
  }

  public void setPgcrImage(String pgcrImage) {
    this.pgcrImage = pgcrImage;
  }

  public DestinyDefinitionsDestinyActivityDefinition rewards(List<DestinyDefinitionsDestinyActivityRewardDefinition> rewards) {
    this.rewards = rewards;
    return this;
  }

  public DestinyDefinitionsDestinyActivityDefinition addRewardsItem(DestinyDefinitionsDestinyActivityRewardDefinition rewardsItem) {
    if (this.rewards == null) {
      this.rewards = new ArrayList<>();
    }
    this.rewards.add(rewardsItem);
    return this;
  }

   /**
   * The expected possible rewards for the activity. These rewards may or may not be accessible for an individual player based on their character state, the account state, and even the game&#39;s state overall. But it is a useful reference for possible rewards you can earn in the activity. These match up to rewards displayed when you hover over the Activity in the in-game Director, and often refer to Placeholder or \&quot;Dummy\&quot; items: items that tell you what you can earn in vague terms rather than what you&#39;ll specifically be earning (partly because the game doesn&#39;t even know what you&#39;ll earn specifically until you roll for it at the end)
   * @return rewards
  **/
  @ApiModelProperty(value = "The expected possible rewards for the activity. These rewards may or may not be accessible for an individual player based on their character state, the account state, and even the game's state overall. But it is a useful reference for possible rewards you can earn in the activity. These match up to rewards displayed when you hover over the Activity in the in-game Director, and often refer to Placeholder or \"Dummy\" items: items that tell you what you can earn in vague terms rather than what you'll specifically be earning (partly because the game doesn't even know what you'll earn specifically until you roll for it at the end)")
  public List<DestinyDefinitionsDestinyActivityRewardDefinition> getRewards() {
    return rewards;
  }

  public void setRewards(List<DestinyDefinitionsDestinyActivityRewardDefinition> rewards) {
    this.rewards = rewards;
  }

  public DestinyDefinitionsDestinyActivityDefinition modifiers(List<DestinyDefinitionsDestinyActivityModifierReferenceDefinition> modifiers) {
    this.modifiers = modifiers;
    return this;
  }

  public DestinyDefinitionsDestinyActivityDefinition addModifiersItem(DestinyDefinitionsDestinyActivityModifierReferenceDefinition modifiersItem) {
    if (this.modifiers == null) {
      this.modifiers = new ArrayList<>();
    }
    this.modifiers.add(modifiersItem);
    return this;
  }

   /**
   * Activities can have Modifiers, as defined in DestinyActivityModifierDefinition. These are references to the modifiers that *can* be applied to that activity, along with data that we use to determine if that modifier is actually active at any given point in time.
   * @return modifiers
  **/
  @ApiModelProperty(value = "Activities can have Modifiers, as defined in DestinyActivityModifierDefinition. These are references to the modifiers that *can* be applied to that activity, along with data that we use to determine if that modifier is actually active at any given point in time.")
  public List<DestinyDefinitionsDestinyActivityModifierReferenceDefinition> getModifiers() {
    return modifiers;
  }

  public void setModifiers(List<DestinyDefinitionsDestinyActivityModifierReferenceDefinition> modifiers) {
    this.modifiers = modifiers;
  }

  public DestinyDefinitionsDestinyActivityDefinition isPlaylist(Boolean isPlaylist) {
    this.isPlaylist = isPlaylist;
    return this;
  }

   /**
   * If True, this Activity is actually a Playlist that refers to multiple possible specific Activities and Activity Modes. For instance, a Crucible Playlist may have references to multiple Activities (Maps) with multiple Activity Modes (specific PvP gameplay modes). If this is true, refer to the playlistItems property for the specific entries in the playlist.
   * @return isPlaylist
  **/
  @ApiModelProperty(value = "If True, this Activity is actually a Playlist that refers to multiple possible specific Activities and Activity Modes. For instance, a Crucible Playlist may have references to multiple Activities (Maps) with multiple Activity Modes (specific PvP gameplay modes). If this is true, refer to the playlistItems property for the specific entries in the playlist.")
  public Boolean isIsPlaylist() {
    return isPlaylist;
  }

  public void setIsPlaylist(Boolean isPlaylist) {
    this.isPlaylist = isPlaylist;
  }

  public DestinyDefinitionsDestinyActivityDefinition challenges(List<DestinyDefinitionsDestinyActivityChallengeDefinition> challenges) {
    this.challenges = challenges;
    return this;
  }

  public DestinyDefinitionsDestinyActivityDefinition addChallengesItem(DestinyDefinitionsDestinyActivityChallengeDefinition challengesItem) {
    if (this.challenges == null) {
      this.challenges = new ArrayList<>();
    }
    this.challenges.add(challengesItem);
    return this;
  }

   /**
   * An activity can have many Challenges, of which any subset of them may be active for play at any given period of time. This gives the information about the challenges and data that we use to understand when they&#39;re active and what rewards they provide. Sadly, at the moment there&#39;s no central definition for challenges: much like \&quot;Skulls\&quot; were in Destiny 1, these are defined on individual activities and there can be many duplicates/near duplicates across the Destiny 2 ecosystem. I have it in mind to centralize these in a future revision of the API, but we are out of time.
   * @return challenges
  **/
  @ApiModelProperty(value = "An activity can have many Challenges, of which any subset of them may be active for play at any given period of time. This gives the information about the challenges and data that we use to understand when they're active and what rewards they provide. Sadly, at the moment there's no central definition for challenges: much like \"Skulls\" were in Destiny 1, these are defined on individual activities and there can be many duplicates/near duplicates across the Destiny 2 ecosystem. I have it in mind to centralize these in a future revision of the API, but we are out of time.")
  public List<DestinyDefinitionsDestinyActivityChallengeDefinition> getChallenges() {
    return challenges;
  }

  public void setChallenges(List<DestinyDefinitionsDestinyActivityChallengeDefinition> challenges) {
    this.challenges = challenges;
  }

  public DestinyDefinitionsDestinyActivityDefinition optionalUnlockStrings(List<DestinyDefinitionsDestinyActivityUnlockStringDefinition> optionalUnlockStrings) {
    this.optionalUnlockStrings = optionalUnlockStrings;
    return this;
  }

  public DestinyDefinitionsDestinyActivityDefinition addOptionalUnlockStringsItem(DestinyDefinitionsDestinyActivityUnlockStringDefinition optionalUnlockStringsItem) {
    if (this.optionalUnlockStrings == null) {
      this.optionalUnlockStrings = new ArrayList<>();
    }
    this.optionalUnlockStrings.add(optionalUnlockStringsItem);
    return this;
  }

   /**
   * If there are status strings related to the activity and based on internal state of the game, account, or character, then this will be the definition of those strings and the states needed in order for the strings to be shown.
   * @return optionalUnlockStrings
  **/
  @ApiModelProperty(value = "If there are status strings related to the activity and based on internal state of the game, account, or character, then this will be the definition of those strings and the states needed in order for the strings to be shown.")
  public List<DestinyDefinitionsDestinyActivityUnlockStringDefinition> getOptionalUnlockStrings() {
    return optionalUnlockStrings;
  }

  public void setOptionalUnlockStrings(List<DestinyDefinitionsDestinyActivityUnlockStringDefinition> optionalUnlockStrings) {
    this.optionalUnlockStrings = optionalUnlockStrings;
  }

  public DestinyDefinitionsDestinyActivityDefinition playlistItems(List<DestinyDefinitionsDestinyActivityPlaylistItemDefinition> playlistItems) {
    this.playlistItems = playlistItems;
    return this;
  }

  public DestinyDefinitionsDestinyActivityDefinition addPlaylistItemsItem(DestinyDefinitionsDestinyActivityPlaylistItemDefinition playlistItemsItem) {
    if (this.playlistItems == null) {
      this.playlistItems = new ArrayList<>();
    }
    this.playlistItems.add(playlistItemsItem);
    return this;
  }

   /**
   * Represents all of the possible activities that could be played in the Playlist, along with information that we can use to determine if they are active at the present time.
   * @return playlistItems
  **/
  @ApiModelProperty(value = "Represents all of the possible activities that could be played in the Playlist, along with information that we can use to determine if they are active at the present time.")
  public List<DestinyDefinitionsDestinyActivityPlaylistItemDefinition> getPlaylistItems() {
    return playlistItems;
  }

  public void setPlaylistItems(List<DestinyDefinitionsDestinyActivityPlaylistItemDefinition> playlistItems) {
    this.playlistItems = playlistItems;
  }

  public DestinyDefinitionsDestinyActivityDefinition activityGraphList(List<DestinyDefinitionsDestinyActivityGraphListEntryDefinition> activityGraphList) {
    this.activityGraphList = activityGraphList;
    return this;
  }

  public DestinyDefinitionsDestinyActivityDefinition addActivityGraphListItem(DestinyDefinitionsDestinyActivityGraphListEntryDefinition activityGraphListItem) {
    if (this.activityGraphList == null) {
      this.activityGraphList = new ArrayList<>();
    }
    this.activityGraphList.add(activityGraphListItem);
    return this;
  }

   /**
   * Unfortunately, in practice this is almost never populated. In theory, this is supposed to tell which Activity Graph to show if you bring up the director while in this activity.
   * @return activityGraphList
  **/
  @ApiModelProperty(value = "Unfortunately, in practice this is almost never populated. In theory, this is supposed to tell which Activity Graph to show if you bring up the director while in this activity.")
  public List<DestinyDefinitionsDestinyActivityGraphListEntryDefinition> getActivityGraphList() {
    return activityGraphList;
  }

  public void setActivityGraphList(List<DestinyDefinitionsDestinyActivityGraphListEntryDefinition> activityGraphList) {
    this.activityGraphList = activityGraphList;
  }

  public DestinyDefinitionsDestinyActivityDefinition matchmaking(Object matchmaking) {
    this.matchmaking = matchmaking;
    return this;
  }

   /**
   * This block of data provides information about the Activity&#39;s matchmaking attributes: how many people can join and such.
   * @return matchmaking
  **/
  @ApiModelProperty(value = "This block of data provides information about the Activity's matchmaking attributes: how many people can join and such.")
  public Object getMatchmaking() {
    return matchmaking;
  }

  public void setMatchmaking(Object matchmaking) {
    this.matchmaking = matchmaking;
  }

  public DestinyDefinitionsDestinyActivityDefinition guidedGame(Object guidedGame) {
    this.guidedGame = guidedGame;
    return this;
  }

   /**
   * This block of data, if it exists, provides information about the guided game experience and restrictions for this activity. If it doesn&#39;t exist, the game is not able to be played as a guided game.
   * @return guidedGame
  **/
  @ApiModelProperty(value = "This block of data, if it exists, provides information about the guided game experience and restrictions for this activity. If it doesn't exist, the game is not able to be played as a guided game.")
  public Object getGuidedGame() {
    return guidedGame;
  }

  public void setGuidedGame(Object guidedGame) {
    this.guidedGame = guidedGame;
  }

  public DestinyDefinitionsDestinyActivityDefinition directActivityModeHash(Long directActivityModeHash) {
    this.directActivityModeHash = directActivityModeHash;
    return this;
  }

   /**
   * If this activity had an activity mode directly defined on it, this will be the hash of that mode.
   * @return directActivityModeHash
  **/
  @ApiModelProperty(value = "If this activity had an activity mode directly defined on it, this will be the hash of that mode.")
  public Long getDirectActivityModeHash() {
    return directActivityModeHash;
  }

  public void setDirectActivityModeHash(Long directActivityModeHash) {
    this.directActivityModeHash = directActivityModeHash;
  }

  public DestinyDefinitionsDestinyActivityDefinition directActivityModeType(DirectActivityModeTypeEnum directActivityModeType) {
    this.directActivityModeType = directActivityModeType;
    return this;
  }

   /**
   * If the activity had an activity mode directly defined on it, this will be the enum value of that mode.
   * @return directActivityModeType
  **/
  @ApiModelProperty(value = "If the activity had an activity mode directly defined on it, this will be the enum value of that mode.")
  public DirectActivityModeTypeEnum getDirectActivityModeType() {
    return directActivityModeType;
  }

  public void setDirectActivityModeType(DirectActivityModeTypeEnum directActivityModeType) {
    this.directActivityModeType = directActivityModeType;
  }

  public DestinyDefinitionsDestinyActivityDefinition loadouts(List<DestinyDefinitionsDestinyActivityLoadoutRequirementSet> loadouts) {
    this.loadouts = loadouts;
    return this;
  }

  public DestinyDefinitionsDestinyActivityDefinition addLoadoutsItem(DestinyDefinitionsDestinyActivityLoadoutRequirementSet loadoutsItem) {
    if (this.loadouts == null) {
      this.loadouts = new ArrayList<>();
    }
    this.loadouts.add(loadoutsItem);
    return this;
  }

   /**
   * The set of all possible loadout requirements that could be active for this activity. Only one will be active at any given time, and you can discover which one through activity-associated data such as Milestones that have activity info on them.
   * @return loadouts
  **/
  @ApiModelProperty(value = "The set of all possible loadout requirements that could be active for this activity. Only one will be active at any given time, and you can discover which one through activity-associated data such as Milestones that have activity info on them.")
  public List<DestinyDefinitionsDestinyActivityLoadoutRequirementSet> getLoadouts() {
    return loadouts;
  }

  public void setLoadouts(List<DestinyDefinitionsDestinyActivityLoadoutRequirementSet> loadouts) {
    this.loadouts = loadouts;
  }

  public DestinyDefinitionsDestinyActivityDefinition activityModeHashes(List<Long> activityModeHashes) {
    this.activityModeHashes = activityModeHashes;
    return this;
  }

  public DestinyDefinitionsDestinyActivityDefinition addActivityModeHashesItem(Long activityModeHashesItem) {
    if (this.activityModeHashes == null) {
      this.activityModeHashes = new ArrayList<>();
    }
    this.activityModeHashes.add(activityModeHashesItem);
    return this;
  }

   /**
   * The hash identifiers for Activity Modes relevant to this activity.  Note that if this is a playlist, the specific playlist entry chosen will determine the actual activity modes that end up being relevant.
   * @return activityModeHashes
  **/
  @ApiModelProperty(value = "The hash identifiers for Activity Modes relevant to this activity.  Note that if this is a playlist, the specific playlist entry chosen will determine the actual activity modes that end up being relevant.")
  public List<Long> getActivityModeHashes() {
    return activityModeHashes;
  }

  public void setActivityModeHashes(List<Long> activityModeHashes) {
    this.activityModeHashes = activityModeHashes;
  }

  public DestinyDefinitionsDestinyActivityDefinition activityModeTypes(List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> activityModeTypes) {
    this.activityModeTypes = activityModeTypes;
    return this;
  }

  public DestinyDefinitionsDestinyActivityDefinition addActivityModeTypesItem(DestinyHistoricalStatsDefinitionsDestinyActivityModeType activityModeTypesItem) {
    if (this.activityModeTypes == null) {
      this.activityModeTypes = new ArrayList<>();
    }
    this.activityModeTypes.add(activityModeTypesItem);
    return this;
  }

   /**
   * The activity modes - if any - in enum form. Because we can&#39;t seem to escape the enums.
   * @return activityModeTypes
  **/
  @ApiModelProperty(value = "The activity modes - if any - in enum form. Because we can't seem to escape the enums.")
  public List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> getActivityModeTypes() {
    return activityModeTypes;
  }

  public void setActivityModeTypes(List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> activityModeTypes) {
    this.activityModeTypes = activityModeTypes;
  }

  public DestinyDefinitionsDestinyActivityDefinition isPvP(Boolean isPvP) {
    this.isPvP = isPvP;
    return this;
  }

   /**
   * If true, this activity is a PVP activity or playlist.
   * @return isPvP
  **/
  @ApiModelProperty(value = "If true, this activity is a PVP activity or playlist.")
  public Boolean isIsPvP() {
    return isPvP;
  }

  public void setIsPvP(Boolean isPvP) {
    this.isPvP = isPvP;
  }

  public DestinyDefinitionsDestinyActivityDefinition insertionPoints(List<DestinyDefinitionsDestinyActivityInsertionPointDefinition> insertionPoints) {
    this.insertionPoints = insertionPoints;
    return this;
  }

  public DestinyDefinitionsDestinyActivityDefinition addInsertionPointsItem(DestinyDefinitionsDestinyActivityInsertionPointDefinition insertionPointsItem) {
    if (this.insertionPoints == null) {
      this.insertionPoints = new ArrayList<>();
    }
    this.insertionPoints.add(insertionPointsItem);
    return this;
  }

   /**
   * The list of phases or points of entry into an activity, along with information we can use to determine their gating and availability.
   * @return insertionPoints
  **/
  @ApiModelProperty(value = "The list of phases or points of entry into an activity, along with information we can use to determine their gating and availability.")
  public List<DestinyDefinitionsDestinyActivityInsertionPointDefinition> getInsertionPoints() {
    return insertionPoints;
  }

  public void setInsertionPoints(List<DestinyDefinitionsDestinyActivityInsertionPointDefinition> insertionPoints) {
    this.insertionPoints = insertionPoints;
  }

  public DestinyDefinitionsDestinyActivityDefinition activityLocationMappings(List<DestinyConstantsDestinyEnvironmentLocationMapping> activityLocationMappings) {
    this.activityLocationMappings = activityLocationMappings;
    return this;
  }

  public DestinyDefinitionsDestinyActivityDefinition addActivityLocationMappingsItem(DestinyConstantsDestinyEnvironmentLocationMapping activityLocationMappingsItem) {
    if (this.activityLocationMappings == null) {
      this.activityLocationMappings = new ArrayList<>();
    }
    this.activityLocationMappings.add(activityLocationMappingsItem);
    return this;
  }

   /**
   * A list of location mappings that are affected by this activity. Pulled out of DestinyLocationDefinitions for our/your lookup convenience.
   * @return activityLocationMappings
  **/
  @ApiModelProperty(value = "A list of location mappings that are affected by this activity. Pulled out of DestinyLocationDefinitions for our/your lookup convenience.")
  public List<DestinyConstantsDestinyEnvironmentLocationMapping> getActivityLocationMappings() {
    return activityLocationMappings;
  }

  public void setActivityLocationMappings(List<DestinyConstantsDestinyEnvironmentLocationMapping> activityLocationMappings) {
    this.activityLocationMappings = activityLocationMappings;
  }

  public DestinyDefinitionsDestinyActivityDefinition hash(Long hash) {
    this.hash = hash;
    return this;
  }

   /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
  **/
  @ApiModelProperty(value = "The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.")
  public Long getHash() {
    return hash;
  }

  public void setHash(Long hash) {
    this.hash = hash;
  }

  public DestinyDefinitionsDestinyActivityDefinition index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * The index of the entity as it was found in the investment tables.
   * @return index
  **/
  @ApiModelProperty(value = "The index of the entity as it was found in the investment tables.")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public DestinyDefinitionsDestinyActivityDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

   /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
  **/
  @ApiModelProperty(value = "If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!")
  public Boolean isRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyActivityDefinition destinyDefinitionsDestinyActivityDefinition = (DestinyDefinitionsDestinyActivityDefinition) o;
    return Objects.equals(this.displayProperties, destinyDefinitionsDestinyActivityDefinition.displayProperties) &&
        Objects.equals(this.originalDisplayProperties, destinyDefinitionsDestinyActivityDefinition.originalDisplayProperties) &&
        Objects.equals(this.selectionScreenDisplayProperties, destinyDefinitionsDestinyActivityDefinition.selectionScreenDisplayProperties) &&
        Objects.equals(this.releaseIcon, destinyDefinitionsDestinyActivityDefinition.releaseIcon) &&
        Objects.equals(this.releaseTime, destinyDefinitionsDestinyActivityDefinition.releaseTime) &&
        Objects.equals(this.activityLevel, destinyDefinitionsDestinyActivityDefinition.activityLevel) &&
        Objects.equals(this.activityLightLevel, destinyDefinitionsDestinyActivityDefinition.activityLightLevel) &&
        Objects.equals(this.destinationHash, destinyDefinitionsDestinyActivityDefinition.destinationHash) &&
        Objects.equals(this.placeHash, destinyDefinitionsDestinyActivityDefinition.placeHash) &&
        Objects.equals(this.activityTypeHash, destinyDefinitionsDestinyActivityDefinition.activityTypeHash) &&
        Objects.equals(this.tier, destinyDefinitionsDestinyActivityDefinition.tier) &&
        Objects.equals(this.pgcrImage, destinyDefinitionsDestinyActivityDefinition.pgcrImage) &&
        Objects.equals(this.rewards, destinyDefinitionsDestinyActivityDefinition.rewards) &&
        Objects.equals(this.modifiers, destinyDefinitionsDestinyActivityDefinition.modifiers) &&
        Objects.equals(this.isPlaylist, destinyDefinitionsDestinyActivityDefinition.isPlaylist) &&
        Objects.equals(this.challenges, destinyDefinitionsDestinyActivityDefinition.challenges) &&
        Objects.equals(this.optionalUnlockStrings, destinyDefinitionsDestinyActivityDefinition.optionalUnlockStrings) &&
        Objects.equals(this.playlistItems, destinyDefinitionsDestinyActivityDefinition.playlistItems) &&
        Objects.equals(this.activityGraphList, destinyDefinitionsDestinyActivityDefinition.activityGraphList) &&
        Objects.equals(this.matchmaking, destinyDefinitionsDestinyActivityDefinition.matchmaking) &&
        Objects.equals(this.guidedGame, destinyDefinitionsDestinyActivityDefinition.guidedGame) &&
        Objects.equals(this.directActivityModeHash, destinyDefinitionsDestinyActivityDefinition.directActivityModeHash) &&
        Objects.equals(this.directActivityModeType, destinyDefinitionsDestinyActivityDefinition.directActivityModeType) &&
        Objects.equals(this.loadouts, destinyDefinitionsDestinyActivityDefinition.loadouts) &&
        Objects.equals(this.activityModeHashes, destinyDefinitionsDestinyActivityDefinition.activityModeHashes) &&
        Objects.equals(this.activityModeTypes, destinyDefinitionsDestinyActivityDefinition.activityModeTypes) &&
        Objects.equals(this.isPvP, destinyDefinitionsDestinyActivityDefinition.isPvP) &&
        Objects.equals(this.insertionPoints, destinyDefinitionsDestinyActivityDefinition.insertionPoints) &&
        Objects.equals(this.activityLocationMappings, destinyDefinitionsDestinyActivityDefinition.activityLocationMappings) &&
        Objects.equals(this.hash, destinyDefinitionsDestinyActivityDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsDestinyActivityDefinition.index) &&
        Objects.equals(this.redacted, destinyDefinitionsDestinyActivityDefinition.redacted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayProperties, originalDisplayProperties, selectionScreenDisplayProperties, releaseIcon, releaseTime, activityLevel, activityLightLevel, destinationHash, placeHash, activityTypeHash, tier, pgcrImage, rewards, modifiers, isPlaylist, challenges, optionalUnlockStrings, playlistItems, activityGraphList, matchmaking, guidedGame, directActivityModeHash, directActivityModeType, loadouts, activityModeHashes, activityModeTypes, isPvP, insertionPoints, activityLocationMappings, hash, index, redacted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyActivityDefinition {\n");
    
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    originalDisplayProperties: ").append(toIndentedString(originalDisplayProperties)).append("\n");
    sb.append("    selectionScreenDisplayProperties: ").append(toIndentedString(selectionScreenDisplayProperties)).append("\n");
    sb.append("    releaseIcon: ").append(toIndentedString(releaseIcon)).append("\n");
    sb.append("    releaseTime: ").append(toIndentedString(releaseTime)).append("\n");
    sb.append("    activityLevel: ").append(toIndentedString(activityLevel)).append("\n");
    sb.append("    activityLightLevel: ").append(toIndentedString(activityLightLevel)).append("\n");
    sb.append("    destinationHash: ").append(toIndentedString(destinationHash)).append("\n");
    sb.append("    placeHash: ").append(toIndentedString(placeHash)).append("\n");
    sb.append("    activityTypeHash: ").append(toIndentedString(activityTypeHash)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    pgcrImage: ").append(toIndentedString(pgcrImage)).append("\n");
    sb.append("    rewards: ").append(toIndentedString(rewards)).append("\n");
    sb.append("    modifiers: ").append(toIndentedString(modifiers)).append("\n");
    sb.append("    isPlaylist: ").append(toIndentedString(isPlaylist)).append("\n");
    sb.append("    challenges: ").append(toIndentedString(challenges)).append("\n");
    sb.append("    optionalUnlockStrings: ").append(toIndentedString(optionalUnlockStrings)).append("\n");
    sb.append("    playlistItems: ").append(toIndentedString(playlistItems)).append("\n");
    sb.append("    activityGraphList: ").append(toIndentedString(activityGraphList)).append("\n");
    sb.append("    matchmaking: ").append(toIndentedString(matchmaking)).append("\n");
    sb.append("    guidedGame: ").append(toIndentedString(guidedGame)).append("\n");
    sb.append("    directActivityModeHash: ").append(toIndentedString(directActivityModeHash)).append("\n");
    sb.append("    directActivityModeType: ").append(toIndentedString(directActivityModeType)).append("\n");
    sb.append("    loadouts: ").append(toIndentedString(loadouts)).append("\n");
    sb.append("    activityModeHashes: ").append(toIndentedString(activityModeHashes)).append("\n");
    sb.append("    activityModeTypes: ").append(toIndentedString(activityModeTypes)).append("\n");
    sb.append("    isPvP: ").append(toIndentedString(isPvP)).append("\n");
    sb.append("    insertionPoints: ").append(toIndentedString(insertionPoints)).append("\n");
    sb.append("    activityLocationMappings: ").append(toIndentedString(activityLocationMappings)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

