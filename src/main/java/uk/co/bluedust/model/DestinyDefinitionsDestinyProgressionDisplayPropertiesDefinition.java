/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-09-29T19:57:25.109+01:00")
public class DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition {
  @JsonProperty("displayUnitsName")
  private String displayUnitsName = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("icon")
  private String icon = null;

  @JsonProperty("hasIcon")
  private Boolean hasIcon = null;

  public DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition displayUnitsName(String displayUnitsName) {
    this.displayUnitsName = displayUnitsName;
    return this;
  }

   /**
   * When progressions show your \&quot;experience\&quot; gained, that bar has units (i.e. \&quot;Experience\&quot;, \&quot;Bad Dudes Snuffed Out\&quot;, whatever). This is the localized string for that unit of measurement.
   * @return displayUnitsName
  **/
  @ApiModelProperty(value = "When progressions show your \"experience\" gained, that bar has units (i.e. \"Experience\", \"Bad Dudes Snuffed Out\", whatever). This is the localized string for that unit of measurement.")
  public String getDisplayUnitsName() {
    return displayUnitsName;
  }

  public void setDisplayUnitsName(String displayUnitsName) {
    this.displayUnitsName = displayUnitsName;
  }

  public DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition icon(String icon) {
    this.icon = icon;
    return this;
  }

   /**
   * Note that \&quot;icon\&quot; is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition&#39;s icon was a big picture of a book.  But usually, it will be a small square image that you can use as... well, an icon.
   * @return icon
  **/
  @ApiModelProperty(value = "Note that \"icon\" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.  But usually, it will be a small square image that you can use as... well, an icon.")
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }

  public DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition hasIcon(Boolean hasIcon) {
    this.hasIcon = hasIcon;
    return this;
  }

   /**
   * Get hasIcon
   * @return hasIcon
  **/
  @ApiModelProperty(value = "")
  public Boolean isHasIcon() {
    return hasIcon;
  }

  public void setHasIcon(Boolean hasIcon) {
    this.hasIcon = hasIcon;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition destinyDefinitionsDestinyProgressionDisplayPropertiesDefinition = (DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition) o;
    return Objects.equals(this.displayUnitsName, destinyDefinitionsDestinyProgressionDisplayPropertiesDefinition.displayUnitsName) &&
        Objects.equals(this.description, destinyDefinitionsDestinyProgressionDisplayPropertiesDefinition.description) &&
        Objects.equals(this.name, destinyDefinitionsDestinyProgressionDisplayPropertiesDefinition.name) &&
        Objects.equals(this.icon, destinyDefinitionsDestinyProgressionDisplayPropertiesDefinition.icon) &&
        Objects.equals(this.hasIcon, destinyDefinitionsDestinyProgressionDisplayPropertiesDefinition.hasIcon);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayUnitsName, description, name, icon, hasIcon);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition {\n");
    
    sb.append("    displayUnitsName: ").append(toIndentedString(displayUnitsName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    hasIcon: ").append(toIndentedString(hasIcon)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

