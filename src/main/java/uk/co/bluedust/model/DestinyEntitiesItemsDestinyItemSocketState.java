/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import uk.co.bluedust.model.DestinyQuestsDestinyObjectiveProgress;
import uk.co.bluedust.model.DestinySocketsDestinyItemPlug;

/**
 * The status of a given item&#39;s socket. (which plug is inserted, if any: whether it is enabled, what \&quot;reusable\&quot; plugs can be inserted, etc...)  If I had it to do over, this would probably have a DestinyItemPlug representing the inserted item instead of most of these properties. :shrug:
 */
@ApiModel(description = "The status of a given item's socket. (which plug is inserted, if any: whether it is enabled, what \"reusable\" plugs can be inserted, etc...)  If I had it to do over, this would probably have a DestinyItemPlug representing the inserted item instead of most of these properties. :shrug:")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-09-29T19:57:25.109+01:00")
public class DestinyEntitiesItemsDestinyItemSocketState {
  @JsonProperty("plugHash")
  private Integer plugHash = null;

  @JsonProperty("isEnabled")
  private Boolean isEnabled = null;

  @JsonProperty("isVisible")
  private Boolean isVisible = null;

  @JsonProperty("enableFailIndexes")
  private List<Integer> enableFailIndexes = null;

  @JsonProperty("reusablePlugHashes")
  private List<Integer> reusablePlugHashes = null;

  @JsonProperty("plugObjectives")
  private List<DestinyQuestsDestinyObjectiveProgress> plugObjectives = null;

  @JsonProperty("reusablePlugs")
  private List<DestinySocketsDestinyItemPlug> reusablePlugs = null;

  public DestinyEntitiesItemsDestinyItemSocketState plugHash(Integer plugHash) {
    this.plugHash = plugHash;
    return this;
  }

   /**
   * The currently active plug, if any.  Note that, because all plugs are statically defined, its effect on stats and perks can be statically determined using the plug item&#39;s definition. The stats and perks can be taken at face value on the plug item as the stats and perks it will provide to the user/item.
   * @return plugHash
  **/
  @ApiModelProperty(value = "The currently active plug, if any.  Note that, because all plugs are statically defined, its effect on stats and perks can be statically determined using the plug item's definition. The stats and perks can be taken at face value on the plug item as the stats and perks it will provide to the user/item.")
  public Integer getPlugHash() {
    return plugHash;
  }

  public void setPlugHash(Integer plugHash) {
    this.plugHash = plugHash;
  }

  public DestinyEntitiesItemsDestinyItemSocketState isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * Even if a plug is inserted, it doesn&#39;t mean it&#39;s enabled.  This flag indicates whether the plug is active and providing its benefits.
   * @return isEnabled
  **/
  @ApiModelProperty(value = "Even if a plug is inserted, it doesn't mean it's enabled.  This flag indicates whether the plug is active and providing its benefits.")
  public Boolean isIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }

  public DestinyEntitiesItemsDestinyItemSocketState isVisible(Boolean isVisible) {
    this.isVisible = isVisible;
    return this;
  }

   /**
   * A plug may theoretically provide benefits but not be visible - for instance, some older items use a plug&#39;s damage type perk to modify their own damage type. These, though they are not visible, still affect the item. This field indicates that state.  An invisible plug, while it provides benefits if it is Enabled, cannot be directly modified by the user.
   * @return isVisible
  **/
  @ApiModelProperty(value = "A plug may theoretically provide benefits but not be visible - for instance, some older items use a plug's damage type perk to modify their own damage type. These, though they are not visible, still affect the item. This field indicates that state.  An invisible plug, while it provides benefits if it is Enabled, cannot be directly modified by the user.")
  public Boolean isIsVisible() {
    return isVisible;
  }

  public void setIsVisible(Boolean isVisible) {
    this.isVisible = isVisible;
  }

  public DestinyEntitiesItemsDestinyItemSocketState enableFailIndexes(List<Integer> enableFailIndexes) {
    this.enableFailIndexes = enableFailIndexes;
    return this;
  }

  public DestinyEntitiesItemsDestinyItemSocketState addEnableFailIndexesItem(Integer enableFailIndexesItem) {
    if (this.enableFailIndexes == null) {
      this.enableFailIndexes = new ArrayList<>();
    }
    this.enableFailIndexes.add(enableFailIndexesItem);
    return this;
  }

   /**
   * If a plug is inserted but not enabled, this will be populated with indexes into the plug item definition&#39;s plug.enabledRules property, so that you can show the reasons why it is not enabled.
   * @return enableFailIndexes
  **/
  @ApiModelProperty(value = "If a plug is inserted but not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.")
  public List<Integer> getEnableFailIndexes() {
    return enableFailIndexes;
  }

  public void setEnableFailIndexes(List<Integer> enableFailIndexes) {
    this.enableFailIndexes = enableFailIndexes;
  }

  public DestinyEntitiesItemsDestinyItemSocketState reusablePlugHashes(List<Integer> reusablePlugHashes) {
    this.reusablePlugHashes = reusablePlugHashes;
    return this;
  }

  public DestinyEntitiesItemsDestinyItemSocketState addReusablePlugHashesItem(Integer reusablePlugHashesItem) {
    if (this.reusablePlugHashes == null) {
      this.reusablePlugHashes = new ArrayList<>();
    }
    this.reusablePlugHashes.add(reusablePlugHashesItem);
    return this;
  }

   /**
   * If the item supports reusable plugs, this is the list of plug item hashes that are currently allowed to be used for this socket. See the \&quot;reusablePlugs\&quot; property, which has rendered this obsolete, for more information.
   * @return reusablePlugHashes
  **/
  @ApiModelProperty(value = "If the item supports reusable plugs, this is the list of plug item hashes that are currently allowed to be used for this socket. See the \"reusablePlugs\" property, which has rendered this obsolete, for more information.")
  public List<Integer> getReusablePlugHashes() {
    return reusablePlugHashes;
  }

  public void setReusablePlugHashes(List<Integer> reusablePlugHashes) {
    this.reusablePlugHashes = reusablePlugHashes;
  }

  public DestinyEntitiesItemsDestinyItemSocketState plugObjectives(List<DestinyQuestsDestinyObjectiveProgress> plugObjectives) {
    this.plugObjectives = plugObjectives;
    return this;
  }

  public DestinyEntitiesItemsDestinyItemSocketState addPlugObjectivesItem(DestinyQuestsDestinyObjectiveProgress plugObjectivesItem) {
    if (this.plugObjectives == null) {
      this.plugObjectives = new ArrayList<>();
    }
    this.plugObjectives.add(plugObjectivesItem);
    return this;
  }

   /**
   * Sometimes, Plugs may have objectives: generally, these are used for flavor and display purposes. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item&#39;s data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition&#39;s progressDescription property. Refer to the plug&#39;s itemHash and objective property for more information if you would like to display even more data.
   * @return plugObjectives
  **/
  @ApiModelProperty(value = "Sometimes, Plugs may have objectives: generally, these are used for flavor and display purposes. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item's data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition's progressDescription property. Refer to the plug's itemHash and objective property for more information if you would like to display even more data.")
  public List<DestinyQuestsDestinyObjectiveProgress> getPlugObjectives() {
    return plugObjectives;
  }

  public void setPlugObjectives(List<DestinyQuestsDestinyObjectiveProgress> plugObjectives) {
    this.plugObjectives = plugObjectives;
  }

  public DestinyEntitiesItemsDestinyItemSocketState reusablePlugs(List<DestinySocketsDestinyItemPlug> reusablePlugs) {
    this.reusablePlugs = reusablePlugs;
    return this;
  }

  public DestinyEntitiesItemsDestinyItemSocketState addReusablePlugsItem(DestinySocketsDestinyItemPlug reusablePlugsItem) {
    if (this.reusablePlugs == null) {
      this.reusablePlugs = new ArrayList<>();
    }
    this.reusablePlugs.add(reusablePlugsItem);
    return this;
  }

   /**
   * If the item supports reusable plugs, this is the list of plugs that are allowed to be used for the socket, and any relevant information about whether they are \&quot;enabled\&quot;, whether they are allowed to be inserted, and any other information such as objectives.  A Reusable Plug is a plug that you can always insert into this socket as long as its insertion rules are passed, regardless of whether or not you have the plug in your inventory. An example of it failing an insertion rule would be if it has an Objective that needs to be completed before it can be inserted, and that objective hasn&#39;t been completed yet.  In practice, a socket will *either* have reusable plugs *or* it will allow for plugs in your inventory to be inserted. See DestinyInventoryItemDefinition.socket for more info.
   * @return reusablePlugs
  **/
  @ApiModelProperty(value = "If the item supports reusable plugs, this is the list of plugs that are allowed to be used for the socket, and any relevant information about whether they are \"enabled\", whether they are allowed to be inserted, and any other information such as objectives.  A Reusable Plug is a plug that you can always insert into this socket as long as its insertion rules are passed, regardless of whether or not you have the plug in your inventory. An example of it failing an insertion rule would be if it has an Objective that needs to be completed before it can be inserted, and that objective hasn't been completed yet.  In practice, a socket will *either* have reusable plugs *or* it will allow for plugs in your inventory to be inserted. See DestinyInventoryItemDefinition.socket for more info.")
  public List<DestinySocketsDestinyItemPlug> getReusablePlugs() {
    return reusablePlugs;
  }

  public void setReusablePlugs(List<DestinySocketsDestinyItemPlug> reusablePlugs) {
    this.reusablePlugs = reusablePlugs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyEntitiesItemsDestinyItemSocketState destinyEntitiesItemsDestinyItemSocketState = (DestinyEntitiesItemsDestinyItemSocketState) o;
    return Objects.equals(this.plugHash, destinyEntitiesItemsDestinyItemSocketState.plugHash) &&
        Objects.equals(this.isEnabled, destinyEntitiesItemsDestinyItemSocketState.isEnabled) &&
        Objects.equals(this.isVisible, destinyEntitiesItemsDestinyItemSocketState.isVisible) &&
        Objects.equals(this.enableFailIndexes, destinyEntitiesItemsDestinyItemSocketState.enableFailIndexes) &&
        Objects.equals(this.reusablePlugHashes, destinyEntitiesItemsDestinyItemSocketState.reusablePlugHashes) &&
        Objects.equals(this.plugObjectives, destinyEntitiesItemsDestinyItemSocketState.plugObjectives) &&
        Objects.equals(this.reusablePlugs, destinyEntitiesItemsDestinyItemSocketState.reusablePlugs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(plugHash, isEnabled, isVisible, enableFailIndexes, reusablePlugHashes, plugObjectives, reusablePlugs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyEntitiesItemsDestinyItemSocketState {\n");
    
    sb.append("    plugHash: ").append(toIndentedString(plugHash)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    isVisible: ").append(toIndentedString(isVisible)).append("\n");
    sb.append("    enableFailIndexes: ").append(toIndentedString(enableFailIndexes)).append("\n");
    sb.append("    reusablePlugHashes: ").append(toIndentedString(reusablePlugHashes)).append("\n");
    sb.append("    plugObjectives: ").append(toIndentedString(plugObjectives)).append("\n");
    sb.append("    reusablePlugs: ").append(toIndentedString(reusablePlugs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

