/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Represents a \&quot;raw\&quot; investment stat, before calculated stats are calculated and before any DestinyStatGroupDefinition is applied to transform the stat into something closer to what you see in-game.  Because these won&#39;t match what you see in-game, consider carefully whether you really want to use these stats. I have left them in case someone can do something useful or interesting with the pre-processed statistics.
 */
@ApiModel(description = "Represents a \"raw\" investment stat, before calculated stats are calculated and before any DestinyStatGroupDefinition is applied to transform the stat into something closer to what you see in-game.  Because these won't match what you see in-game, consider carefully whether you really want to use these stats. I have left them in case someone can do something useful or interesting with the pre-processed statistics.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-04T16:50:06.922Z")
public class DestinyDefinitionsDestinyItemInvestmentStatDefinition {
  @JsonProperty("statTypeHash")
  private Integer statTypeHash = null;

  @JsonProperty("value")
  private Integer value = null;

  @JsonProperty("isConditionallyActive")
  private Boolean isConditionallyActive = null;

  public DestinyDefinitionsDestinyItemInvestmentStatDefinition statTypeHash(Integer statTypeHash) {
    this.statTypeHash = statTypeHash;
    return this;
  }

   /**
   * The hash identifier for the DestinyStatDefinition defining this stat.
   * @return statTypeHash
  **/
  @ApiModelProperty(value = "The hash identifier for the DestinyStatDefinition defining this stat.")
  public Integer getStatTypeHash() {
    return statTypeHash;
  }

  public void setStatTypeHash(Integer statTypeHash) {
    this.statTypeHash = statTypeHash;
  }

  public DestinyDefinitionsDestinyItemInvestmentStatDefinition value(Integer value) {
    this.value = value;
    return this;
  }

   /**
   * The raw \&quot;Investment\&quot; value for the stat, before transformations are performed to turn this raw stat into stats that are displayed in the game UI.
   * @return value
  **/
  @ApiModelProperty(value = "The raw \"Investment\" value for the stat, before transformations are performed to turn this raw stat into stats that are displayed in the game UI.")
  public Integer getValue() {
    return value;
  }

  public void setValue(Integer value) {
    this.value = value;
  }

  public DestinyDefinitionsDestinyItemInvestmentStatDefinition isConditionallyActive(Boolean isConditionallyActive) {
    this.isConditionallyActive = isConditionallyActive;
    return this;
  }

   /**
   * If this is true, the stat will only be applied on the item in certain game state conditions, and we can&#39;t know statically whether or not this stat will be applied. Check the \&quot;live\&quot; API data instead for whether this value is being applied on a specific instance of the item in question, and you can use this to decide whether you want to show the stat on the generic view of the item, or whether you want to show some kind of caveat or warning about the stat value being conditional on game state.
   * @return isConditionallyActive
  **/
  @ApiModelProperty(value = "If this is true, the stat will only be applied on the item in certain game state conditions, and we can't know statically whether or not this stat will be applied. Check the \"live\" API data instead for whether this value is being applied on a specific instance of the item in question, and you can use this to decide whether you want to show the stat on the generic view of the item, or whether you want to show some kind of caveat or warning about the stat value being conditional on game state.")
  public Boolean isIsConditionallyActive() {
    return isConditionallyActive;
  }

  public void setIsConditionallyActive(Boolean isConditionallyActive) {
    this.isConditionallyActive = isConditionallyActive;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyItemInvestmentStatDefinition destinyDefinitionsDestinyItemInvestmentStatDefinition = (DestinyDefinitionsDestinyItemInvestmentStatDefinition) o;
    return Objects.equals(this.statTypeHash, destinyDefinitionsDestinyItemInvestmentStatDefinition.statTypeHash) &&
        Objects.equals(this.value, destinyDefinitionsDestinyItemInvestmentStatDefinition.value) &&
        Objects.equals(this.isConditionallyActive, destinyDefinitionsDestinyItemInvestmentStatDefinition.isConditionallyActive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statTypeHash, value, isConditionallyActive);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyItemInvestmentStatDefinition {\n");
    
    sb.append("    statTypeHash: ").append(toIndentedString(statTypeHash)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    isConditionallyActive: ").append(toIndentedString(isConditionallyActive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

