/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Stat Groups (DestinyStatGroupDefinition) has the ability to override the localized text associated with stats that are to be shown on the items with which they are associated.  This defines a specific overridden stat. You could theoretically check these before rendering your stat UI, and for each stat that has an override show these displayProperties instead of those on the DestinyStatDefinition.  Or you could be like us, and skip that for now because the game has yet to actually use this feature. But know that it&#39;s here, waiting for a resilliant young designer to take up the mantle and make us all look foolish by showing the wrong name for stats.  Note that, if this gets used, the override will apply only to items using the overriding Stat Group. Other items will still show the default stat&#39;s name/description.
 */
@ApiModel(description = "Stat Groups (DestinyStatGroupDefinition) has the ability to override the localized text associated with stats that are to be shown on the items with which they are associated.  This defines a specific overridden stat. You could theoretically check these before rendering your stat UI, and for each stat that has an override show these displayProperties instead of those on the DestinyStatDefinition.  Or you could be like us, and skip that for now because the game has yet to actually use this feature. But know that it's here, waiting for a resilliant young designer to take up the mantle and make us all look foolish by showing the wrong name for stats.  Note that, if this gets used, the override will apply only to items using the overriding Stat Group. Other items will still show the default stat's name/description.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-09-29T19:57:25.109+01:00")
public class DestinyDefinitionsDestinyStatOverrideDefinition {
  @JsonProperty("statHash")
  private Integer statHash = null;

  @JsonProperty("displayProperties")
  private Object displayProperties = null;

  public DestinyDefinitionsDestinyStatOverrideDefinition statHash(Integer statHash) {
    this.statHash = statHash;
    return this;
  }

   /**
   * The hash identifier of the stat whose display properties are being overridden.
   * @return statHash
  **/
  @ApiModelProperty(value = "The hash identifier of the stat whose display properties are being overridden.")
  public Integer getStatHash() {
    return statHash;
  }

  public void setStatHash(Integer statHash) {
    this.statHash = statHash;
  }

  public DestinyDefinitionsDestinyStatOverrideDefinition displayProperties(Object displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

   /**
   * The display properties to show instead of the base DestinyStatDefinition display properties.
   * @return displayProperties
  **/
  @ApiModelProperty(value = "The display properties to show instead of the base DestinyStatDefinition display properties.")
  public Object getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(Object displayProperties) {
    this.displayProperties = displayProperties;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyStatOverrideDefinition destinyDefinitionsDestinyStatOverrideDefinition = (DestinyDefinitionsDestinyStatOverrideDefinition) o;
    return Objects.equals(this.statHash, destinyDefinitionsDestinyStatOverrideDefinition.statHash) &&
        Objects.equals(this.displayProperties, destinyDefinitionsDestinyStatOverrideDefinition.displayProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statHash, displayProperties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyStatOverrideDefinition {\n");
    
    sb.append("    statHash: ").append(toIndentedString(statHash)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

