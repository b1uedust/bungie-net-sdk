/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Perks are modifiers to a character or item that can be applied situationally.  - Perks determine a weapons&#39; damage type.  - Perks put the Mods in Modifiers (they are literally the entity that bestows the Sandbox benefit for whatever fluff text about the modifier in the Socket, Plug or Talent Node)  - Perks are applied for unique alterations of state in Objectives  Anyways, I&#39;m sure you can see why perks are so interesting.  What Perks often don&#39;t have is human readable information, so we attempt to reverse engineer that by pulling that data from places that uniquely refer to these perks: namely, Talent Nodes and Plugs. That only gives us a subset of perks that are human readable, but those perks are the ones people generally care about anyways. The others are left as a mystery, their true purpose mostly unknown and undocumented.
 */
@ApiModel(description = "Perks are modifiers to a character or item that can be applied situationally.  - Perks determine a weapons' damage type.  - Perks put the Mods in Modifiers (they are literally the entity that bestows the Sandbox benefit for whatever fluff text about the modifier in the Socket, Plug or Talent Node)  - Perks are applied for unique alterations of state in Objectives  Anyways, I'm sure you can see why perks are so interesting.  What Perks often don't have is human readable information, so we attempt to reverse engineer that by pulling that data from places that uniquely refer to these perks: namely, Talent Nodes and Plugs. That only gives us a subset of perks that are human readable, but those perks are the ones people generally care about anyways. The others are left as a mystery, their true purpose mostly unknown and undocumented.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-04T16:50:06.922Z")
public class DestinyDefinitionsDestinySandboxPerkDefinition {
  @JsonProperty("displayProperties")
  private Object displayProperties = null;

  @JsonProperty("perkIdentifier")
  private String perkIdentifier = null;

  @JsonProperty("isDisplayable")
  private Boolean isDisplayable = null;

  @JsonProperty("damageType")
  private Object damageType = null;

  @JsonProperty("damageTypeHash")
  private Integer damageTypeHash = null;

  @JsonProperty("perkGroups")
  private Object perkGroups = null;

  @JsonProperty("hash")
  private Integer hash = null;

  @JsonProperty("index")
  private Integer index = null;

  @JsonProperty("redacted")
  private Boolean redacted = null;

  public DestinyDefinitionsDestinySandboxPerkDefinition displayProperties(Object displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

   /**
   * These display properties are by no means guaranteed to be populated. Usually when it is, it&#39;s only because we back-filled them with the displayProperties of some Talent Node or Plug item that happened to be uniquely providing that perk.
   * @return displayProperties
  **/
  @ApiModelProperty(value = "These display properties are by no means guaranteed to be populated. Usually when it is, it's only because we back-filled them with the displayProperties of some Talent Node or Plug item that happened to be uniquely providing that perk.")
  public Object getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(Object displayProperties) {
    this.displayProperties = displayProperties;
  }

  public DestinyDefinitionsDestinySandboxPerkDefinition perkIdentifier(String perkIdentifier) {
    this.perkIdentifier = perkIdentifier;
    return this;
  }

   /**
   * The string identifier for the perk.
   * @return perkIdentifier
  **/
  @ApiModelProperty(value = "The string identifier for the perk.")
  public String getPerkIdentifier() {
    return perkIdentifier;
  }

  public void setPerkIdentifier(String perkIdentifier) {
    this.perkIdentifier = perkIdentifier;
  }

  public DestinyDefinitionsDestinySandboxPerkDefinition isDisplayable(Boolean isDisplayable) {
    this.isDisplayable = isDisplayable;
    return this;
  }

   /**
   * If true, you can actually show the perk in the UI. Otherwise, it doesn&#39;t have useful player-facing information.
   * @return isDisplayable
  **/
  @ApiModelProperty(value = "If true, you can actually show the perk in the UI. Otherwise, it doesn't have useful player-facing information.")
  public Boolean isIsDisplayable() {
    return isDisplayable;
  }

  public void setIsDisplayable(Boolean isDisplayable) {
    this.isDisplayable = isDisplayable;
  }

  public DestinyDefinitionsDestinySandboxPerkDefinition damageType(Object damageType) {
    this.damageType = damageType;
    return this;
  }

   /**
   * If this perk grants a damage type to a weapon, the damage type will be defined here.  Unless you have a compelling reason to use this enum value, use the damageTypeHash instead to look up the actual DestinyDamageTypeDefinition.
   * @return damageType
  **/
  @ApiModelProperty(value = "If this perk grants a damage type to a weapon, the damage type will be defined here.  Unless you have a compelling reason to use this enum value, use the damageTypeHash instead to look up the actual DestinyDamageTypeDefinition.")
  public Object getDamageType() {
    return damageType;
  }

  public void setDamageType(Object damageType) {
    this.damageType = damageType;
  }

  public DestinyDefinitionsDestinySandboxPerkDefinition damageTypeHash(Integer damageTypeHash) {
    this.damageTypeHash = damageTypeHash;
    return this;
  }

   /**
   * The hash identifier for looking up the DestinyDamageTypeDefinition, if this perk has a damage type.  This is preferred over using the damageType enumeration value, which has been left purely because it is occasionally convenient.
   * @return damageTypeHash
  **/
  @ApiModelProperty(value = "The hash identifier for looking up the DestinyDamageTypeDefinition, if this perk has a damage type.  This is preferred over using the damageType enumeration value, which has been left purely because it is occasionally convenient.")
  public Integer getDamageTypeHash() {
    return damageTypeHash;
  }

  public void setDamageTypeHash(Integer damageTypeHash) {
    this.damageTypeHash = damageTypeHash;
  }

  public DestinyDefinitionsDestinySandboxPerkDefinition perkGroups(Object perkGroups) {
    this.perkGroups = perkGroups;
    return this;
  }

   /**
   * An old holdover from the original Armory, this was an attempt to group perks by functionality.  It is as yet unpopulated, and there will be quite a bit of work needed to restore it to its former working order.
   * @return perkGroups
  **/
  @ApiModelProperty(value = "An old holdover from the original Armory, this was an attempt to group perks by functionality.  It is as yet unpopulated, and there will be quite a bit of work needed to restore it to its former working order.")
  public Object getPerkGroups() {
    return perkGroups;
  }

  public void setPerkGroups(Object perkGroups) {
    this.perkGroups = perkGroups;
  }

  public DestinyDefinitionsDestinySandboxPerkDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

   /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
  **/
  @ApiModelProperty(value = "The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.")
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }

  public DestinyDefinitionsDestinySandboxPerkDefinition index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * The index of the entity as it was found in the investment tables.
   * @return index
  **/
  @ApiModelProperty(value = "The index of the entity as it was found in the investment tables.")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public DestinyDefinitionsDestinySandboxPerkDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

   /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
  **/
  @ApiModelProperty(value = "If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!")
  public Boolean isRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinySandboxPerkDefinition destinyDefinitionsDestinySandboxPerkDefinition = (DestinyDefinitionsDestinySandboxPerkDefinition) o;
    return Objects.equals(this.displayProperties, destinyDefinitionsDestinySandboxPerkDefinition.displayProperties) &&
        Objects.equals(this.perkIdentifier, destinyDefinitionsDestinySandboxPerkDefinition.perkIdentifier) &&
        Objects.equals(this.isDisplayable, destinyDefinitionsDestinySandboxPerkDefinition.isDisplayable) &&
        Objects.equals(this.damageType, destinyDefinitionsDestinySandboxPerkDefinition.damageType) &&
        Objects.equals(this.damageTypeHash, destinyDefinitionsDestinySandboxPerkDefinition.damageTypeHash) &&
        Objects.equals(this.perkGroups, destinyDefinitionsDestinySandboxPerkDefinition.perkGroups) &&
        Objects.equals(this.hash, destinyDefinitionsDestinySandboxPerkDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsDestinySandboxPerkDefinition.index) &&
        Objects.equals(this.redacted, destinyDefinitionsDestinySandboxPerkDefinition.redacted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayProperties, perkIdentifier, isDisplayable, damageType, damageTypeHash, perkGroups, hash, index, redacted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinySandboxPerkDefinition {\n");
    
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    perkIdentifier: ").append(toIndentedString(perkIdentifier)).append("\n");
    sb.append("    isDisplayable: ").append(toIndentedString(isDisplayable)).append("\n");
    sb.append("    damageType: ").append(toIndentedString(damageType)).append("\n");
    sb.append("    damageTypeHash: ").append(toIndentedString(damageTypeHash)).append("\n");
    sb.append("    perkGroups: ").append(toIndentedString(perkGroups)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

