/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import uk.co.bluedust.model.DestinyDyeReference;

/**
 * Only really useful if you&#39;re attempting to render the character&#39;s current appearance in 3D, this returns a bare minimum of information, pre-aggregated, that you&#39;ll need to perform that rendering. Note that you need to combine this with other 3D assets and data from our servers.  Examine the Javascript returned by https://bungie.net/sharedbundle/spasm to see how we use this data, but be warned: the rabbit hole goes pretty deep.
 */
@ApiModel(description = "Only really useful if you're attempting to render the character's current appearance in 3D, this returns a bare minimum of information, pre-aggregated, that you'll need to perform that rendering. Note that you need to combine this with other 3D assets and data from our servers.  Examine the Javascript returned by https://bungie.net/sharedbundle/spasm to see how we use this data, but be warned: the rabbit hole goes pretty deep.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-04T23:34:27.728Z")
public class DestinyEntitiesCharactersDestinyCharacterRenderComponent {
  @JsonProperty("customDyes")
  private List<DestinyDyeReference> customDyes = null;

  @JsonProperty("customization")
  private Object customization = null;

  @JsonProperty("peerView")
  private Object peerView = null;

  public DestinyEntitiesCharactersDestinyCharacterRenderComponent customDyes(List<DestinyDyeReference> customDyes) {
    this.customDyes = customDyes;
    return this;
  }

  public DestinyEntitiesCharactersDestinyCharacterRenderComponent addCustomDyesItem(DestinyDyeReference customDyesItem) {
    if (this.customDyes == null) {
      this.customDyes = new ArrayList<>();
    }
    this.customDyes.add(customDyesItem);
    return this;
  }

   /**
   * Custom dyes, calculated by iterating over the character&#39;s equipped items. Useful for pre-fetching all of the dye data needed from our server.
   * @return customDyes
  **/
  @ApiModelProperty(value = "Custom dyes, calculated by iterating over the character's equipped items. Useful for pre-fetching all of the dye data needed from our server.")
  public List<DestinyDyeReference> getCustomDyes() {
    return customDyes;
  }

  public void setCustomDyes(List<DestinyDyeReference> customDyes) {
    this.customDyes = customDyes;
  }

  public DestinyEntitiesCharactersDestinyCharacterRenderComponent customization(Object customization) {
    this.customization = customization;
    return this;
  }

   /**
   * This is actually something that Spasm.js *doesn&#39;t* do right now, and that we don&#39;t return assets for yet. This is the data about what character customization options you picked. You can combine this with DestinyCharacterCustomizationOptionDefinition to show some cool info, and hopefully someday to actually render a user&#39;s face in 3D. We&#39;ll see if we ever end up with time for that.
   * @return customization
  **/
  @ApiModelProperty(value = "This is actually something that Spasm.js *doesn't* do right now, and that we don't return assets for yet. This is the data about what character customization options you picked. You can combine this with DestinyCharacterCustomizationOptionDefinition to show some cool info, and hopefully someday to actually render a user's face in 3D. We'll see if we ever end up with time for that.")
  public Object getCustomization() {
    return customization;
  }

  public void setCustomization(Object customization) {
    this.customization = customization;
  }

  public DestinyEntitiesCharactersDestinyCharacterRenderComponent peerView(Object peerView) {
    this.peerView = peerView;
    return this;
  }

   /**
   * A minimal view of:  - Equipped items  - The rendering-related custom options on those equipped items  Combined, that should be enough to render all of the items on the equipped character.
   * @return peerView
  **/
  @ApiModelProperty(value = "A minimal view of:  - Equipped items  - The rendering-related custom options on those equipped items  Combined, that should be enough to render all of the items on the equipped character.")
  public Object getPeerView() {
    return peerView;
  }

  public void setPeerView(Object peerView) {
    this.peerView = peerView;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyEntitiesCharactersDestinyCharacterRenderComponent destinyEntitiesCharactersDestinyCharacterRenderComponent = (DestinyEntitiesCharactersDestinyCharacterRenderComponent) o;
    return Objects.equals(this.customDyes, destinyEntitiesCharactersDestinyCharacterRenderComponent.customDyes) &&
        Objects.equals(this.customization, destinyEntitiesCharactersDestinyCharacterRenderComponent.customization) &&
        Objects.equals(this.peerView, destinyEntitiesCharactersDestinyCharacterRenderComponent.peerView);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customDyes, customization, peerView);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyEntitiesCharactersDestinyCharacterRenderComponent {\n");
    
    sb.append("    customDyes: ").append(toIndentedString(customDyes)).append("\n");
    sb.append("    customization: ").append(toIndentedString(customization)).append("\n");
    sb.append("    peerView: ").append(toIndentedString(peerView)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

