/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * If an item is \&quot;instanced\&quot;, this will contain information about the item&#39;s instance that doesn&#39;t fit easily into other components. One might say this is the \&quot;essential\&quot; instance data for the item.  Items are instanced if they require information or state that can vary. For instance, weapons are Instanced: they are given a unique identifier, uniquely generated stats, and can have their properties altered. Non-instanced items have none of these things: for instance, Glimmer has no unique properties aside from how much of it you own.  You can tell from an item&#39;s definition whether it will be instanced or not by looking at the DestinyInventoryItemDefinition&#39;s definition.inventory.isInstanceItem property.
 */
@ApiModel(description = "If an item is \"instanced\", this will contain information about the item's instance that doesn't fit easily into other components. One might say this is the \"essential\" instance data for the item.  Items are instanced if they require information or state that can vary. For instance, weapons are Instanced: they are given a unique identifier, uniquely generated stats, and can have their properties altered. Non-instanced items have none of these things: for instance, Glimmer has no unique properties aside from how much of it you own.  You can tell from an item's definition whether it will be instanced or not by looking at the DestinyInventoryItemDefinition's definition.inventory.isInstanceItem property.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-12-08T21:00:47.497Z")
public class DestinyEntitiesItemsDestinyItemInstanceComponent {
  @JsonProperty("damageType")
  private Object damageType = null;

  @JsonProperty("damageTypeHash")
  private Long damageTypeHash = null;

  @JsonProperty("primaryStat")
  private Object primaryStat = null;

  @JsonProperty("itemLevel")
  private Integer itemLevel = null;

  @JsonProperty("quality")
  private Integer quality = null;

  @JsonProperty("isEquipped")
  private Boolean isEquipped = null;

  @JsonProperty("canEquip")
  private Boolean canEquip = null;

  @JsonProperty("equipRequiredLevel")
  private Integer equipRequiredLevel = null;

  @JsonProperty("unlockHashesRequiredToEquip")
  private List<Long> unlockHashesRequiredToEquip = null;

  @JsonProperty("cannotEquipReason")
  private Object cannotEquipReason = null;

  public DestinyEntitiesItemsDestinyItemInstanceComponent damageType(Object damageType) {
    this.damageType = damageType;
    return this;
  }

   /**
   * If the item has a damage type, this is the item&#39;s current damage type.
   * @return damageType
  **/
  @ApiModelProperty(value = "If the item has a damage type, this is the item's current damage type.")
  public Object getDamageType() {
    return damageType;
  }

  public void setDamageType(Object damageType) {
    this.damageType = damageType;
  }

  public DestinyEntitiesItemsDestinyItemInstanceComponent damageTypeHash(Long damageTypeHash) {
    this.damageTypeHash = damageTypeHash;
    return this;
  }

   /**
   * The current damage type&#39;s hash, so you can look up localized info and icons for it.
   * @return damageTypeHash
  **/
  @ApiModelProperty(value = "The current damage type's hash, so you can look up localized info and icons for it.")
  public Long getDamageTypeHash() {
    return damageTypeHash;
  }

  public void setDamageTypeHash(Long damageTypeHash) {
    this.damageTypeHash = damageTypeHash;
  }

  public DestinyEntitiesItemsDestinyItemInstanceComponent primaryStat(Object primaryStat) {
    this.primaryStat = primaryStat;
    return this;
  }

   /**
   * The item stat that we consider to be \&quot;primary\&quot; for the item. For instance, this would be \&quot;Attack\&quot; for Weapons or \&quot;Defense\&quot; for armor.
   * @return primaryStat
  **/
  @ApiModelProperty(value = "The item stat that we consider to be \"primary\" for the item. For instance, this would be \"Attack\" for Weapons or \"Defense\" for armor.")
  public Object getPrimaryStat() {
    return primaryStat;
  }

  public void setPrimaryStat(Object primaryStat) {
    this.primaryStat = primaryStat;
  }

  public DestinyEntitiesItemsDestinyItemInstanceComponent itemLevel(Integer itemLevel) {
    this.itemLevel = itemLevel;
    return this;
  }

   /**
   * The Item&#39;s \&quot;Level\&quot; has the most significant bearing on its stats, such as Light and Power.
   * @return itemLevel
  **/
  @ApiModelProperty(value = "The Item's \"Level\" has the most significant bearing on its stats, such as Light and Power.")
  public Integer getItemLevel() {
    return itemLevel;
  }

  public void setItemLevel(Integer itemLevel) {
    this.itemLevel = itemLevel;
  }

  public DestinyEntitiesItemsDestinyItemInstanceComponent quality(Integer quality) {
    this.quality = quality;
    return this;
  }

   /**
   * The \&quot;Quality\&quot; of the item has a lesser - but still impactful - bearing on stats like Light and Power.
   * @return quality
  **/
  @ApiModelProperty(value = "The \"Quality\" of the item has a lesser - but still impactful - bearing on stats like Light and Power.")
  public Integer getQuality() {
    return quality;
  }

  public void setQuality(Integer quality) {
    this.quality = quality;
  }

  public DestinyEntitiesItemsDestinyItemInstanceComponent isEquipped(Boolean isEquipped) {
    this.isEquipped = isEquipped;
    return this;
  }

   /**
   * Is the item currently equipped on the given character?
   * @return isEquipped
  **/
  @ApiModelProperty(value = "Is the item currently equipped on the given character?")
  public Boolean isIsEquipped() {
    return isEquipped;
  }

  public void setIsEquipped(Boolean isEquipped) {
    this.isEquipped = isEquipped;
  }

  public DestinyEntitiesItemsDestinyItemInstanceComponent canEquip(Boolean canEquip) {
    this.canEquip = canEquip;
    return this;
  }

   /**
   * If this is an equippable item, you can check it here. There are permanent as well as transitory reasons why an item might not be able to be equipped: check cannotEquipReason for details.
   * @return canEquip
  **/
  @ApiModelProperty(value = "If this is an equippable item, you can check it here. There are permanent as well as transitory reasons why an item might not be able to be equipped: check cannotEquipReason for details.")
  public Boolean isCanEquip() {
    return canEquip;
  }

  public void setCanEquip(Boolean canEquip) {
    this.canEquip = canEquip;
  }

  public DestinyEntitiesItemsDestinyItemInstanceComponent equipRequiredLevel(Integer equipRequiredLevel) {
    this.equipRequiredLevel = equipRequiredLevel;
    return this;
  }

   /**
   * If the item cannot be equipped until you reach a certain level, that level will be reflected here.
   * @return equipRequiredLevel
  **/
  @ApiModelProperty(value = "If the item cannot be equipped until you reach a certain level, that level will be reflected here.")
  public Integer getEquipRequiredLevel() {
    return equipRequiredLevel;
  }

  public void setEquipRequiredLevel(Integer equipRequiredLevel) {
    this.equipRequiredLevel = equipRequiredLevel;
  }

  public DestinyEntitiesItemsDestinyItemInstanceComponent unlockHashesRequiredToEquip(List<Long> unlockHashesRequiredToEquip) {
    this.unlockHashesRequiredToEquip = unlockHashesRequiredToEquip;
    return this;
  }

  public DestinyEntitiesItemsDestinyItemInstanceComponent addUnlockHashesRequiredToEquipItem(Long unlockHashesRequiredToEquipItem) {
    if (this.unlockHashesRequiredToEquip == null) {
      this.unlockHashesRequiredToEquip = new ArrayList<>();
    }
    this.unlockHashesRequiredToEquip.add(unlockHashesRequiredToEquipItem);
    return this;
  }

   /**
   * Sometimes, there are limitations to equipping that are represented by character-level flags called \&quot;unlocks\&quot;.  This is a list of flags that they need in order to equip the item that the character has not met. Use these to look up the descriptions to show in your UI by looking up the relevant DestinyUnlockDefinitions for the hashes.
   * @return unlockHashesRequiredToEquip
  **/
  @ApiModelProperty(value = "Sometimes, there are limitations to equipping that are represented by character-level flags called \"unlocks\".  This is a list of flags that they need in order to equip the item that the character has not met. Use these to look up the descriptions to show in your UI by looking up the relevant DestinyUnlockDefinitions for the hashes.")
  public List<Long> getUnlockHashesRequiredToEquip() {
    return unlockHashesRequiredToEquip;
  }

  public void setUnlockHashesRequiredToEquip(List<Long> unlockHashesRequiredToEquip) {
    this.unlockHashesRequiredToEquip = unlockHashesRequiredToEquip;
  }

  public DestinyEntitiesItemsDestinyItemInstanceComponent cannotEquipReason(Object cannotEquipReason) {
    this.cannotEquipReason = cannotEquipReason;
    return this;
  }

   /**
   * If you cannot equip the item, this is a flags enum that enumerates all of the reasons why you couldn&#39;t equip the item. You may need to refine your UI further by using unlockHashesRequiredToEquip and equipRequiredLevel.
   * @return cannotEquipReason
  **/
  @ApiModelProperty(value = "If you cannot equip the item, this is a flags enum that enumerates all of the reasons why you couldn't equip the item. You may need to refine your UI further by using unlockHashesRequiredToEquip and equipRequiredLevel.")
  public Object getCannotEquipReason() {
    return cannotEquipReason;
  }

  public void setCannotEquipReason(Object cannotEquipReason) {
    this.cannotEquipReason = cannotEquipReason;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyEntitiesItemsDestinyItemInstanceComponent destinyEntitiesItemsDestinyItemInstanceComponent = (DestinyEntitiesItemsDestinyItemInstanceComponent) o;
    return Objects.equals(this.damageType, destinyEntitiesItemsDestinyItemInstanceComponent.damageType) &&
        Objects.equals(this.damageTypeHash, destinyEntitiesItemsDestinyItemInstanceComponent.damageTypeHash) &&
        Objects.equals(this.primaryStat, destinyEntitiesItemsDestinyItemInstanceComponent.primaryStat) &&
        Objects.equals(this.itemLevel, destinyEntitiesItemsDestinyItemInstanceComponent.itemLevel) &&
        Objects.equals(this.quality, destinyEntitiesItemsDestinyItemInstanceComponent.quality) &&
        Objects.equals(this.isEquipped, destinyEntitiesItemsDestinyItemInstanceComponent.isEquipped) &&
        Objects.equals(this.canEquip, destinyEntitiesItemsDestinyItemInstanceComponent.canEquip) &&
        Objects.equals(this.equipRequiredLevel, destinyEntitiesItemsDestinyItemInstanceComponent.equipRequiredLevel) &&
        Objects.equals(this.unlockHashesRequiredToEquip, destinyEntitiesItemsDestinyItemInstanceComponent.unlockHashesRequiredToEquip) &&
        Objects.equals(this.cannotEquipReason, destinyEntitiesItemsDestinyItemInstanceComponent.cannotEquipReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(damageType, damageTypeHash, primaryStat, itemLevel, quality, isEquipped, canEquip, equipRequiredLevel, unlockHashesRequiredToEquip, cannotEquipReason);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyEntitiesItemsDestinyItemInstanceComponent {\n");
    
    sb.append("    damageType: ").append(toIndentedString(damageType)).append("\n");
    sb.append("    damageTypeHash: ").append(toIndentedString(damageTypeHash)).append("\n");
    sb.append("    primaryStat: ").append(toIndentedString(primaryStat)).append("\n");
    sb.append("    itemLevel: ").append(toIndentedString(itemLevel)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    isEquipped: ").append(toIndentedString(isEquipped)).append("\n");
    sb.append("    canEquip: ").append(toIndentedString(canEquip)).append("\n");
    sb.append("    equipRequiredLevel: ").append(toIndentedString(equipRequiredLevel)).append("\n");
    sb.append("    unlockHashesRequiredToEquip: ").append(toIndentedString(unlockHashesRequiredToEquip)).append("\n");
    sb.append("    cannotEquipReason: ").append(toIndentedString(cannotEquipReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

