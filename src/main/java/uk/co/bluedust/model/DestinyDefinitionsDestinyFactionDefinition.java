/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import uk.co.bluedust.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDestinyFactionVendorDefinition;

/**
 * These definitions represent Factions in the game. Factions have ended up unilaterally being related to Vendors that represent them, but that need not necessarily be the case.  A Faction is really just an entity that has a related progression for which a character can gain experience. In Destiny 1, Dead Orbit was an example of a Faction: there happens to be a Vendor that represents Dead Orbit (and indeed, DestinyVendorDefinition.factionHash defines to this relationship), but Dead Orbit could theoretically exist without the Vendor that provides rewards.
 */
@ApiModel(description = "These definitions represent Factions in the game. Factions have ended up unilaterally being related to Vendors that represent them, but that need not necessarily be the case.  A Faction is really just an entity that has a related progression for which a character can gain experience. In Destiny 1, Dead Orbit was an example of a Faction: there happens to be a Vendor that represents Dead Orbit (and indeed, DestinyVendorDefinition.factionHash defines to this relationship), but Dead Orbit could theoretically exist without the Vendor that provides rewards.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-04T16:50:06.922Z")
public class DestinyDefinitionsDestinyFactionDefinition {
  @JsonProperty("displayProperties")
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties = null;

  @JsonProperty("progressionHash")
  private Integer progressionHash = null;

  @JsonProperty("tokenValues")
  private Map<String, Integer> tokenValues = null;

  @JsonProperty("rewardItemHash")
  private Integer rewardItemHash = null;

  @JsonProperty("rewardVendorHash")
  private Integer rewardVendorHash = null;

  @JsonProperty("vendors")
  private List<DestinyDefinitionsDestinyFactionVendorDefinition> vendors = null;

  @JsonProperty("hash")
  private Integer hash = null;

  @JsonProperty("index")
  private Integer index = null;

  @JsonProperty("redacted")
  private Boolean redacted = null;

  public DestinyDefinitionsDestinyFactionDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

   /**
   * Get displayProperties
   * @return displayProperties
  **/
  @ApiModelProperty(value = "")
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }

  public DestinyDefinitionsDestinyFactionDefinition progressionHash(Integer progressionHash) {
    this.progressionHash = progressionHash;
    return this;
  }

   /**
   * The hash identifier for the DestinyProgressionDefinition that indicates the character&#39;s relationship with this faction in terms of experience and levels.
   * @return progressionHash
  **/
  @ApiModelProperty(value = "The hash identifier for the DestinyProgressionDefinition that indicates the character's relationship with this faction in terms of experience and levels.")
  public Integer getProgressionHash() {
    return progressionHash;
  }

  public void setProgressionHash(Integer progressionHash) {
    this.progressionHash = progressionHash;
  }

  public DestinyDefinitionsDestinyFactionDefinition tokenValues(Map<String, Integer> tokenValues) {
    this.tokenValues = tokenValues;
    return this;
  }

  public DestinyDefinitionsDestinyFactionDefinition putTokenValuesItem(String key, Integer tokenValuesItem) {
    if (this.tokenValues == null) {
      this.tokenValues = new HashMap<>();
    }
    this.tokenValues.put(key, tokenValuesItem);
    return this;
  }

   /**
   * The faction token item hashes, and their respective progression values.
   * @return tokenValues
  **/
  @ApiModelProperty(value = "The faction token item hashes, and their respective progression values.")
  public Map<String, Integer> getTokenValues() {
    return tokenValues;
  }

  public void setTokenValues(Map<String, Integer> tokenValues) {
    this.tokenValues = tokenValues;
  }

  public DestinyDefinitionsDestinyFactionDefinition rewardItemHash(Integer rewardItemHash) {
    this.rewardItemHash = rewardItemHash;
    return this;
  }

   /**
   * The faction reward item hash, usually an engram.
   * @return rewardItemHash
  **/
  @ApiModelProperty(value = "The faction reward item hash, usually an engram.")
  public Integer getRewardItemHash() {
    return rewardItemHash;
  }

  public void setRewardItemHash(Integer rewardItemHash) {
    this.rewardItemHash = rewardItemHash;
  }

  public DestinyDefinitionsDestinyFactionDefinition rewardVendorHash(Integer rewardVendorHash) {
    this.rewardVendorHash = rewardVendorHash;
    return this;
  }

   /**
   * The faction reward vendor hash, used for faction engram previews.
   * @return rewardVendorHash
  **/
  @ApiModelProperty(value = "The faction reward vendor hash, used for faction engram previews.")
  public Integer getRewardVendorHash() {
    return rewardVendorHash;
  }

  public void setRewardVendorHash(Integer rewardVendorHash) {
    this.rewardVendorHash = rewardVendorHash;
  }

  public DestinyDefinitionsDestinyFactionDefinition vendors(List<DestinyDefinitionsDestinyFactionVendorDefinition> vendors) {
    this.vendors = vendors;
    return this;
  }

  public DestinyDefinitionsDestinyFactionDefinition addVendorsItem(DestinyDefinitionsDestinyFactionVendorDefinition vendorsItem) {
    if (this.vendors == null) {
      this.vendors = new ArrayList<>();
    }
    this.vendors.add(vendorsItem);
    return this;
  }

   /**
   * List of vendors that are associated with this faction. The last vendor that passes the unlock flag checks is the one that should be shown.
   * @return vendors
  **/
  @ApiModelProperty(value = "List of vendors that are associated with this faction. The last vendor that passes the unlock flag checks is the one that should be shown.")
  public List<DestinyDefinitionsDestinyFactionVendorDefinition> getVendors() {
    return vendors;
  }

  public void setVendors(List<DestinyDefinitionsDestinyFactionVendorDefinition> vendors) {
    this.vendors = vendors;
  }

  public DestinyDefinitionsDestinyFactionDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

   /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
  **/
  @ApiModelProperty(value = "The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.")
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }

  public DestinyDefinitionsDestinyFactionDefinition index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * The index of the entity as it was found in the investment tables.
   * @return index
  **/
  @ApiModelProperty(value = "The index of the entity as it was found in the investment tables.")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public DestinyDefinitionsDestinyFactionDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

   /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
  **/
  @ApiModelProperty(value = "If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!")
  public Boolean isRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyFactionDefinition destinyDefinitionsDestinyFactionDefinition = (DestinyDefinitionsDestinyFactionDefinition) o;
    return Objects.equals(this.displayProperties, destinyDefinitionsDestinyFactionDefinition.displayProperties) &&
        Objects.equals(this.progressionHash, destinyDefinitionsDestinyFactionDefinition.progressionHash) &&
        Objects.equals(this.tokenValues, destinyDefinitionsDestinyFactionDefinition.tokenValues) &&
        Objects.equals(this.rewardItemHash, destinyDefinitionsDestinyFactionDefinition.rewardItemHash) &&
        Objects.equals(this.rewardVendorHash, destinyDefinitionsDestinyFactionDefinition.rewardVendorHash) &&
        Objects.equals(this.vendors, destinyDefinitionsDestinyFactionDefinition.vendors) &&
        Objects.equals(this.hash, destinyDefinitionsDestinyFactionDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsDestinyFactionDefinition.index) &&
        Objects.equals(this.redacted, destinyDefinitionsDestinyFactionDefinition.redacted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayProperties, progressionHash, tokenValues, rewardItemHash, rewardVendorHash, vendors, hash, index, redacted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyFactionDefinition {\n");
    
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    progressionHash: ").append(toIndentedString(progressionHash)).append("\n");
    sb.append("    tokenValues: ").append(toIndentedString(tokenValues)).append("\n");
    sb.append("    rewardItemHash: ").append(toIndentedString(rewardItemHash)).append("\n");
    sb.append("    rewardVendorHash: ").append(toIndentedString(rewardVendorHash)).append("\n");
    sb.append("    vendors: ").append(toIndentedString(vendors)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

