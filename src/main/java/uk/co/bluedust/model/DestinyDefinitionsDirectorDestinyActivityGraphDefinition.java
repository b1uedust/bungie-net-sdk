/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import uk.co.bluedust.model.DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition;
import uk.co.bluedust.model.DestinyDefinitionsDirectorDestinyLinkedGraphDefinition;

/**
 * Represents a Map View in the director: be them overview views, destination views, or other.  They have nodes which map to activities, and other various visual elements that we (or others) may or may not be able to use.  Activity graphs, most importantly, have nodes which can have activities in various states of playability.  Unfortunately, activity graphs are combined at runtime with Game UI-only assets such as fragments of map images, various in-game special effects, decals etc... that we don&#39;t get in these definitions.  If we end up having time, we may end up trying to manually populate those here: but the last time we tried that, before the lead-up to D1, it proved to be unmaintainable as the game&#39;s content changed. So don&#39;t bet the farm on us providing that content in this definition.
 */
@ApiModel(description = "Represents a Map View in the director: be them overview views, destination views, or other.  They have nodes which map to activities, and other various visual elements that we (or others) may or may not be able to use.  Activity graphs, most importantly, have nodes which can have activities in various states of playability.  Unfortunately, activity graphs are combined at runtime with Game UI-only assets such as fragments of map images, various in-game special effects, decals etc... that we don't get in these definitions.  If we end up having time, we may end up trying to manually populate those here: but the last time we tried that, before the lead-up to D1, it proved to be unmaintainable as the game's content changed. So don't bet the farm on us providing that content in this definition.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-04T16:50:06.922Z")
public class DestinyDefinitionsDirectorDestinyActivityGraphDefinition {
  @JsonProperty("nodes")
  private List<DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition> nodes = null;

  @JsonProperty("artElements")
  private List<DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition> artElements = null;

  @JsonProperty("connections")
  private List<DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition> connections = null;

  @JsonProperty("displayObjectives")
  private List<DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition> displayObjectives = null;

  @JsonProperty("displayProgressions")
  private List<DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition> displayProgressions = null;

  @JsonProperty("linkedGraphs")
  private List<DestinyDefinitionsDirectorDestinyLinkedGraphDefinition> linkedGraphs = null;

  @JsonProperty("hash")
  private Integer hash = null;

  @JsonProperty("index")
  private Integer index = null;

  @JsonProperty("redacted")
  private Boolean redacted = null;

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition nodes(List<DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition> nodes) {
    this.nodes = nodes;
    return this;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition addNodesItem(DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition nodesItem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<>();
    }
    this.nodes.add(nodesItem);
    return this;
  }

   /**
   * These represent the visual \&quot;nodes\&quot; on the map&#39;s view. These are the activities you can click on in the map.
   * @return nodes
  **/
  @ApiModelProperty(value = "These represent the visual \"nodes\" on the map's view. These are the activities you can click on in the map.")
  public List<DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition> getNodes() {
    return nodes;
  }

  public void setNodes(List<DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition> nodes) {
    this.nodes = nodes;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition artElements(List<DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition> artElements) {
    this.artElements = artElements;
    return this;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition addArtElementsItem(DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition artElementsItem) {
    if (this.artElements == null) {
      this.artElements = new ArrayList<>();
    }
    this.artElements.add(artElementsItem);
    return this;
  }

   /**
   * Represents one-off/special UI elements that appear on the map.
   * @return artElements
  **/
  @ApiModelProperty(value = "Represents one-off/special UI elements that appear on the map.")
  public List<DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition> getArtElements() {
    return artElements;
  }

  public void setArtElements(List<DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition> artElements) {
    this.artElements = artElements;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition connections(List<DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition> connections) {
    this.connections = connections;
    return this;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition addConnectionsItem(DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition connectionsItem) {
    if (this.connections == null) {
      this.connections = new ArrayList<>();
    }
    this.connections.add(connectionsItem);
    return this;
  }

   /**
   * Represents connections between graph nodes. However, it lacks context that we&#39;d need to make good use of it.
   * @return connections
  **/
  @ApiModelProperty(value = "Represents connections between graph nodes. However, it lacks context that we'd need to make good use of it.")
  public List<DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition> getConnections() {
    return connections;
  }

  public void setConnections(List<DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition> connections) {
    this.connections = connections;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition displayObjectives(List<DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition> displayObjectives) {
    this.displayObjectives = displayObjectives;
    return this;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition addDisplayObjectivesItem(DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition displayObjectivesItem) {
    if (this.displayObjectives == null) {
      this.displayObjectives = new ArrayList<>();
    }
    this.displayObjectives.add(displayObjectivesItem);
    return this;
  }

   /**
   * Objectives can display on maps, and this is supposedly metadata for that. I have not had the time to analyze the details of what is useful within however: we could be missing important data to make this work. Expect this property to be expanded on later if possible.
   * @return displayObjectives
  **/
  @ApiModelProperty(value = "Objectives can display on maps, and this is supposedly metadata for that. I have not had the time to analyze the details of what is useful within however: we could be missing important data to make this work. Expect this property to be expanded on later if possible.")
  public List<DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition> getDisplayObjectives() {
    return displayObjectives;
  }

  public void setDisplayObjectives(List<DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition> displayObjectives) {
    this.displayObjectives = displayObjectives;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition displayProgressions(List<DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition> displayProgressions) {
    this.displayProgressions = displayProgressions;
    return this;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition addDisplayProgressionsItem(DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition displayProgressionsItem) {
    if (this.displayProgressions == null) {
      this.displayProgressions = new ArrayList<>();
    }
    this.displayProgressions.add(displayProgressionsItem);
    return this;
  }

   /**
   * Progressions can also display on maps, but similarly to displayObjectives we appear to lack some required information and context right now. We will have to look into it later and add more data if possible.
   * @return displayProgressions
  **/
  @ApiModelProperty(value = "Progressions can also display on maps, but similarly to displayObjectives we appear to lack some required information and context right now. We will have to look into it later and add more data if possible.")
  public List<DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition> getDisplayProgressions() {
    return displayProgressions;
  }

  public void setDisplayProgressions(List<DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition> displayProgressions) {
    this.displayProgressions = displayProgressions;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition linkedGraphs(List<DestinyDefinitionsDirectorDestinyLinkedGraphDefinition> linkedGraphs) {
    this.linkedGraphs = linkedGraphs;
    return this;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition addLinkedGraphsItem(DestinyDefinitionsDirectorDestinyLinkedGraphDefinition linkedGraphsItem) {
    if (this.linkedGraphs == null) {
      this.linkedGraphs = new ArrayList<>();
    }
    this.linkedGraphs.add(linkedGraphsItem);
    return this;
  }

   /**
   * Represents links between this Activity Graph and other ones.
   * @return linkedGraphs
  **/
  @ApiModelProperty(value = "Represents links between this Activity Graph and other ones.")
  public List<DestinyDefinitionsDirectorDestinyLinkedGraphDefinition> getLinkedGraphs() {
    return linkedGraphs;
  }

  public void setLinkedGraphs(List<DestinyDefinitionsDirectorDestinyLinkedGraphDefinition> linkedGraphs) {
    this.linkedGraphs = linkedGraphs;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

   /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
  **/
  @ApiModelProperty(value = "The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.")
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * The index of the entity as it was found in the investment tables.
   * @return index
  **/
  @ApiModelProperty(value = "The index of the entity as it was found in the investment tables.")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

   /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
  **/
  @ApiModelProperty(value = "If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!")
  public Boolean isRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDirectorDestinyActivityGraphDefinition destinyDefinitionsDirectorDestinyActivityGraphDefinition = (DestinyDefinitionsDirectorDestinyActivityGraphDefinition) o;
    return Objects.equals(this.nodes, destinyDefinitionsDirectorDestinyActivityGraphDefinition.nodes) &&
        Objects.equals(this.artElements, destinyDefinitionsDirectorDestinyActivityGraphDefinition.artElements) &&
        Objects.equals(this.connections, destinyDefinitionsDirectorDestinyActivityGraphDefinition.connections) &&
        Objects.equals(this.displayObjectives, destinyDefinitionsDirectorDestinyActivityGraphDefinition.displayObjectives) &&
        Objects.equals(this.displayProgressions, destinyDefinitionsDirectorDestinyActivityGraphDefinition.displayProgressions) &&
        Objects.equals(this.linkedGraphs, destinyDefinitionsDirectorDestinyActivityGraphDefinition.linkedGraphs) &&
        Objects.equals(this.hash, destinyDefinitionsDirectorDestinyActivityGraphDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsDirectorDestinyActivityGraphDefinition.index) &&
        Objects.equals(this.redacted, destinyDefinitionsDirectorDestinyActivityGraphDefinition.redacted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodes, artElements, connections, displayObjectives, displayProgressions, linkedGraphs, hash, index, redacted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDirectorDestinyActivityGraphDefinition {\n");
    
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    artElements: ").append(toIndentedString(artElements)).append("\n");
    sb.append("    connections: ").append(toIndentedString(connections)).append("\n");
    sb.append("    displayObjectives: ").append(toIndentedString(displayObjectives)).append("\n");
    sb.append("    displayProgressions: ").append(toIndentedString(displayProgressions)).append("\n");
    sb.append("    linkedGraphs: ").append(toIndentedString(linkedGraphs)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

