/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import uk.co.bluedust.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;

/**
 * Sockets on an item are organized into Categories visually.  You can find references to the socket category defined on an item&#39;s DestinyInventoryItemDefinition.sockets.socketCategories property.  This has the display information for rendering the categories&#39; header, and a hint for how the UI should handle showing this category.  The shitty thing about this, however, is that the socket categories&#39; UI style can be overridden by the item&#39;s UI style. For instance, the Socket Category used by Emote Sockets says it&#39;s \&quot;consumable,\&quot; but that&#39;s a lie: they&#39;re all reusable, and overridden by the detail UI pages in ways that we can&#39;t easily account for in the API.  As a result, I will try to compile these rules into the individual sockets on items, and provide the best hint possible there through the plugSources property. In the future, I may attempt to use this information in conjunction with the item to provide a more usable UI hint on the socket layer, but for now improving the consistency of plugSources is the best I have time to provide. (See https://github.com/Bungie-net/api/issues/522 for more info)
 */
@ApiModel(description = "Sockets on an item are organized into Categories visually.  You can find references to the socket category defined on an item's DestinyInventoryItemDefinition.sockets.socketCategories property.  This has the display information for rendering the categories' header, and a hint for how the UI should handle showing this category.  The shitty thing about this, however, is that the socket categories' UI style can be overridden by the item's UI style. For instance, the Socket Category used by Emote Sockets says it's \"consumable,\" but that's a lie: they're all reusable, and overridden by the detail UI pages in ways that we can't easily account for in the API.  As a result, I will try to compile these rules into the individual sockets on items, and provide the best hint possible there through the plugSources property. In the future, I may attempt to use this information in conjunction with the item to provide a more usable UI hint on the socket layer, but for now improving the consistency of plugSources is the best I have time to provide. (See https://github.com/Bungie-net/api/issues/522 for more info)")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-04T16:59:02.979Z")
public class DestinyDefinitionsSocketsDestinySocketCategoryDefinition {
  @JsonProperty("displayProperties")
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties = null;

  @JsonProperty("uiCategoryStyle")
  private Integer uiCategoryStyle = null;

  @JsonProperty("categoryStyle")
  private Object categoryStyle = null;

  @JsonProperty("hash")
  private Integer hash = null;

  @JsonProperty("index")
  private Integer index = null;

  @JsonProperty("redacted")
  private Boolean redacted = null;

  public DestinyDefinitionsSocketsDestinySocketCategoryDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

   /**
   * Get displayProperties
   * @return displayProperties
  **/
  @ApiModelProperty(value = "")
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }

  public DestinyDefinitionsSocketsDestinySocketCategoryDefinition uiCategoryStyle(Integer uiCategoryStyle) {
    this.uiCategoryStyle = uiCategoryStyle;
    return this;
  }

   /**
   * A string hinting to the game&#39;s UI system about how the sockets in this category should be displayed.  BNet doesn&#39;t use it: it&#39;s up to you to find valid values and make your own special UI if you want to honor this category style.
   * @return uiCategoryStyle
  **/
  @ApiModelProperty(value = "A string hinting to the game's UI system about how the sockets in this category should be displayed.  BNet doesn't use it: it's up to you to find valid values and make your own special UI if you want to honor this category style.")
  public Integer getUiCategoryStyle() {
    return uiCategoryStyle;
  }

  public void setUiCategoryStyle(Integer uiCategoryStyle) {
    this.uiCategoryStyle = uiCategoryStyle;
  }

  public DestinyDefinitionsSocketsDestinySocketCategoryDefinition categoryStyle(Object categoryStyle) {
    this.categoryStyle = categoryStyle;
    return this;
  }

   /**
   * Same as uiCategoryStyle, but in a more usable enumeration form.
   * @return categoryStyle
  **/
  @ApiModelProperty(value = "Same as uiCategoryStyle, but in a more usable enumeration form.")
  public Object getCategoryStyle() {
    return categoryStyle;
  }

  public void setCategoryStyle(Object categoryStyle) {
    this.categoryStyle = categoryStyle;
  }

  public DestinyDefinitionsSocketsDestinySocketCategoryDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

   /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
  **/
  @ApiModelProperty(value = "The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.")
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }

  public DestinyDefinitionsSocketsDestinySocketCategoryDefinition index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * The index of the entity as it was found in the investment tables.
   * @return index
  **/
  @ApiModelProperty(value = "The index of the entity as it was found in the investment tables.")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public DestinyDefinitionsSocketsDestinySocketCategoryDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

   /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
  **/
  @ApiModelProperty(value = "If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!")
  public Boolean isRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsSocketsDestinySocketCategoryDefinition destinyDefinitionsSocketsDestinySocketCategoryDefinition = (DestinyDefinitionsSocketsDestinySocketCategoryDefinition) o;
    return Objects.equals(this.displayProperties, destinyDefinitionsSocketsDestinySocketCategoryDefinition.displayProperties) &&
        Objects.equals(this.uiCategoryStyle, destinyDefinitionsSocketsDestinySocketCategoryDefinition.uiCategoryStyle) &&
        Objects.equals(this.categoryStyle, destinyDefinitionsSocketsDestinySocketCategoryDefinition.categoryStyle) &&
        Objects.equals(this.hash, destinyDefinitionsSocketsDestinySocketCategoryDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsSocketsDestinySocketCategoryDefinition.index) &&
        Objects.equals(this.redacted, destinyDefinitionsSocketsDestinySocketCategoryDefinition.redacted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayProperties, uiCategoryStyle, categoryStyle, hash, index, redacted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsSocketsDestinySocketCategoryDefinition {\n");
    
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    uiCategoryStyle: ").append(toIndentedString(uiCategoryStyle)).append("\n");
    sb.append("    categoryStyle: ").append(toIndentedString(categoryStyle)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

