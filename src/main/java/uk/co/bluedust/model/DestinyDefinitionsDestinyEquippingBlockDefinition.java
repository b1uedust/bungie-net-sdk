/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Items that can be equipped define this block. It contains information we need to understand how and when the item can be equipped.
 */
@ApiModel(description = "Items that can be equipped define this block. It contains information we need to understand how and when the item can be equipped.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-04T16:50:06.922Z")
public class DestinyDefinitionsDestinyEquippingBlockDefinition {
  @JsonProperty("gearsetItemHash")
  private Integer gearsetItemHash = null;

  @JsonProperty("uniqueLabel")
  private String uniqueLabel = null;

  @JsonProperty("uniqueLabelHash")
  private Integer uniqueLabelHash = null;

  @JsonProperty("equipmentSlotTypeHash")
  private Integer equipmentSlotTypeHash = null;

  @JsonProperty("attributes")
  private Object attributes = null;

  @JsonProperty("ammoType")
  private Object ammoType = null;

  @JsonProperty("displayStrings")
  private List<String> displayStrings = null;

  public DestinyDefinitionsDestinyEquippingBlockDefinition gearsetItemHash(Integer gearsetItemHash) {
    this.gearsetItemHash = gearsetItemHash;
    return this;
  }

   /**
   * If the item is part of a gearset, this is a reference to that gearset item.
   * @return gearsetItemHash
  **/
  @ApiModelProperty(value = "If the item is part of a gearset, this is a reference to that gearset item.")
  public Integer getGearsetItemHash() {
    return gearsetItemHash;
  }

  public void setGearsetItemHash(Integer gearsetItemHash) {
    this.gearsetItemHash = gearsetItemHash;
  }

  public DestinyDefinitionsDestinyEquippingBlockDefinition uniqueLabel(String uniqueLabel) {
    this.uniqueLabel = uniqueLabel;
    return this;
  }

   /**
   * If defined, this is the label used to check if the item has other items of matching types already equipped.   For instance, when you aren&#39;t allowed to equip more than one Exotic Weapon, that&#39;s because all exotic weapons have identical uniqueLabels and the game checks the to-be-equipped item&#39;s uniqueLabel vs. all other already equipped items (other than the item in the slot that&#39;s about to be occupied).
   * @return uniqueLabel
  **/
  @ApiModelProperty(value = "If defined, this is the label used to check if the item has other items of matching types already equipped.   For instance, when you aren't allowed to equip more than one Exotic Weapon, that's because all exotic weapons have identical uniqueLabels and the game checks the to-be-equipped item's uniqueLabel vs. all other already equipped items (other than the item in the slot that's about to be occupied).")
  public String getUniqueLabel() {
    return uniqueLabel;
  }

  public void setUniqueLabel(String uniqueLabel) {
    this.uniqueLabel = uniqueLabel;
  }

  public DestinyDefinitionsDestinyEquippingBlockDefinition uniqueLabelHash(Integer uniqueLabelHash) {
    this.uniqueLabelHash = uniqueLabelHash;
    return this;
  }

   /**
   * The hash of that unique label. Does not point to a specific definition.
   * @return uniqueLabelHash
  **/
  @ApiModelProperty(value = "The hash of that unique label. Does not point to a specific definition.")
  public Integer getUniqueLabelHash() {
    return uniqueLabelHash;
  }

  public void setUniqueLabelHash(Integer uniqueLabelHash) {
    this.uniqueLabelHash = uniqueLabelHash;
  }

  public DestinyDefinitionsDestinyEquippingBlockDefinition equipmentSlotTypeHash(Integer equipmentSlotTypeHash) {
    this.equipmentSlotTypeHash = equipmentSlotTypeHash;
    return this;
  }

   /**
   * An equipped item *must* be equipped in an Equipment Slot. This is the hash identifier of the DestinyEquipmentSlotDefinition into which it must be equipped.
   * @return equipmentSlotTypeHash
  **/
  @ApiModelProperty(value = "An equipped item *must* be equipped in an Equipment Slot. This is the hash identifier of the DestinyEquipmentSlotDefinition into which it must be equipped.")
  public Integer getEquipmentSlotTypeHash() {
    return equipmentSlotTypeHash;
  }

  public void setEquipmentSlotTypeHash(Integer equipmentSlotTypeHash) {
    this.equipmentSlotTypeHash = equipmentSlotTypeHash;
  }

  public DestinyDefinitionsDestinyEquippingBlockDefinition attributes(Object attributes) {
    this.attributes = attributes;
    return this;
  }

   /**
   * These are custom attributes on the equippability of the item.  For now, this can only be \&quot;equip on acquire\&quot;, which would mean that the item will be automatically equipped as soon as you pick it up.
   * @return attributes
  **/
  @ApiModelProperty(value = "These are custom attributes on the equippability of the item.  For now, this can only be \"equip on acquire\", which would mean that the item will be automatically equipped as soon as you pick it up.")
  public Object getAttributes() {
    return attributes;
  }

  public void setAttributes(Object attributes) {
    this.attributes = attributes;
  }

  public DestinyDefinitionsDestinyEquippingBlockDefinition ammoType(Object ammoType) {
    this.ammoType = ammoType;
    return this;
  }

   /**
   * Ammo type used by a weapon is no longer determined by the bucket in which it is contained. If the item has an ammo type - i.e. if it is a weapon - this will be the type of ammunition expected.
   * @return ammoType
  **/
  @ApiModelProperty(value = "Ammo type used by a weapon is no longer determined by the bucket in which it is contained. If the item has an ammo type - i.e. if it is a weapon - this will be the type of ammunition expected.")
  public Object getAmmoType() {
    return ammoType;
  }

  public void setAmmoType(Object ammoType) {
    this.ammoType = ammoType;
  }

  public DestinyDefinitionsDestinyEquippingBlockDefinition displayStrings(List<String> displayStrings) {
    this.displayStrings = displayStrings;
    return this;
  }

  public DestinyDefinitionsDestinyEquippingBlockDefinition addDisplayStringsItem(String displayStringsItem) {
    if (this.displayStrings == null) {
      this.displayStrings = new ArrayList<>();
    }
    this.displayStrings.add(displayStringsItem);
    return this;
  }

   /**
   * These are strings that represent the possible Game/Account/Character state failure conditions that can occur when trying to equip the item. They match up one-to-one with requiredUnlockExpressions.
   * @return displayStrings
  **/
  @ApiModelProperty(value = "These are strings that represent the possible Game/Account/Character state failure conditions that can occur when trying to equip the item. They match up one-to-one with requiredUnlockExpressions.")
  public List<String> getDisplayStrings() {
    return displayStrings;
  }

  public void setDisplayStrings(List<String> displayStrings) {
    this.displayStrings = displayStrings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyEquippingBlockDefinition destinyDefinitionsDestinyEquippingBlockDefinition = (DestinyDefinitionsDestinyEquippingBlockDefinition) o;
    return Objects.equals(this.gearsetItemHash, destinyDefinitionsDestinyEquippingBlockDefinition.gearsetItemHash) &&
        Objects.equals(this.uniqueLabel, destinyDefinitionsDestinyEquippingBlockDefinition.uniqueLabel) &&
        Objects.equals(this.uniqueLabelHash, destinyDefinitionsDestinyEquippingBlockDefinition.uniqueLabelHash) &&
        Objects.equals(this.equipmentSlotTypeHash, destinyDefinitionsDestinyEquippingBlockDefinition.equipmentSlotTypeHash) &&
        Objects.equals(this.attributes, destinyDefinitionsDestinyEquippingBlockDefinition.attributes) &&
        Objects.equals(this.ammoType, destinyDefinitionsDestinyEquippingBlockDefinition.ammoType) &&
        Objects.equals(this.displayStrings, destinyDefinitionsDestinyEquippingBlockDefinition.displayStrings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gearsetItemHash, uniqueLabel, uniqueLabelHash, equipmentSlotTypeHash, attributes, ammoType, displayStrings);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyEquippingBlockDefinition {\n");
    
    sb.append("    gearsetItemHash: ").append(toIndentedString(gearsetItemHash)).append("\n");
    sb.append("    uniqueLabel: ").append(toIndentedString(uniqueLabel)).append("\n");
    sb.append("    uniqueLabelHash: ").append(toIndentedString(uniqueLabelHash)).append("\n");
    sb.append("    equipmentSlotTypeHash: ").append(toIndentedString(equipmentSlotTypeHash)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    ammoType: ").append(toIndentedString(ammoType)).append("\n");
    sb.append("    displayStrings: ").append(toIndentedString(displayStrings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

