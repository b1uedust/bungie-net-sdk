/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * DestinyAdvancedAwaUserResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-04T23:34:27.728Z")
public class DestinyAdvancedAwaUserResponse {
  @JsonProperty("selection")
  private Object selection = null;

  @JsonProperty("correlationId")
  private String correlationId = null;

  @JsonProperty("nonce")
  private List<byte[]> nonce = null;

  public DestinyAdvancedAwaUserResponse selection(Object selection) {
    this.selection = selection;
    return this;
  }

   /**
   * Indication of the selection the user has made (Approving or rejecting the action)
   * @return selection
  **/
  @ApiModelProperty(value = "Indication of the selection the user has made (Approving or rejecting the action)")
  public Object getSelection() {
    return selection;
  }

  public void setSelection(Object selection) {
    this.selection = selection;
  }

  public DestinyAdvancedAwaUserResponse correlationId(String correlationId) {
    this.correlationId = correlationId;
    return this;
  }

   /**
   * Correlation ID of the request
   * @return correlationId
  **/
  @ApiModelProperty(value = "Correlation ID of the request")
  public String getCorrelationId() {
    return correlationId;
  }

  public void setCorrelationId(String correlationId) {
    this.correlationId = correlationId;
  }

  public DestinyAdvancedAwaUserResponse nonce(List<byte[]> nonce) {
    this.nonce = nonce;
    return this;
  }

  public DestinyAdvancedAwaUserResponse addNonceItem(byte[] nonceItem) {
    if (this.nonce == null) {
      this.nonce = new ArrayList<>();
    }
    this.nonce.add(nonceItem);
    return this;
  }

   /**
   * Secret nonce received via the PUSH notification.
   * @return nonce
  **/
  @ApiModelProperty(value = "Secret nonce received via the PUSH notification.")
  public List<byte[]> getNonce() {
    return nonce;
  }

  public void setNonce(List<byte[]> nonce) {
    this.nonce = nonce;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyAdvancedAwaUserResponse destinyAdvancedAwaUserResponse = (DestinyAdvancedAwaUserResponse) o;
    return Objects.equals(this.selection, destinyAdvancedAwaUserResponse.selection) &&
        Objects.equals(this.correlationId, destinyAdvancedAwaUserResponse.correlationId) &&
        Objects.equals(this.nonce, destinyAdvancedAwaUserResponse.nonce);
  }

  @Override
  public int hashCode() {
    return Objects.hash(selection, correlationId, nonce);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyAdvancedAwaUserResponse {\n");
    
    sb.append("    selection: ").append(toIndentedString(selection)).append("\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

