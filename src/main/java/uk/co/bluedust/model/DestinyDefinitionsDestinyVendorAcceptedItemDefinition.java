/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * If you ever wondered how the Vault works, here it is.  The Vault is merely a set of inventory buckets that exist on your Profile/Account level. When you transfer items in the Vault, the game is using the Vault Vendor&#39;s DestinyVendorAcceptedItemDefinitions to see where the appropriate destination bucket is for the source bucket from whence your item is moving. If it finds such an entry, it transfers the item to the other bucket.  The mechanics for Postmaster works similarly, which is also a vendor. All driven by Accepted Items.
 */
@ApiModel(description = "If you ever wondered how the Vault works, here it is.  The Vault is merely a set of inventory buckets that exist on your Profile/Account level. When you transfer items in the Vault, the game is using the Vault Vendor's DestinyVendorAcceptedItemDefinitions to see where the appropriate destination bucket is for the source bucket from whence your item is moving. If it finds such an entry, it transfers the item to the other bucket.  The mechanics for Postmaster works similarly, which is also a vendor. All driven by Accepted Items.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-04T23:34:27.728Z")
public class DestinyDefinitionsDestinyVendorAcceptedItemDefinition {
  @JsonProperty("acceptedInventoryBucketHash")
  private Long acceptedInventoryBucketHash = null;

  @JsonProperty("destinationInventoryBucketHash")
  private Long destinationInventoryBucketHash = null;

  public DestinyDefinitionsDestinyVendorAcceptedItemDefinition acceptedInventoryBucketHash(Long acceptedInventoryBucketHash) {
    this.acceptedInventoryBucketHash = acceptedInventoryBucketHash;
    return this;
  }

   /**
   * The \&quot;source\&quot; bucket for a transfer. When a user wants to transfer an item, the appropriate DestinyVendorDefinition&#39;s acceptedItems property is evaluated, looking for an entry where acceptedInventoryBucketHash matches the bucket that the item being transferred is currently located. If it exists, the item will be transferred into whatever bucket is defined by destinationInventoryBucketHash.
   * @return acceptedInventoryBucketHash
  **/
  @ApiModelProperty(value = "The \"source\" bucket for a transfer. When a user wants to transfer an item, the appropriate DestinyVendorDefinition's acceptedItems property is evaluated, looking for an entry where acceptedInventoryBucketHash matches the bucket that the item being transferred is currently located. If it exists, the item will be transferred into whatever bucket is defined by destinationInventoryBucketHash.")
  public Long getAcceptedInventoryBucketHash() {
    return acceptedInventoryBucketHash;
  }

  public void setAcceptedInventoryBucketHash(Long acceptedInventoryBucketHash) {
    this.acceptedInventoryBucketHash = acceptedInventoryBucketHash;
  }

  public DestinyDefinitionsDestinyVendorAcceptedItemDefinition destinationInventoryBucketHash(Long destinationInventoryBucketHash) {
    this.destinationInventoryBucketHash = destinationInventoryBucketHash;
    return this;
  }

   /**
   * This is the bucket where the item being transferred will be put, given that it was being transferred *from* the bucket defined in acceptedInventoryBucketHash.
   * @return destinationInventoryBucketHash
  **/
  @ApiModelProperty(value = "This is the bucket where the item being transferred will be put, given that it was being transferred *from* the bucket defined in acceptedInventoryBucketHash.")
  public Long getDestinationInventoryBucketHash() {
    return destinationInventoryBucketHash;
  }

  public void setDestinationInventoryBucketHash(Long destinationInventoryBucketHash) {
    this.destinationInventoryBucketHash = destinationInventoryBucketHash;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyVendorAcceptedItemDefinition destinyDefinitionsDestinyVendorAcceptedItemDefinition = (DestinyDefinitionsDestinyVendorAcceptedItemDefinition) o;
    return Objects.equals(this.acceptedInventoryBucketHash, destinyDefinitionsDestinyVendorAcceptedItemDefinition.acceptedInventoryBucketHash) &&
        Objects.equals(this.destinationInventoryBucketHash, destinyDefinitionsDestinyVendorAcceptedItemDefinition.destinationInventoryBucketHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptedInventoryBucketHash, destinationInventoryBucketHash);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyVendorAcceptedItemDefinition {\n");
    
    sb.append("    acceptedInventoryBucketHash: ").append(toIndentedString(acceptedInventoryBucketHash)).append("\n");
    sb.append("    destinationInventoryBucketHash: ").append(toIndentedString(destinationInventoryBucketHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

