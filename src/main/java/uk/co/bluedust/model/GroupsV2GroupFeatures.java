/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import uk.co.bluedust.model.BungieMembershipType;
import uk.co.bluedust.model.GroupsV2Capabilities;

/**
 * GroupsV2GroupFeatures
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-04T16:59:02.979Z")
public class GroupsV2GroupFeatures {
  @JsonProperty("maximumMembers")
  private Integer maximumMembers = null;

  @JsonProperty("maximumMembershipsOfGroupType")
  private Integer maximumMembershipsOfGroupType = null;

  @JsonProperty("capabilities")
  private GroupsV2Capabilities capabilities = null;

  @JsonProperty("membershipTypes")
  private List<BungieMembershipType> membershipTypes = null;

  @JsonProperty("invitePermissionOverride")
  private Boolean invitePermissionOverride = null;

  @JsonProperty("updateCulturePermissionOverride")
  private Boolean updateCulturePermissionOverride = null;

  @JsonProperty("hostGuidedGamePermissionOverride")
  private Object hostGuidedGamePermissionOverride = null;

  @JsonProperty("updateBannerPermissionOverride")
  private Boolean updateBannerPermissionOverride = null;

  @JsonProperty("joinLevel")
  private Object joinLevel = null;

  public GroupsV2GroupFeatures maximumMembers(Integer maximumMembers) {
    this.maximumMembers = maximumMembers;
    return this;
  }

   /**
   * Get maximumMembers
   * @return maximumMembers
  **/
  @ApiModelProperty(value = "")
  public Integer getMaximumMembers() {
    return maximumMembers;
  }

  public void setMaximumMembers(Integer maximumMembers) {
    this.maximumMembers = maximumMembers;
  }

  public GroupsV2GroupFeatures maximumMembershipsOfGroupType(Integer maximumMembershipsOfGroupType) {
    this.maximumMembershipsOfGroupType = maximumMembershipsOfGroupType;
    return this;
  }

   /**
   * Maximum number of groups of this type a typical membership may join. For example, a user may join about 50 General groups with their Bungie.net account. They may join one clan per Destiny membership.
   * @return maximumMembershipsOfGroupType
  **/
  @ApiModelProperty(value = "Maximum number of groups of this type a typical membership may join. For example, a user may join about 50 General groups with their Bungie.net account. They may join one clan per Destiny membership.")
  public Integer getMaximumMembershipsOfGroupType() {
    return maximumMembershipsOfGroupType;
  }

  public void setMaximumMembershipsOfGroupType(Integer maximumMembershipsOfGroupType) {
    this.maximumMembershipsOfGroupType = maximumMembershipsOfGroupType;
  }

  public GroupsV2GroupFeatures capabilities(GroupsV2Capabilities capabilities) {
    this.capabilities = capabilities;
    return this;
  }

   /**
   * Get capabilities
   * @return capabilities
  **/
  @ApiModelProperty(value = "")
  public GroupsV2Capabilities getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(GroupsV2Capabilities capabilities) {
    this.capabilities = capabilities;
  }

  public GroupsV2GroupFeatures membershipTypes(List<BungieMembershipType> membershipTypes) {
    this.membershipTypes = membershipTypes;
    return this;
  }

  public GroupsV2GroupFeatures addMembershipTypesItem(BungieMembershipType membershipTypesItem) {
    if (this.membershipTypes == null) {
      this.membershipTypes = new ArrayList<>();
    }
    this.membershipTypes.add(membershipTypesItem);
    return this;
  }

   /**
   * Get membershipTypes
   * @return membershipTypes
  **/
  @ApiModelProperty(value = "")
  public List<BungieMembershipType> getMembershipTypes() {
    return membershipTypes;
  }

  public void setMembershipTypes(List<BungieMembershipType> membershipTypes) {
    this.membershipTypes = membershipTypes;
  }

  public GroupsV2GroupFeatures invitePermissionOverride(Boolean invitePermissionOverride) {
    this.invitePermissionOverride = invitePermissionOverride;
    return this;
  }

   /**
   * Minimum Member Level allowed to invite new members to group  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don&#39;t  Default is false for clans, true for groups.
   * @return invitePermissionOverride
  **/
  @ApiModelProperty(value = "Minimum Member Level allowed to invite new members to group  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.")
  public Boolean isInvitePermissionOverride() {
    return invitePermissionOverride;
  }

  public void setInvitePermissionOverride(Boolean invitePermissionOverride) {
    this.invitePermissionOverride = invitePermissionOverride;
  }

  public GroupsV2GroupFeatures updateCulturePermissionOverride(Boolean updateCulturePermissionOverride) {
    this.updateCulturePermissionOverride = updateCulturePermissionOverride;
    return this;
  }

   /**
   * Minimum Member Level allowed to update group culture  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don&#39;t  Default is false for clans, true for groups.
   * @return updateCulturePermissionOverride
  **/
  @ApiModelProperty(value = "Minimum Member Level allowed to update group culture  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.")
  public Boolean isUpdateCulturePermissionOverride() {
    return updateCulturePermissionOverride;
  }

  public void setUpdateCulturePermissionOverride(Boolean updateCulturePermissionOverride) {
    this.updateCulturePermissionOverride = updateCulturePermissionOverride;
  }

  public GroupsV2GroupFeatures hostGuidedGamePermissionOverride(Object hostGuidedGamePermissionOverride) {
    this.hostGuidedGamePermissionOverride = hostGuidedGamePermissionOverride;
    return this;
  }

   /**
   * Minimum Member Level allowed to host guided games  Always Allowed: Founder, Acting Founder, Admin  Allowed Overrides: None, Member, Beginner  Default is Member for clans, None for groups, although this means nothing for groups.
   * @return hostGuidedGamePermissionOverride
  **/
  @ApiModelProperty(value = "Minimum Member Level allowed to host guided games  Always Allowed: Founder, Acting Founder, Admin  Allowed Overrides: None, Member, Beginner  Default is Member for clans, None for groups, although this means nothing for groups.")
  public Object getHostGuidedGamePermissionOverride() {
    return hostGuidedGamePermissionOverride;
  }

  public void setHostGuidedGamePermissionOverride(Object hostGuidedGamePermissionOverride) {
    this.hostGuidedGamePermissionOverride = hostGuidedGamePermissionOverride;
  }

  public GroupsV2GroupFeatures updateBannerPermissionOverride(Boolean updateBannerPermissionOverride) {
    this.updateBannerPermissionOverride = updateBannerPermissionOverride;
    return this;
  }

   /**
   * Minimum Member Level allowed to update banner  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don&#39;t  Default is false for clans, true for groups.
   * @return updateBannerPermissionOverride
  **/
  @ApiModelProperty(value = "Minimum Member Level allowed to update banner  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.")
  public Boolean isUpdateBannerPermissionOverride() {
    return updateBannerPermissionOverride;
  }

  public void setUpdateBannerPermissionOverride(Boolean updateBannerPermissionOverride) {
    this.updateBannerPermissionOverride = updateBannerPermissionOverride;
  }

  public GroupsV2GroupFeatures joinLevel(Object joinLevel) {
    this.joinLevel = joinLevel;
    return this;
  }

   /**
   * Level to join a member at when accepting an invite, application, or joining an open clan  Default is Beginner.
   * @return joinLevel
  **/
  @ApiModelProperty(value = "Level to join a member at when accepting an invite, application, or joining an open clan  Default is Beginner.")
  public Object getJoinLevel() {
    return joinLevel;
  }

  public void setJoinLevel(Object joinLevel) {
    this.joinLevel = joinLevel;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupsV2GroupFeatures groupsV2GroupFeatures = (GroupsV2GroupFeatures) o;
    return Objects.equals(this.maximumMembers, groupsV2GroupFeatures.maximumMembers) &&
        Objects.equals(this.maximumMembershipsOfGroupType, groupsV2GroupFeatures.maximumMembershipsOfGroupType) &&
        Objects.equals(this.capabilities, groupsV2GroupFeatures.capabilities) &&
        Objects.equals(this.membershipTypes, groupsV2GroupFeatures.membershipTypes) &&
        Objects.equals(this.invitePermissionOverride, groupsV2GroupFeatures.invitePermissionOverride) &&
        Objects.equals(this.updateCulturePermissionOverride, groupsV2GroupFeatures.updateCulturePermissionOverride) &&
        Objects.equals(this.hostGuidedGamePermissionOverride, groupsV2GroupFeatures.hostGuidedGamePermissionOverride) &&
        Objects.equals(this.updateBannerPermissionOverride, groupsV2GroupFeatures.updateBannerPermissionOverride) &&
        Objects.equals(this.joinLevel, groupsV2GroupFeatures.joinLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maximumMembers, maximumMembershipsOfGroupType, capabilities, membershipTypes, invitePermissionOverride, updateCulturePermissionOverride, hostGuidedGamePermissionOverride, updateBannerPermissionOverride, joinLevel);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupsV2GroupFeatures {\n");
    
    sb.append("    maximumMembers: ").append(toIndentedString(maximumMembers)).append("\n");
    sb.append("    maximumMembershipsOfGroupType: ").append(toIndentedString(maximumMembershipsOfGroupType)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    membershipTypes: ").append(toIndentedString(membershipTypes)).append("\n");
    sb.append("    invitePermissionOverride: ").append(toIndentedString(invitePermissionOverride)).append("\n");
    sb.append("    updateCulturePermissionOverride: ").append(toIndentedString(updateCulturePermissionOverride)).append("\n");
    sb.append("    hostGuidedGamePermissionOverride: ").append(toIndentedString(hostGuidedGamePermissionOverride)).append("\n");
    sb.append("    updateBannerPermissionOverride: ").append(toIndentedString(updateBannerPermissionOverride)).append("\n");
    sb.append("    joinLevel: ").append(toIndentedString(joinLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

