/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.api;

import uk.co.bluedust.model.InlineResponse20010;
import uk.co.bluedust.model.InlineResponse20060;
import uk.co.bluedust.model.InlineResponse20061;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommunityContentApi
 */
@Ignore
public class CommunityContentApiTest {

    private final CommunityContentApi api = new CommunityContentApi();

    
    /**
     * 
     *
     * Returns community content.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void communityContentGetCommunityContentTest() {
        Integer mediaFilter = null;
        Integer page = null;
        Integer sort = null;
        InlineResponse20010 response = api.communityContentGetCommunityContent(mediaFilter, page, sort);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns info about community members who are live streaming.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void communityContentGetCommunityLiveStatusesTest() {
        Integer page = null;
        Integer partnershipType = null;
        Integer sort = null;
        Integer modeHash = null;
        String streamLocale = null;
        InlineResponse20060 response = api.communityContentGetCommunityLiveStatuses(page, partnershipType, sort, modeHash, streamLocale);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns info about community members who are live streaming in your clans.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void communityContentGetCommunityLiveStatusesForClanmatesTest() {
        Integer page = null;
        Integer partnershipType = null;
        Integer sort = null;
        InlineResponse20060 response = api.communityContentGetCommunityLiveStatusesForClanmates(page, partnershipType, sort);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns info about community members who are live streaming among your friends.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void communityContentGetCommunityLiveStatusesForFriendsTest() {
        Integer page = null;
        Integer partnershipType = null;
        Integer sort = null;
        InlineResponse20060 response = api.communityContentGetCommunityLiveStatusesForFriends(page, partnershipType, sort);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns info about Featured live streams.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void communityContentGetFeaturedCommunityLiveStatusesTest() {
        Integer page = null;
        Integer partnershipType = null;
        Integer sort = null;
        String streamLocale = null;
        InlineResponse20060 response = api.communityContentGetFeaturedCommunityLiveStatuses(page, partnershipType, sort, streamLocale);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the Live Streaming status of a particular Account and Membership Type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void communityContentGetStreamingStatusForMemberTest() {
        Long membershipId = null;
        Integer membershipType = null;
        Integer partnershipType = null;
        InlineResponse20061 response = api.communityContentGetStreamingStatusForMember(membershipId, membershipType, partnershipType);

        // TODO: test validations
    }
    
}
