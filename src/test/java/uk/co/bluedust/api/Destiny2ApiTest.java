/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.bluedust.api;

import uk.co.bluedust.model.DestinyDestinyComponentType;
import uk.co.bluedust.model.DestinyHistoricalStatsDefinitionsDestinyActivityModeType;
import uk.co.bluedust.model.DestinyHistoricalStatsDefinitionsDestinyStatsGroupType;
import uk.co.bluedust.model.InlineResponse20019;
import uk.co.bluedust.model.InlineResponse20033;
import uk.co.bluedust.model.InlineResponse20034;
import uk.co.bluedust.model.InlineResponse20035;
import uk.co.bluedust.model.InlineResponse20036;
import uk.co.bluedust.model.InlineResponse20037;
import uk.co.bluedust.model.InlineResponse20038;
import uk.co.bluedust.model.InlineResponse20039;
import uk.co.bluedust.model.InlineResponse20040;
import uk.co.bluedust.model.InlineResponse20041;
import uk.co.bluedust.model.InlineResponse20042;
import uk.co.bluedust.model.InlineResponse20043;
import uk.co.bluedust.model.InlineResponse20044;
import uk.co.bluedust.model.InlineResponse20045;
import uk.co.bluedust.model.InlineResponse20046;
import uk.co.bluedust.model.InlineResponse20047;
import uk.co.bluedust.model.InlineResponse20048;
import uk.co.bluedust.model.InlineResponse20049;
import uk.co.bluedust.model.InlineResponse20050;
import uk.co.bluedust.model.InlineResponse20051;
import uk.co.bluedust.model.InlineResponse20052;
import uk.co.bluedust.model.InlineResponse20053;
import uk.co.bluedust.model.InlineResponse20054;
import uk.co.bluedust.model.InlineResponse20055;
import uk.co.bluedust.model.InlineResponse20056;
import uk.co.bluedust.model.InlineResponse20057;
import uk.co.bluedust.model.InlineResponse20058;
import uk.co.bluedust.model.InlineResponse20059;
import java.time.OffsetDateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Destiny2Api
 */
@Ignore
public class Destiny2ApiTest {

    private final Destiny2Api api = new Destiny2Api();

    
    /**
     * 
     *
     * Returns the action token if user approves the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2AwaGetActionTokenTest() {
        String correlationId = null;
        InlineResponse20059 response = api.destiny2AwaGetActionToken(correlationId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Initialize a request to perform an advanced write action.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2AwaInitializeRequestTest() {
        InlineResponse20058 response = api.destiny2AwaInitializeRequest();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2AwaProvideAuthorizationResultTest() {
        InlineResponse20019 response = api.destiny2AwaProvideAuthorizationResult();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2EquipItemTest() {
        InlineResponse20019 response = api.destiny2EquipItem();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2EquipItemsTest() {
        InlineResponse20044 response = api.destiny2EquipItems();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets activity history stats for indicated character.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetActivityHistoryTest() {
        Long characterId = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        Integer count = null;
        Integer mode = null;
        Integer page = null;
        InlineResponse20053 response = api.destiny2GetActivityHistory(characterId, destinyMembershipId, membershipType, count, mode, page);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns character information for the supplied character.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetCharacterTest() {
        Long characterId = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        List<DestinyDestinyComponentType> components = null;
        InlineResponse20038 response = api.destiny2GetCharacter(characterId, destinyMembershipId, membershipType, components);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetClanAggregateStatsTest() {
        Long groupId = null;
        String modes = null;
        InlineResponse20049 response = api.destiny2GetClanAggregateStats(groupId, modes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetClanLeaderboardsTest() {
        Long groupId = null;
        Integer maxtop = null;
        String modes = null;
        String statid = null;
        InlineResponse20048 response = api.destiny2GetClanLeaderboards(groupId, maxtop, modes, statid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetClanWeeklyRewardStateTest() {
        Long groupId = null;
        InlineResponse20039 response = api.destiny2GetClanWeeklyRewardState(groupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetCollectibleNodeDetailsTest() {
        Long characterId = null;
        Long collectiblePresentationNodeHash = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        List<DestinyDestinyComponentType> components = null;
        InlineResponse20043 response = api.destiny2GetCollectibleNodeDetails(characterId, collectiblePresentationNodeHash, destinyMembershipId, membershipType, components);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets all activities the character has participated in together with aggregate statistics for those activities.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetDestinyAggregateActivityStatsTest() {
        Long characterId = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        InlineResponse20055 response = api.destiny2GetDestinyAggregateActivityStats(characterId, destinyMembershipId, membershipType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetDestinyEntityDefinitionTest() {
        String entityType = null;
        Long hashIdentifier = null;
        InlineResponse20034 response = api.destiny2GetDestinyEntityDefinition(entityType, hashIdentifier);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the current version of the manifest as a json object.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetDestinyManifestTest() {
        InlineResponse20033 response = api.destiny2GetDestinyManifest();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets historical stats for indicated character.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetHistoricalStatsTest() {
        Long characterId = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        OffsetDateTime dayend = null;
        OffsetDateTime daystart = null;
        List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null;
        List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> modes = null;
        Integer periodType = null;
        InlineResponse20051 response = api.destiny2GetHistoricalStats(characterId, destinyMembershipId, membershipType, dayend, daystart, groups, modes, periodType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets historical stats definitions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetHistoricalStatsDefinitionTest() {
        InlineResponse20047 response = api.destiny2GetHistoricalStatsDefinition();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets aggregate historical stats organized around each character for a given account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetHistoricalStatsForAccountTest() {
        Long destinyMembershipId = null;
        Integer membershipType = null;
        List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null;
        InlineResponse20052 response = api.destiny2GetHistoricalStatsForAccount(destinyMembershipId, membershipType, groups);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetItemTest() {
        Long destinyMembershipId = null;
        Long itemInstanceId = null;
        Integer membershipType = null;
        List<DestinyDestinyComponentType> components = null;
        InlineResponse20040 response = api.destiny2GetItem(destinyMembershipId, itemInstanceId, membershipType, components);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetLeaderboardsTest() {
        Long destinyMembershipId = null;
        Integer membershipType = null;
        Integer maxtop = null;
        String modes = null;
        String statid = null;
        InlineResponse20048 response = api.destiny2GetLeaderboards(destinyMembershipId, membershipType, maxtop, modes, statid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetLeaderboardsForCharacterTest() {
        Long characterId = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        Integer maxtop = null;
        String modes = null;
        String statid = null;
        InlineResponse20048 response = api.destiny2GetLeaderboardsForCharacter(characterId, destinyMembershipId, membershipType, maxtop, modes, statid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetLinkedProfilesTest() {
        Long membershipId = null;
        Integer membershipType = null;
        InlineResponse20036 response = api.destiny2GetLinkedProfiles(membershipId, membershipType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the available post game carnage report for the activity ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetPostGameCarnageReportTest() {
        Long activityId = null;
        InlineResponse20046 response = api.destiny2GetPostGameCarnageReport(activityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns Destiny Profile information for the supplied membership.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetProfileTest() {
        Long destinyMembershipId = null;
        Integer membershipType = null;
        List<DestinyDestinyComponentType> components = null;
        InlineResponse20037 response = api.destiny2GetProfile(destinyMembershipId, membershipType, components);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets custom localized content for the milestone of the given hash, if it exists.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetPublicMilestoneContentTest() {
        Long milestoneHash = null;
        InlineResponse20056 response = api.destiny2GetPublicMilestoneContent(milestoneHash);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets public information about currently available Milestones.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetPublicMilestonesTest() {
        InlineResponse20057 response = api.destiny2GetPublicMilestones();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets details about unique weapon usage, including all exotic weapons.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetUniqueWeaponHistoryTest() {
        Long characterId = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        InlineResponse20054 response = api.destiny2GetUniqueWeaponHistory(characterId, destinyMembershipId, membershipType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the details of a specific Vendor.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetVendorTest() {
        Long characterId = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        Long vendorHash = null;
        List<DestinyDestinyComponentType> components = null;
        InlineResponse20042 response = api.destiny2GetVendor(characterId, destinyMembershipId, membershipType, vendorHash, components);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2GetVendorsTest() {
        Long characterId = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        List<DestinyDestinyComponentType> components = null;
        InlineResponse20041 response = api.destiny2GetVendors(characterId, destinyMembershipId, membershipType, components);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2InsertSocketPlugTest() {
        InlineResponse20045 response = api.destiny2InsertSocketPlug();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2PullFromPostmasterTest() {
        InlineResponse20019 response = api.destiny2PullFromPostmaster();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2ReportOffensivePostGameCarnageReportPlayerTest() {
        Long activityId = null;
        InlineResponse20019 response = api.destiny2ReportOffensivePostGameCarnageReportPlayer(activityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets a page list of Destiny items.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2SearchDestinyEntitiesTest() {
        String searchTerm = null;
        String type = null;
        Integer page = null;
        InlineResponse20050 response = api.destiny2SearchDestinyEntities(searchTerm, type, page);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a list of Destiny memberships given a full Gamertag or PSN ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2SearchDestinyPlayerTest() {
        String displayName = null;
        Integer membershipType = null;
        InlineResponse20035 response = api.destiny2SearchDestinyPlayer(displayName, membershipType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set the Lock State for an instanced item. You must have a valid Destiny Account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2SetItemLockStateTest() {
        InlineResponse20019 response = api.destiny2SetItemLockState();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destiny2TransferItemTest() {
        InlineResponse20019 response = api.destiny2TransferItem();

        // TODO: test validations
    }
    
}
